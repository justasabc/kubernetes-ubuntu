using System;using Tools;
namespace OpenSim.Region.ScriptEngine.Shared.CodeTools {
//%+LSLProgramRoot+96
public class LSLProgramRoot : SYMBOL{
 public  LSLProgramRoot (Parser yyp, States  s ):base(((LSLSyntax
)yyp)){ while (0< s . kids . Count ) kids . Add ( s . kids . Pop ());
}
 public  LSLProgramRoot (Parser yyp, GlobalDefinitions  gd , States  s ):base(((LSLSyntax
)yyp)){ while (0< gd . kids . Count ) kids . Add ( gd . kids . Pop ());
 while (0< s . kids . Count ) kids . Add ( s . kids . Pop ());
}

public override string yyname { get { return "LSLProgramRoot"; }}
public override int yynum { get { return 96; }}
public LSLProgramRoot(Parser yyp):base(yyp){}}
//%+GlobalDefinitions+97
public class GlobalDefinitions : SYMBOL{
 public  GlobalDefinitions (Parser yyp, GlobalVariableDeclaration  gvd ):base(((LSLSyntax
)yyp)){ kids . Add ( gvd );
}
 public  GlobalDefinitions (Parser yyp, GlobalDefinitions  gd , GlobalVariableDeclaration  gvd ):base(((LSLSyntax
)yyp)){ while (0< gd . kids . Count ) kids . Add ( gd . kids . Pop ());
 kids . Add ( gvd );
}
 public  GlobalDefinitions (Parser yyp, GlobalFunctionDefinition  gfd ):base(((LSLSyntax
)yyp)){ kids . Add ( gfd );
}
 public  GlobalDefinitions (Parser yyp, GlobalDefinitions  gd , GlobalFunctionDefinition  gfd ):base(((LSLSyntax
)yyp)){ while (0< gd . kids . Count ) kids . Add ( gd . kids . Pop ());
 kids . Add ( gfd );
}

public override string yyname { get { return "GlobalDefinitions"; }}
public override int yynum { get { return 97; }}
public GlobalDefinitions(Parser yyp):base(yyp){}}
//%+GlobalVariableDeclaration+98
public class GlobalVariableDeclaration : SYMBOL{
 public  GlobalVariableDeclaration (Parser yyp, Declaration  d ):base(((LSLSyntax
)yyp)){ kids . Add ( d );
}
 public  GlobalVariableDeclaration (Parser yyp, Assignment  a ):base(((LSLSyntax
)yyp)){ kids . Add ( a );
}

public override string yyname { get { return "GlobalVariableDeclaration"; }}
public override int yynum { get { return 98; }}
public GlobalVariableDeclaration(Parser yyp):base(yyp){}}
//%+GlobalFunctionDefinition+99
public class GlobalFunctionDefinition : SYMBOL{
 private  string  m_returnType ;
 private  string  m_name ;
 public  GlobalFunctionDefinition (Parser yyp, string  returnType , string  name , ArgumentDeclarationList  adl , CompoundStatement  cs ):base(((LSLSyntax
)yyp)){ m_returnType = returnType ;
 m_name = name ;
 kids . Add ( adl );
 kids . Add ( cs );
}
 public  string  ReturnType { get { return  m_returnType ;
}
 set { m_returnType = value ;
}
}
 public  string  Name { get { return  m_name ;
}
}

public override string yyname { get { return "GlobalFunctionDefinition"; }}
public override int yynum { get { return 99; }}
public GlobalFunctionDefinition(Parser yyp):base(yyp){}}
//%+States+100
public class States : SYMBOL{
 public  States (Parser yyp, State  ds ):base(((LSLSyntax
)yyp)){ kids . Add ( ds );
}
 public  States (Parser yyp, States  s , State  us ):base(((LSLSyntax
)yyp)){ while (0< s . kids . Count ) kids . Add ( s . kids . Pop ());
 kids . Add ( us );
}

public override string yyname { get { return "States"; }}
public override int yynum { get { return 100; }}
public States(Parser yyp):base(yyp){}}
//%+State+101
public class State : SYMBOL{
 private  string  m_name ;
 public  State (Parser yyp, string  name , StateBody  sb ):base(((LSLSyntax
)yyp)){ m_name = name ;
 while (0< sb . kids . Count ) kids . Add ( sb . kids . Pop ());
}
 public  override  string  ToString (){ return "STATE<"+ m_name +">";
}
 public  string  Name { get { return  m_name ;
}
}

public override string yyname { get { return "State"; }}
public override int yynum { get { return 101; }}
public State(Parser yyp):base(yyp){}}
//%+StateBody+102
public class StateBody : SYMBOL{
 public  StateBody (Parser yyp, StateBody  sb , StateEvent  se ):base(((LSLSyntax
)yyp)){ while (0< sb . kids . Count ) kids . Add ( sb . kids . Pop ());
 kids . Add ( se );
}
 public  StateBody (Parser yyp, StateEvent  se ):base(((LSLSyntax
)yyp)){ kids . Add ( se );
}

public override string yyname { get { return "StateBody"; }}
public override int yynum { get { return 102; }}
public StateBody(Parser yyp):base(yyp){}}
//%+StateEvent+103
public class StateEvent : SYMBOL{
 private  string  m_name ;
 public  StateEvent (Parser yyp, string  name , CompoundStatement  cs ):base(((LSLSyntax
)yyp)){ m_name = name ;
 kids . Add ( cs );
}
 public  StateEvent (Parser yyp, string  name , ArgumentDeclarationList  adl , CompoundStatement  cs ):base(((LSLSyntax
)yyp)){ m_name = name ;
 if (0< adl . kids . Count ) kids . Add ( adl );
 kids . Add ( cs );
}
 public  override  string  ToString (){ return "EVENT<"+ m_name +">";
}
 public  string  Name { get { return  m_name ;
}
}

public override string yyname { get { return "StateEvent"; }}
public override int yynum { get { return 103; }}
public StateEvent(Parser yyp):base(yyp){}}
//%+VoidArgStateEvent+104
public class VoidArgStateEvent : StateEvent{
 public  VoidArgStateEvent (Parser yyp, string  name , CompoundStatement  cs ):base(((LSLSyntax
)yyp), name , cs ){}

public override string yyname { get { return "VoidArgStateEvent"; }}
public override int yynum { get { return 104; }}
public VoidArgStateEvent(Parser yyp):base(yyp){}}
//%+KeyArgStateEvent+105
public class KeyArgStateEvent : StateEvent{
 public  KeyArgStateEvent (Parser yyp, string  name , KeyArgumentDeclarationList  adl , CompoundStatement  cs ):base(((LSLSyntax
)yyp), name , adl , cs ){}

public override string yyname { get { return "KeyArgStateEvent"; }}
public override int yynum { get { return 105; }}
public KeyArgStateEvent(Parser yyp):base(yyp){}}
//%+IntArgStateEvent+106
public class IntArgStateEvent : StateEvent{
 public  IntArgStateEvent (Parser yyp, string  name , IntArgumentDeclarationList  adl , CompoundStatement  cs ):base(((LSLSyntax
)yyp), name , adl , cs ){}

public override string yyname { get { return "IntArgStateEvent"; }}
public override int yynum { get { return 106; }}
public IntArgStateEvent(Parser yyp):base(yyp){}}
//%+VectorArgStateEvent+107
public class VectorArgStateEvent : StateEvent{
 public  VectorArgStateEvent (Parser yyp, string  name , VectorArgumentDeclarationList  adl , CompoundStatement  cs ):base(((LSLSyntax
)yyp), name , adl , cs ){}

public override string yyname { get { return "VectorArgStateEvent"; }}
public override int yynum { get { return 107; }}
public VectorArgStateEvent(Parser yyp):base(yyp){}}
//%+IntRotRotArgStateEvent+108
public class IntRotRotArgStateEvent : StateEvent{
 public  IntRotRotArgStateEvent (Parser yyp, string  name , IntRotRotArgumentDeclarationList  adl , CompoundStatement  cs ):base(((LSLSyntax
)yyp), name , adl , cs ){}

public override string yyname { get { return "IntRotRotArgStateEvent"; }}
public override int yynum { get { return 108; }}
public IntRotRotArgStateEvent(Parser yyp):base(yyp){}}
//%+IntVecVecArgStateEvent+109
public class IntVecVecArgStateEvent : StateEvent{
 public  IntVecVecArgStateEvent (Parser yyp, string  name , IntVecVecArgumentDeclarationList  adl , CompoundStatement  cs ):base(((LSLSyntax
)yyp), name , adl , cs ){}

public override string yyname { get { return "IntVecVecArgStateEvent"; }}
public override int yynum { get { return 109; }}
public IntVecVecArgStateEvent(Parser yyp):base(yyp){}}
//%+KeyIntIntArgStateEvent+110
public class KeyIntIntArgStateEvent : StateEvent{
 public  KeyIntIntArgStateEvent (Parser yyp, string  name , KeyIntIntArgumentDeclarationList  adl , CompoundStatement  cs ):base(((LSLSyntax
)yyp), name , adl , cs ){}

public override string yyname { get { return "KeyIntIntArgStateEvent"; }}
public override int yynum { get { return 110; }}
public KeyIntIntArgStateEvent(Parser yyp):base(yyp){}}
//%+ArgumentDeclarationList+111
public class ArgumentDeclarationList : SYMBOL{
 public  ArgumentDeclarationList (Parser yyp, Declaration  d ):base(((LSLSyntax
)yyp)){ kids . Add ( d );
}
 public  ArgumentDeclarationList (Parser yyp, Declaration  d , Declaration  d2 ):base(((LSLSyntax
)yyp)){ kids . Add ( d );
 kids . Add ( d2 );
}
 public  ArgumentDeclarationList (Parser yyp, Declaration  d , Declaration  d2 , Declaration  d3 ):base(((LSLSyntax
)yyp)){ kids . Add ( d );
 kids . Add ( d2 );
 kids . Add ( d3 );
}
 public  ArgumentDeclarationList (Parser yyp, ArgumentDeclarationList  adl , Declaration  d ):base(((LSLSyntax
)yyp)){ while (0< adl . kids . Count ) kids . Add ( adl . kids . Pop ());
 kids . Add ( d );
}

public override string yyname { get { return "ArgumentDeclarationList"; }}
public override int yynum { get { return 111; }}
public ArgumentDeclarationList(Parser yyp):base(yyp){}}
//%+KeyArgumentDeclarationList+112
public class KeyArgumentDeclarationList : ArgumentDeclarationList{
 public  KeyArgumentDeclarationList (Parser yyp, KeyDeclaration  d ):base(((LSLSyntax
)yyp), d ){}

public override string yyname { get { return "KeyArgumentDeclarationList"; }}
public override int yynum { get { return 112; }}
public KeyArgumentDeclarationList(Parser yyp):base(yyp){}}
//%+IntArgumentDeclarationList+113
public class IntArgumentDeclarationList : ArgumentDeclarationList{
 public  IntArgumentDeclarationList (Parser yyp, IntDeclaration  d ):base(((LSLSyntax
)yyp), d ){}

public override string yyname { get { return "IntArgumentDeclarationList"; }}
public override int yynum { get { return 113; }}
public IntArgumentDeclarationList(Parser yyp):base(yyp){}}
//%+VectorArgumentDeclarationList+114
public class VectorArgumentDeclarationList : ArgumentDeclarationList{
 public  VectorArgumentDeclarationList (Parser yyp, VecDeclaration  d ):base(((LSLSyntax
)yyp), d ){}

public override string yyname { get { return "VectorArgumentDeclarationList"; }}
public override int yynum { get { return 114; }}
public VectorArgumentDeclarationList(Parser yyp):base(yyp){}}
//%+IntRotRotArgumentDeclarationList+115
public class IntRotRotArgumentDeclarationList : ArgumentDeclarationList{
 public  IntRotRotArgumentDeclarationList (Parser yyp, Declaration  d1 , Declaration  d2 , Declaration  d3 ):base(((LSLSyntax
)yyp), d1 , d2 , d3 ){}

public override string yyname { get { return "IntRotRotArgumentDeclarationList"; }}
public override int yynum { get { return 115; }}
public IntRotRotArgumentDeclarationList(Parser yyp):base(yyp){}}
//%+IntVecVecArgumentDeclarationList+116
public class IntVecVecArgumentDeclarationList : ArgumentDeclarationList{
 public  IntVecVecArgumentDeclarationList (Parser yyp, Declaration  d1 , Declaration  d2 , Declaration  d3 ):base(((LSLSyntax
)yyp), d1 , d2 , d3 ){}

public override string yyname { get { return "IntVecVecArgumentDeclarationList"; }}
public override int yynum { get { return 116; }}
public IntVecVecArgumentDeclarationList(Parser yyp):base(yyp){}}
//%+KeyIntIntArgumentDeclarationList+117
public class KeyIntIntArgumentDeclarationList : ArgumentDeclarationList{
 public  KeyIntIntArgumentDeclarationList (Parser yyp, Declaration  d1 , Declaration  d2 , Declaration  d3 ):base(((LSLSyntax
)yyp), d1 , d2 , d3 ){}

public override string yyname { get { return "KeyIntIntArgumentDeclarationList"; }}
public override int yynum { get { return 117; }}
public KeyIntIntArgumentDeclarationList(Parser yyp):base(yyp){}}
//%+Declaration+118
public class Declaration : SYMBOL{
 private  string  m_datatype ;
 private  string  m_id ;
 public  Declaration (Parser yyp, string  type , string  id ):base(((LSLSyntax
)yyp)){ m_datatype = type ;
 m_id = id ;
}
 public  override  string  ToString (){ return "Declaration<"+ m_datatype +":"+ m_id +">";
}
 public  string  Datatype { get { return  m_datatype ;
}
 set { m_datatype = value ;
}
}
 public  string  Id { get { return  m_id ;
}
}

public override string yyname { get { return "Declaration"; }}
public override int yynum { get { return 118; }}
public Declaration(Parser yyp):base(yyp){}}
//%+KeyDeclaration+119
public class KeyDeclaration : Declaration{
 public  KeyDeclaration (Parser yyp, string  type , string  id ):base(((LSLSyntax
)yyp), type , id ){}

public override string yyname { get { return "KeyDeclaration"; }}
public override int yynum { get { return 119; }}
public KeyDeclaration(Parser yyp):base(yyp){}}
//%+IntDeclaration+120
public class IntDeclaration : Declaration{
 public  IntDeclaration (Parser yyp, string  type , string  id ):base(((LSLSyntax
)yyp), type , id ){}

public override string yyname { get { return "IntDeclaration"; }}
public override int yynum { get { return 120; }}
public IntDeclaration(Parser yyp):base(yyp){}}
//%+VecDeclaration+121
public class VecDeclaration : Declaration{
 public  VecDeclaration (Parser yyp, string  type , string  id ):base(((LSLSyntax
)yyp), type , id ){}

public override string yyname { get { return "VecDeclaration"; }}
public override int yynum { get { return 121; }}
public VecDeclaration(Parser yyp):base(yyp){}}
//%+RotDeclaration+122
public class RotDeclaration : Declaration{
 public  RotDeclaration (Parser yyp, string  type , string  id ):base(((LSLSyntax
)yyp), type , id ){}

public override string yyname { get { return "RotDeclaration"; }}
public override int yynum { get { return 122; }}
public RotDeclaration(Parser yyp):base(yyp){}}
//%+Typename+123
public class Typename : SYMBOL{
 public  string  yytext ;
 public  Typename (Parser yyp, string  text ):base(((LSLSyntax
)yyp)){ yytext = text ;
}

public override string yyname { get { return "Typename"; }}
public override int yynum { get { return 123; }}
public Typename(Parser yyp):base(yyp){}}
//%+Event+124
public class Event : SYMBOL{
 public  string  yytext ;
 public  Event (Parser yyp, string  text ):base(((LSLSyntax
)yyp)){ yytext = text ;
}

public override string yyname { get { return "Event"; }}
public override int yynum { get { return 124; }}
public Event(Parser yyp):base(yyp){}}
//%+VoidArgEvent+125
public class VoidArgEvent : Event{
 public  VoidArgEvent (Parser yyp, string  text ):base(((LSLSyntax
)yyp), text ){}

public override string yyname { get { return "VoidArgEvent"; }}
public override int yynum { get { return 125; }}
public VoidArgEvent(Parser yyp):base(yyp){}}
//%+KeyArgEvent+126
public class KeyArgEvent : Event{
 public  KeyArgEvent (Parser yyp, string  text ):base(((LSLSyntax
)yyp), text ){}

public override string yyname { get { return "KeyArgEvent"; }}
public override int yynum { get { return 126; }}
public KeyArgEvent(Parser yyp):base(yyp){}}
//%+IntArgEvent+127
public class IntArgEvent : Event{
 public  IntArgEvent (Parser yyp, string  text ):base(((LSLSyntax
)yyp), text ){}

public override string yyname { get { return "IntArgEvent"; }}
public override int yynum { get { return 127; }}
public IntArgEvent(Parser yyp):base(yyp){}}
//%+VectorArgEvent+128
public class VectorArgEvent : Event{
 public  VectorArgEvent (Parser yyp, string  text ):base(((LSLSyntax
)yyp), text ){}

public override string yyname { get { return "VectorArgEvent"; }}
public override int yynum { get { return 128; }}
public VectorArgEvent(Parser yyp):base(yyp){}}
//%+IntRotRotArgEvent+129
public class IntRotRotArgEvent : Event{
 public  IntRotRotArgEvent (Parser yyp, string  text ):base(((LSLSyntax
)yyp), text ){}

public override string yyname { get { return "IntRotRotArgEvent"; }}
public override int yynum { get { return 129; }}
public IntRotRotArgEvent(Parser yyp):base(yyp){}}
//%+IntVecVecArgEvent+130
public class IntVecVecArgEvent : Event{
 public  IntVecVecArgEvent (Parser yyp, string  text ):base(((LSLSyntax
)yyp), text ){}

public override string yyname { get { return "IntVecVecArgEvent"; }}
public override int yynum { get { return 130; }}
public IntVecVecArgEvent(Parser yyp):base(yyp){}}
//%+KeyIntIntArgEvent+131
public class KeyIntIntArgEvent : Event{
 public  KeyIntIntArgEvent (Parser yyp, string  text ):base(((LSLSyntax
)yyp), text ){}

public override string yyname { get { return "KeyIntIntArgEvent"; }}
public override int yynum { get { return 131; }}
public KeyIntIntArgEvent(Parser yyp):base(yyp){}}
//%+CompoundStatement+132
public class CompoundStatement : SYMBOL{
 public  CompoundStatement (Parser yyp):base(((LSLSyntax
)yyp)){}
 public  CompoundStatement (Parser yyp, StatementList  sl ):base(((LSLSyntax
)yyp)){ while (0< sl . kids . Count ) kids . Add ( sl . kids . Pop ());
}

public override string yyname { get { return "CompoundStatement"; }}
public override int yynum { get { return 132; }}
}
//%+StatementList+133
public class StatementList : SYMBOL{
 private  void  AddStatement ( Statement  s ){ if ( s . kids . Top  is  IfStatement || s . kids . Top  is  WhileStatement || s . kids . Top  is  DoWhileStatement || s . kids . Top  is  ForLoop ) kids . Add ( s . kids . Pop ());
 else  kids . Add ( s );
}
 public  StatementList (Parser yyp, Statement  s ):base(((LSLSyntax
)yyp)){ AddStatement ( s );
}
 public  StatementList (Parser yyp, StatementList  sl , Statement  s ):base(((LSLSyntax
)yyp)){ while (0< sl . kids . Count ) kids . Add ( sl . kids . Pop ());
 AddStatement ( s );
}

public override string yyname { get { return "StatementList"; }}
public override int yynum { get { return 133; }}
public StatementList(Parser yyp):base(yyp){}}
//%+Statement+134
public class Statement : SYMBOL{
 public  Statement (Parser yyp, Declaration  d ):base(((LSLSyntax
)yyp)){ kids . Add ( d );
}
 public  Statement (Parser yyp, CompoundStatement  cs ):base(((LSLSyntax
)yyp)){ kids . Add ( cs );
}
 public  Statement (Parser yyp, FunctionCall  fc ):base(((LSLSyntax
)yyp)){ kids . Add ( fc );
}
 public  Statement (Parser yyp, Assignment  a ):base(((LSLSyntax
)yyp)){ kids . Add ( a );
}
 public  Statement (Parser yyp, Expression  e ):base(((LSLSyntax
)yyp)){ kids . Add ( e );
}
 public  Statement (Parser yyp, ReturnStatement  rs ):base(((LSLSyntax
)yyp)){ kids . Add ( rs );
}
 public  Statement (Parser yyp, StateChange  sc ):base(((LSLSyntax
)yyp)){ kids . Add ( sc );
}
 public  Statement (Parser yyp, IfStatement  ifs ):base(((LSLSyntax
)yyp)){ kids . Add ( ifs );
}
 public  Statement (Parser yyp, WhileStatement  ifs ):base(((LSLSyntax
)yyp)){ kids . Add ( ifs );
}
 public  Statement (Parser yyp, DoWhileStatement  ifs ):base(((LSLSyntax
)yyp)){ kids . Add ( ifs );
}
 public  Statement (Parser yyp, ForLoop  fl ):base(((LSLSyntax
)yyp)){ kids . Add ( fl );
}
 public  Statement (Parser yyp, JumpLabel  jl ):base(((LSLSyntax
)yyp)){ kids . Add ( jl );
}
 public  Statement (Parser yyp, JumpStatement  js ):base(((LSLSyntax
)yyp)){ kids . Add ( js );
}
 public  Statement (Parser yyp, EmptyStatement  es ):base(((LSLSyntax
)yyp)){ kids . Add ( es );
}

public override string yyname { get { return "Statement"; }}
public override int yynum { get { return 134; }}
public Statement(Parser yyp):base(yyp){}}
//%+EmptyStatement+135
public class EmptyStatement : SYMBOL{
 public  EmptyStatement (Parser yyp):base(((LSLSyntax
)yyp)){}
 public  override  string  ToString (){ return  base . ToString ();
}

public override string yyname { get { return "EmptyStatement"; }}
public override int yynum { get { return 135; }}
}
//%+Assignment+136
public class Assignment : SYMBOL{
 protected  string  m_assignmentType ;
 public  Assignment (Parser yyp, SYMBOL  lhs , SYMBOL  rhs , string  assignmentType ):base(((LSLSyntax
)yyp)){ m_assignmentType = assignmentType ;
 kids . Add ( lhs );
 if ( rhs  is  ConstantExpression ) while (0< rhs . kids . Count ) kids . Add ( rhs . kids . Pop ());
 else  kids . Add ( rhs );
}
 public  Assignment (Parser yyp, SimpleAssignment  sa ):base(((LSLSyntax
)yyp)){ m_assignmentType = sa . AssignmentType ;
 while (0< sa . kids . Count ) kids . Add ( sa . kids . Pop ());
}
 public  string  AssignmentType { get { return  m_assignmentType ;
}
}
 public  override  string  ToString (){ return  base . ToString ()+"<"+ m_assignmentType +">";
}

public override string yyname { get { return "Assignment"; }}
public override int yynum { get { return 136; }}
public Assignment(Parser yyp):base(yyp){}}
//%+SimpleAssignment+137
public class SimpleAssignment : Assignment{
 public  SimpleAssignment (Parser yyp, SYMBOL  lhs , SYMBOL  rhs , string  assignmentType ):base(((LSLSyntax
)yyp)){ m_assignmentType = assignmentType ;
 kids . Add ( lhs );
 if ( rhs  is  ConstantExpression ) while (0< rhs . kids . Count ) kids . Add ( rhs . kids . Pop ());
 else  kids . Add ( rhs );
}

public override string yyname { get { return "SimpleAssignment"; }}
public override int yynum { get { return 137; }}
public SimpleAssignment(Parser yyp):base(yyp){}}
//%+ReturnStatement+138
public class ReturnStatement : SYMBOL{
 public  ReturnStatement (Parser yyp):base(((LSLSyntax
)yyp)){}
 public  ReturnStatement (Parser yyp, Expression  e ):base(((LSLSyntax
)yyp)){ if ( e  is  ConstantExpression ) while (0< e . kids . Count ) kids . Add ( e . kids . Pop ());
 else  kids . Add ( e );
}

public override string yyname { get { return "ReturnStatement"; }}
public override int yynum { get { return 138; }}
}
//%+JumpLabel+139
public class JumpLabel : SYMBOL{
 private  string  m_labelName ;
 public  JumpLabel (Parser yyp, string  labelName ):base(((LSLSyntax
)yyp)){ m_labelName = labelName ;
}
 public  string  LabelName { get { return  m_labelName ;
}
}
 public  override  string  ToString (){ return  base . ToString ()+"<"+ m_labelName +">";
}

public override string yyname { get { return "JumpLabel"; }}
public override int yynum { get { return 139; }}
public JumpLabel(Parser yyp):base(yyp){}}
//%+JumpStatement+140
public class JumpStatement : SYMBOL{
 private  string  m_targetName ;
 public  JumpStatement (Parser yyp, string  targetName ):base(((LSLSyntax
)yyp)){ m_targetName = targetName ;
}
 public  string  TargetName { get { return  m_targetName ;
}
}
 public  override  string  ToString (){ return  base . ToString ()+"<"+ m_targetName +">";
}

public override string yyname { get { return "JumpStatement"; }}
public override int yynum { get { return 140; }}
public JumpStatement(Parser yyp):base(yyp){}}
//%+StateChange+141
public class StateChange : SYMBOL{
 private  string  m_newState ;
 public  StateChange (Parser yyp, string  newState ):base(((LSLSyntax
)yyp)){ m_newState = newState ;
}
 public  string  NewState { get { return  m_newState ;
}
}

public override string yyname { get { return "StateChange"; }}
public override int yynum { get { return 141; }}
public StateChange(Parser yyp):base(yyp){}}
//%+IfStatement+142
public class IfStatement : SYMBOL{
 private  void  AddStatement ( Statement  s ){ if (0< s . kids . Count && s . kids . Top  is  CompoundStatement ) kids . Add ( s . kids . Pop ());
 else  kids . Add ( s );
}
 public  IfStatement (Parser yyp, SYMBOL  s , Statement  ifs ):base(((LSLSyntax
)yyp)){ kids . Add ( s );
 AddStatement ( ifs );
}
 public  IfStatement (Parser yyp, SYMBOL  s , Statement  ifs , Statement  es ):base(((LSLSyntax
)yyp)){ kids . Add ( s );
 AddStatement ( ifs );
 if (0< es . kids . Count && es . kids . Top  is  IfStatement ) kids . Add ( es . kids . Pop ());
 else  AddStatement ( es );
}

public override string yyname { get { return "IfStatement"; }}
public override int yynum { get { return 142; }}
public IfStatement(Parser yyp):base(yyp){}}
//%+WhileStatement+143
public class WhileStatement : SYMBOL{
 public  WhileStatement (Parser yyp, SYMBOL  s , Statement  st ):base(((LSLSyntax
)yyp)){ kids . Add ( s );
 if (0< st . kids . Count && st . kids . Top  is  CompoundStatement ) kids . Add ( st . kids . Pop ());
 else  kids . Add ( st );
}

public override string yyname { get { return "WhileStatement"; }}
public override int yynum { get { return 143; }}
public WhileStatement(Parser yyp):base(yyp){}}
//%+DoWhileStatement+144
public class DoWhileStatement : SYMBOL{
 public  DoWhileStatement (Parser yyp, SYMBOL  s , Statement  st ):base(((LSLSyntax
)yyp)){ if (0< st . kids . Count && st . kids . Top  is  CompoundStatement ) kids . Add ( st . kids . Pop ());
 else  kids . Add ( st );
 kids . Add ( s );
}

public override string yyname { get { return "DoWhileStatement"; }}
public override int yynum { get { return 144; }}
public DoWhileStatement(Parser yyp):base(yyp){}}
//%+ForLoop+145
public class ForLoop : SYMBOL{
 public  ForLoop (Parser yyp, ForLoopStatement  flsa , Expression  e , ForLoopStatement  flsb , Statement  s ):base(((LSLSyntax
)yyp)){ kids . Add ( flsa );
 kids . Add ( e );
 kids . Add ( flsb );
 if (0< s . kids . Count && s . kids . Top  is  CompoundStatement ) kids . Add ( s . kids . Pop ());
 else  kids . Add ( s );
}

public override string yyname { get { return "ForLoop"; }}
public override int yynum { get { return 145; }}
public ForLoop(Parser yyp):base(yyp){}}
//%+ForLoopStatement+146
public class ForLoopStatement : SYMBOL{
 public  ForLoopStatement (Parser yyp, Expression  e ):base(((LSLSyntax
)yyp)){ kids . Add ( e );
}
 public  ForLoopStatement (Parser yyp, SimpleAssignment  sa ):base(((LSLSyntax
)yyp)){ kids . Add ( sa );
}
 public  ForLoopStatement (Parser yyp, ForLoopStatement  fls , Expression  e ):base(((LSLSyntax
)yyp)){ while (0< fls . kids . Count ) kids . Add ( fls . kids . Pop ());
 kids . Add ( e );
}
 public  ForLoopStatement (Parser yyp, ForLoopStatement  fls , SimpleAssignment  sa ):base(((LSLSyntax
)yyp)){ while (0< fls . kids . Count ) kids . Add ( fls . kids . Pop ());
 kids . Add ( sa );
}

public override string yyname { get { return "ForLoopStatement"; }}
public override int yynum { get { return 146; }}
public ForLoopStatement(Parser yyp):base(yyp){}}
//%+FunctionCall+147
public class FunctionCall : SYMBOL{
 private  string  m_id ;
 public  FunctionCall (Parser yyp, string  id , ArgumentList  al ):base(((LSLSyntax
)yyp)){ m_id = id ;
 kids . Add ( al );
}
 public  override  string  ToString (){ return  base . ToString ()+"<"+ m_id +">";
}
 public  string  Id { get { return  m_id ;
}
}

public override string yyname { get { return "FunctionCall"; }}
public override int yynum { get { return 147; }}
public FunctionCall(Parser yyp):base(yyp){}}
//%+ArgumentList+148
public class ArgumentList : SYMBOL{
 public  ArgumentList (Parser yyp, Argument  a ):base(((LSLSyntax
)yyp)){ AddArgument ( a );
}
 public  ArgumentList (Parser yyp, ArgumentList  al , Argument  a ):base(((LSLSyntax
)yyp)){ while (0< al . kids . Count ) kids . Add ( al . kids . Pop ());
 AddArgument ( a );
}
 private  void  AddArgument ( Argument  a ){ if ( a  is  ExpressionArgument ) while (0< a . kids . Count ) kids . Add ( a . kids . Pop ());
 else  kids . Add ( a );
}

public override string yyname { get { return "ArgumentList"; }}
public override int yynum { get { return 148; }}
public ArgumentList(Parser yyp):base(yyp){}}
//%+Argument+149
public class Argument : SYMBOL{
public override string yyname { get { return "Argument"; }}
public override int yynum { get { return 149; }}
public Argument(Parser yyp):base(yyp){}}
//%+ExpressionArgument+150
public class ExpressionArgument : Argument{
 public  ExpressionArgument (Parser yyp, Expression  e ):base(((LSLSyntax
)yyp)){ if ( e  is  ConstantExpression ) while (0< e . kids . Count ) kids . Add ( e . kids . Pop ());
 else  kids . Add ( e );
}

public override string yyname { get { return "ExpressionArgument"; }}
public override int yynum { get { return 150; }}
public ExpressionArgument(Parser yyp):base(yyp){}}
//%+Constant+151
public class Constant : SYMBOL{
 private  string  m_type ;
 private  string  m_val ;
 public  Constant (Parser yyp, string  type , string  val ):base(((LSLSyntax
)yyp)){ m_type = type ;
 m_val = val ;
}
 public  override  string  ToString (){ return  base . ToString ()+"<"+ m_type +":"+ m_val +">";
}
 public  string  Value { get { return  m_val ;
}
 set { m_val = value ;
}
}
 public  string  Type { get { return  m_type ;
}
 set { m_type = value ;
}
}

public override string yyname { get { return "Constant"; }}
public override int yynum { get { return 151; }}
public Constant(Parser yyp):base(yyp){}}
//%+VectorConstant+152
public class VectorConstant : Constant{
 public  VectorConstant (Parser yyp, Expression  valX , Expression  valY , Expression  valZ ):base(((LSLSyntax
)yyp),"vector", null ){ kids . Add ( valX );
 kids . Add ( valY );
 kids . Add ( valZ );
}

public override string yyname { get { return "VectorConstant"; }}
public override int yynum { get { return 152; }}
public VectorConstant(Parser yyp):base(yyp){}}
//%+RotationConstant+153
public class RotationConstant : Constant{
 public  RotationConstant (Parser yyp, Expression  valX , Expression  valY , Expression  valZ , Expression  valS ):base(((LSLSyntax
)yyp),"rotation", null ){ kids . Add ( valX );
 kids . Add ( valY );
 kids . Add ( valZ );
 kids . Add ( valS );
}

public override string yyname { get { return "RotationConstant"; }}
public override int yynum { get { return 153; }}
public RotationConstant(Parser yyp):base(yyp){}}
//%+ListConstant+154
public class ListConstant : Constant{
 public  ListConstant (Parser yyp, ArgumentList  al ):base(((LSLSyntax
)yyp),"list", null ){ kids . Add ( al );
}

public override string yyname { get { return "ListConstant"; }}
public override int yynum { get { return 154; }}
public ListConstant(Parser yyp):base(yyp){}}
//%+Expression+155
public class Expression : SYMBOL{
 protected  void  AddExpression ( Expression  e ){ if ( e  is  ConstantExpression ) while (0< e . kids . Count ) kids . Add ( e . kids . Pop ());
 else  kids . Add ( e );
}

public override string yyname { get { return "Expression"; }}
public override int yynum { get { return 155; }}
public Expression(Parser yyp):base(yyp){}}
//%+ConstantExpression+156
public class ConstantExpression : Expression{
 public  ConstantExpression (Parser yyp, Constant  c ):base(((LSLSyntax
)yyp)){ kids . Add ( c );
}

public override string yyname { get { return "ConstantExpression"; }}
public override int yynum { get { return 156; }}
public ConstantExpression(Parser yyp):base(yyp){}}
//%+IdentExpression+157
public class IdentExpression : Expression{
 protected  string  m_name ;
 public  IdentExpression (Parser yyp, string  name ):base(((LSLSyntax
)yyp)){ m_name = name ;
}
 public  override  string  ToString (){ return  base . ToString ()+"<"+ m_name +">";
}
 public  string  Name { get { return  m_name ;
}
}

public override string yyname { get { return "IdentExpression"; }}
public override int yynum { get { return 157; }}
public IdentExpression(Parser yyp):base(yyp){}}
//%+IdentDotExpression+158
public class IdentDotExpression : IdentExpression{
 private  string  m_member ;
 public  IdentDotExpression (Parser yyp, string  name , string  member ):base(((LSLSyntax
)yyp), name ){ m_member = member ;
}
 public  override  string  ToString (){ string  baseToString = base . ToString ();
 return  baseToString . Substring (0, baseToString . Length -1)+"."+ m_member +">";
}
 public  string  Member { get { return  m_member ;
}
}

public override string yyname { get { return "IdentDotExpression"; }}
public override int yynum { get { return 158; }}
public IdentDotExpression(Parser yyp):base(yyp){}}
//%+FunctionCallExpression+159
public class FunctionCallExpression : Expression{
 public  FunctionCallExpression (Parser yyp, FunctionCall  fc ):base(((LSLSyntax
)yyp)){ kids . Add ( fc );
}

public override string yyname { get { return "FunctionCallExpression"; }}
public override int yynum { get { return 159; }}
public FunctionCallExpression(Parser yyp):base(yyp){}}
//%+BinaryExpression+160
public class BinaryExpression : Expression{
 private  string  m_expressionSymbol ;
 public  BinaryExpression (Parser yyp, Expression  lhs , Expression  rhs , string  expressionSymbol ):base(((LSLSyntax
)yyp)){ m_expressionSymbol = expressionSymbol ;
 AddExpression ( lhs );
 AddExpression ( rhs );
}
 public  string  ExpressionSymbol { get { return  m_expressionSymbol ;
}
}
 public  override  string  ToString (){ return  base . ToString ()+"<"+ m_expressionSymbol +">";
}

public override string yyname { get { return "BinaryExpression"; }}
public override int yynum { get { return 160; }}
public BinaryExpression(Parser yyp):base(yyp){}}
//%+UnaryExpression+161
public class UnaryExpression : Expression{
 private  string  m_unarySymbol ;
 public  UnaryExpression (Parser yyp, string  unarySymbol , Expression  e ):base(((LSLSyntax
)yyp)){ m_unarySymbol = unarySymbol ;
 AddExpression ( e );
}
 public  string  UnarySymbol { get { return  m_unarySymbol ;
}
}
 public  override  string  ToString (){ return  base . ToString ()+"<"+ m_unarySymbol +">";
}

public override string yyname { get { return "UnaryExpression"; }}
public override int yynum { get { return 161; }}
public UnaryExpression(Parser yyp):base(yyp){}}
//%+TypecastExpression+162
public class TypecastExpression : Expression{
 private  string  m_typecastType ;
 public  TypecastExpression (Parser yyp, string  typecastType , SYMBOL  rhs ):base(((LSLSyntax
)yyp)){ m_typecastType = typecastType ;
 kids . Add ( rhs );
}
 public  string  TypecastType { get { return  m_typecastType ;
}
 set { m_typecastType = value ;
}
}

public override string yyname { get { return "TypecastExpression"; }}
public override int yynum { get { return 162; }}
public TypecastExpression(Parser yyp):base(yyp){}}
//%+ParenthesisExpression+163
public class ParenthesisExpression : Expression{
 public  ParenthesisExpression (Parser yyp, SYMBOL  s ):base(((LSLSyntax
)yyp)){ kids . Add ( s );
}

public override string yyname { get { return "ParenthesisExpression"; }}
public override int yynum { get { return 163; }}
public ParenthesisExpression(Parser yyp):base(yyp){}}
//%+IncrementDecrementExpression+164
public class IncrementDecrementExpression : Expression{
 private  string  m_name ;
 private  string  m_operation ;
 private  bool  m_postOperation ;
 public  IncrementDecrementExpression (Parser yyp, string  name , string  operation , bool  postOperation ):base(((LSLSyntax
)yyp)){ m_name = name ;
 m_operation = operation ;
 m_postOperation = postOperation ;
}
 public  IncrementDecrementExpression (Parser yyp, IdentDotExpression  ide , string  operation , bool  postOperation ):base(((LSLSyntax
)yyp)){ m_operation = operation ;
 m_postOperation = postOperation ;
 kids . Add ( ide );
}
 public  override  string  ToString (){ return  base . ToString ()+"<"+( m_postOperation ? m_name + m_operation : m_operation + m_name )+">";
}
 public  string  Name { get { return  m_name ;
}
}
 public  string  Operation { get { return  m_operation ;
}
}
 public  bool  PostOperation { get { return  m_postOperation ;
}
}

public override string yyname { get { return "IncrementDecrementExpression"; }}
public override int yynum { get { return 164; }}
public IncrementDecrementExpression(Parser yyp):base(yyp){}}

public class LSLProgramRoot_1 : LSLProgramRoot {
  public LSLProgramRoot_1(Parser yyq):base(yyq,
	((GlobalDefinitions)(yyq.StackAt(1).m_value))
	, 
	((States)(yyq.StackAt(0).m_value))
	){}}

public class LSLProgramRoot_2 : LSLProgramRoot {
  public LSLProgramRoot_2(Parser yyq):base(yyq,
	((States)(yyq.StackAt(0).m_value))
	){}}

public class GlobalDefinitions_1 : GlobalDefinitions {
  public GlobalDefinitions_1(Parser yyq):base(yyq,
	((GlobalVariableDeclaration)(yyq.StackAt(0).m_value))
	){}}

public class GlobalDefinitions_2 : GlobalDefinitions {
  public GlobalDefinitions_2(Parser yyq):base(yyq,
	((GlobalDefinitions)(yyq.StackAt(1).m_value))
	, 
	((GlobalVariableDeclaration)(yyq.StackAt(0).m_value))
	){}}

public class GlobalDefinitions_3 : GlobalDefinitions {
  public GlobalDefinitions_3(Parser yyq):base(yyq,
	((GlobalFunctionDefinition)(yyq.StackAt(0).m_value))
	){}}

public class GlobalDefinitions_4 : GlobalDefinitions {
  public GlobalDefinitions_4(Parser yyq):base(yyq,
	((GlobalDefinitions)(yyq.StackAt(1).m_value))
	, 
	((GlobalFunctionDefinition)(yyq.StackAt(0).m_value))
	){}}

public class GlobalVariableDeclaration_1 : GlobalVariableDeclaration {
  public GlobalVariableDeclaration_1(Parser yyq):base(yyq,
	((Declaration)(yyq.StackAt(1).m_value))
	){}}

public class GlobalVariableDeclaration_2 : GlobalVariableDeclaration {
  public GlobalVariableDeclaration_2(Parser yyq):base(yyq,new Assignment(((LSLSyntax
)yyq), 
	((Declaration)(yyq.StackAt(3).m_value))
	, 
	((Expression)(yyq.StackAt(1).m_value))
	, 
	((EQUALS)(yyq.StackAt(2).m_value))
	.yytext)){}}

public class GlobalFunctionDefinition_1 : GlobalFunctionDefinition {
  public GlobalFunctionDefinition_1(Parser yyq):base(yyq,"void", 
	((IDENT)(yyq.StackAt(4).m_value))
	.yytext, 
	((ArgumentDeclarationList)(yyq.StackAt(2).m_value))
	, 
	((CompoundStatement)(yyq.StackAt(0).m_value))
	){}}

public class GlobalFunctionDefinition_2 : GlobalFunctionDefinition {
  public GlobalFunctionDefinition_2(Parser yyq):base(yyq,
	((Typename)(yyq.StackAt(5).m_value))
	.yytext, 
	((IDENT)(yyq.StackAt(4).m_value))
	.yytext, 
	((ArgumentDeclarationList)(yyq.StackAt(2).m_value))
	, 
	((CompoundStatement)(yyq.StackAt(0).m_value))
	){}}

public class States_1 : States {
  public States_1(Parser yyq):base(yyq,
	((State)(yyq.StackAt(0).m_value))
	){}}

public class States_2 : States {
  public States_2(Parser yyq):base(yyq,
	((States)(yyq.StackAt(1).m_value))
	, 
	((State)(yyq.StackAt(0).m_value))
	){}}

public class State_1 : State {
  public State_1(Parser yyq):base(yyq,
	((DEFAULT_STATE)(yyq.StackAt(3).m_value))
	.yytext, 
	((StateBody)(yyq.StackAt(1).m_value))
	){}}

public class State_2 : State {
  public State_2(Parser yyq):base(yyq,
	((IDENT)(yyq.StackAt(3).m_value))
	.yytext, 
	((StateBody)(yyq.StackAt(1).m_value))
	){}}

public class StateBody_1 : StateBody {
  public StateBody_1(Parser yyq):base(yyq,
	((StateEvent)(yyq.StackAt(0).m_value))
	){}}

public class StateBody_2 : StateBody {
  public StateBody_2(Parser yyq):base(yyq,
	((StateBody)(yyq.StackAt(1).m_value))
	, 
	((StateEvent)(yyq.StackAt(0).m_value))
	){}}

public class StateBody_3 : StateBody {
  public StateBody_3(Parser yyq):base(yyq,
	((VoidArgStateEvent)(yyq.StackAt(0).m_value))
	){}}

public class StateBody_4 : StateBody {
  public StateBody_4(Parser yyq):base(yyq,
	((StateBody)(yyq.StackAt(1).m_value))
	, 
	((VoidArgStateEvent)(yyq.StackAt(0).m_value))
	){}}

public class StateBody_5 : StateBody {
  public StateBody_5(Parser yyq):base(yyq,
	((KeyArgStateEvent)(yyq.StackAt(0).m_value))
	){}}

public class StateBody_6 : StateBody {
  public StateBody_6(Parser yyq):base(yyq,
	((StateBody)(yyq.StackAt(1).m_value))
	, 
	((KeyArgStateEvent)(yyq.StackAt(0).m_value))
	){}}

public class StateBody_7 : StateBody {
  public StateBody_7(Parser yyq):base(yyq,
	((IntArgStateEvent)(yyq.StackAt(0).m_value))
	){}}

public class StateBody_8 : StateBody {
  public StateBody_8(Parser yyq):base(yyq,
	((StateBody)(yyq.StackAt(1).m_value))
	, 
	((IntArgStateEvent)(yyq.StackAt(0).m_value))
	){}}

public class StateBody_9 : StateBody {
  public StateBody_9(Parser yyq):base(yyq,
	((VectorArgStateEvent)(yyq.StackAt(0).m_value))
	){}}

public class StateBody_10 : StateBody {
  public StateBody_10(Parser yyq):base(yyq,
	((StateBody)(yyq.StackAt(1).m_value))
	, 
	((VectorArgStateEvent)(yyq.StackAt(0).m_value))
	){}}

public class StateBody_11 : StateBody {
  public StateBody_11(Parser yyq):base(yyq,
	((IntRotRotArgStateEvent)(yyq.StackAt(0).m_value))
	){}}

public class StateBody_12 : StateBody {
  public StateBody_12(Parser yyq):base(yyq,
	((StateBody)(yyq.StackAt(1).m_value))
	, 
	((IntRotRotArgStateEvent)(yyq.StackAt(0).m_value))
	){}}

public class StateBody_13 : StateBody {
  public StateBody_13(Parser yyq):base(yyq,
	((IntVecVecArgStateEvent)(yyq.StackAt(0).m_value))
	){}}

public class StateBody_14 : StateBody {
  public StateBody_14(Parser yyq):base(yyq,
	((StateBody)(yyq.StackAt(1).m_value))
	, 
	((IntVecVecArgStateEvent)(yyq.StackAt(0).m_value))
	){}}

public class StateBody_15 : StateBody {
  public StateBody_15(Parser yyq):base(yyq,
	((KeyIntIntArgStateEvent)(yyq.StackAt(0).m_value))
	){}}

public class StateBody_16 : StateBody {
  public StateBody_16(Parser yyq):base(yyq,
	((StateBody)(yyq.StackAt(1).m_value))
	, 
	((KeyIntIntArgStateEvent)(yyq.StackAt(0).m_value))
	){}}

public class StateEvent_1 : StateEvent {
  public StateEvent_1(Parser yyq):base(yyq,
	((Event)(yyq.StackAt(4).m_value))
	.yytext, 
	((ArgumentDeclarationList)(yyq.StackAt(2).m_value))
	, 
	((CompoundStatement)(yyq.StackAt(0).m_value))
	){}}

public class VoidArgStateEvent_1 : VoidArgStateEvent {
  public VoidArgStateEvent_1(Parser yyq):base(yyq,
	((VoidArgEvent)(yyq.StackAt(3).m_value))
	.yytext, 
	((CompoundStatement)(yyq.StackAt(0).m_value))
	){}}

public class KeyArgStateEvent_1 : KeyArgStateEvent {
  public KeyArgStateEvent_1(Parser yyq):base(yyq,
	((KeyArgEvent)(yyq.StackAt(4).m_value))
	.yytext, 
	((KeyArgumentDeclarationList)(yyq.StackAt(2).m_value))
	, 
	((CompoundStatement)(yyq.StackAt(0).m_value))
	){}}

public class IntArgStateEvent_1 : IntArgStateEvent {
  public IntArgStateEvent_1(Parser yyq):base(yyq,
	((IntArgEvent)(yyq.StackAt(4).m_value))
	.yytext, 
	((IntArgumentDeclarationList)(yyq.StackAt(2).m_value))
	, 
	((CompoundStatement)(yyq.StackAt(0).m_value))
	){}}

public class VectorArgStateEvent_1 : VectorArgStateEvent {
  public VectorArgStateEvent_1(Parser yyq):base(yyq,
	((VectorArgEvent)(yyq.StackAt(4).m_value))
	.yytext, 
	((VectorArgumentDeclarationList)(yyq.StackAt(2).m_value))
	, 
	((CompoundStatement)(yyq.StackAt(0).m_value))
	){}}

public class IntRotRotArgStateEvent_1 : IntRotRotArgStateEvent {
  public IntRotRotArgStateEvent_1(Parser yyq):base(yyq,
	((IntRotRotArgEvent)(yyq.StackAt(4).m_value))
	.yytext, 
	((IntRotRotArgumentDeclarationList)(yyq.StackAt(2).m_value))
	, 
	((CompoundStatement)(yyq.StackAt(0).m_value))
	){}}

public class IntVecVecArgStateEvent_1 : IntVecVecArgStateEvent {
  public IntVecVecArgStateEvent_1(Parser yyq):base(yyq,
	((IntVecVecArgEvent)(yyq.StackAt(4).m_value))
	.yytext, 
	((IntVecVecArgumentDeclarationList)(yyq.StackAt(2).m_value))
	, 
	((CompoundStatement)(yyq.StackAt(0).m_value))
	){}}

public class KeyIntIntArgStateEvent_1 : KeyIntIntArgStateEvent {
  public KeyIntIntArgStateEvent_1(Parser yyq):base(yyq,
	((KeyIntIntArgEvent)(yyq.StackAt(4).m_value))
	.yytext, 
	((KeyIntIntArgumentDeclarationList)(yyq.StackAt(2).m_value))
	, 
	((CompoundStatement)(yyq.StackAt(0).m_value))
	){}}

public class ArgumentDeclarationList_1 : ArgumentDeclarationList {
  public ArgumentDeclarationList_1(Parser yyq):base(yyq,
	((Declaration)(yyq.StackAt(0).m_value))
	){}}

public class ArgumentDeclarationList_2 : ArgumentDeclarationList {
  public ArgumentDeclarationList_2(Parser yyq):base(yyq,
	((ArgumentDeclarationList)(yyq.StackAt(2).m_value))
	, 
	((Declaration)(yyq.StackAt(0).m_value))
	){}}

public class KeyArgumentDeclarationList_1 : KeyArgumentDeclarationList {
  public KeyArgumentDeclarationList_1(Parser yyq):base(yyq,
	((KeyDeclaration)(yyq.StackAt(0).m_value))
	){}}

public class IntArgumentDeclarationList_1 : IntArgumentDeclarationList {
  public IntArgumentDeclarationList_1(Parser yyq):base(yyq,
	((IntDeclaration)(yyq.StackAt(0).m_value))
	){}}

public class VectorArgumentDeclarationList_1 : VectorArgumentDeclarationList {
  public VectorArgumentDeclarationList_1(Parser yyq):base(yyq,
	((VecDeclaration)(yyq.StackAt(0).m_value))
	){}}

public class IntRotRotArgumentDeclarationList_1 : IntRotRotArgumentDeclarationList {
  public IntRotRotArgumentDeclarationList_1(Parser yyq):base(yyq,
	((IntDeclaration)(yyq.StackAt(4).m_value))
	, 
	((RotDeclaration)(yyq.StackAt(2).m_value))
	, 
	((RotDeclaration)(yyq.StackAt(0).m_value))
	){}}

public class IntVecVecArgumentDeclarationList_1 : IntVecVecArgumentDeclarationList {
  public IntVecVecArgumentDeclarationList_1(Parser yyq):base(yyq,
	((IntDeclaration)(yyq.StackAt(4).m_value))
	, 
	((VecDeclaration)(yyq.StackAt(2).m_value))
	, 
	((VecDeclaration)(yyq.StackAt(0).m_value))
	){}}

public class KeyIntIntArgumentDeclarationList_1 : KeyIntIntArgumentDeclarationList {
  public KeyIntIntArgumentDeclarationList_1(Parser yyq):base(yyq,
	((KeyDeclaration)(yyq.StackAt(4).m_value))
	, 
	((IntDeclaration)(yyq.StackAt(2).m_value))
	, 
	((IntDeclaration)(yyq.StackAt(0).m_value))
	){}}

public class Declaration_1 : Declaration {
  public Declaration_1(Parser yyq):base(yyq,
	((Typename)(yyq.StackAt(1).m_value))
	.yytext, 
	((IDENT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class KeyDeclaration_1 : KeyDeclaration {
  public KeyDeclaration_1(Parser yyq):base(yyq,
	((KEY_TYPE)(yyq.StackAt(1).m_value))
	.yytext, 
	((IDENT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class IntDeclaration_1 : IntDeclaration {
  public IntDeclaration_1(Parser yyq):base(yyq,
	((INTEGER_TYPE)(yyq.StackAt(1).m_value))
	.yytext, 
	((IDENT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class VecDeclaration_1 : VecDeclaration {
  public VecDeclaration_1(Parser yyq):base(yyq,
	((VECTOR_TYPE)(yyq.StackAt(1).m_value))
	.yytext, 
	((IDENT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class RotDeclaration_1 : RotDeclaration {
  public RotDeclaration_1(Parser yyq):base(yyq,
	((ROTATION_TYPE)(yyq.StackAt(1).m_value))
	.yytext, 
	((IDENT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class CompoundStatement_1 : CompoundStatement {
  public CompoundStatement_1(Parser yyq):base(yyq){}}

public class CompoundStatement_2 : CompoundStatement {
  public CompoundStatement_2(Parser yyq):base(yyq,
	((StatementList)(yyq.StackAt(1).m_value))
	){}}

public class StatementList_1 : StatementList {
  public StatementList_1(Parser yyq):base(yyq,
	((Statement)(yyq.StackAt(0).m_value))
	){}}

public class StatementList_2 : StatementList {
  public StatementList_2(Parser yyq):base(yyq,
	((StatementList)(yyq.StackAt(1).m_value))
	, 
	((Statement)(yyq.StackAt(0).m_value))
	){}}

public class EmptyStatement_1 : EmptyStatement {
  public EmptyStatement_1(Parser yyq):base(yyq){}}

public class Statement_1 : Statement {
  public Statement_1(Parser yyq):base(yyq,
	((EmptyStatement)(yyq.StackAt(1).m_value))
	){}}

public class Statement_2 : Statement {
  public Statement_2(Parser yyq):base(yyq,
	((Declaration)(yyq.StackAt(1).m_value))
	){}}

public class Statement_3 : Statement {
  public Statement_3(Parser yyq):base(yyq,
	((Assignment)(yyq.StackAt(1).m_value))
	){}}

public class Statement_4 : Statement {
  public Statement_4(Parser yyq):base(yyq,
	((Expression)(yyq.StackAt(1).m_value))
	){}}

public class Statement_5 : Statement {
  public Statement_5(Parser yyq):base(yyq,
	((ReturnStatement)(yyq.StackAt(1).m_value))
	){}}

public class Statement_6 : Statement {
  public Statement_6(Parser yyq):base(yyq,
	((JumpLabel)(yyq.StackAt(1).m_value))
	){}}

public class Statement_7 : Statement {
  public Statement_7(Parser yyq):base(yyq,
	((JumpStatement)(yyq.StackAt(1).m_value))
	){}}

public class Statement_8 : Statement {
  public Statement_8(Parser yyq):base(yyq,
	((StateChange)(yyq.StackAt(1).m_value))
	){}}

public class Statement_9 : Statement {
  public Statement_9(Parser yyq):base(yyq,
	((IfStatement)(yyq.StackAt(0).m_value))
	){}}

public class Statement_10 : Statement {
  public Statement_10(Parser yyq):base(yyq,
	((WhileStatement)(yyq.StackAt(0).m_value))
	){}}

public class Statement_11 : Statement {
  public Statement_11(Parser yyq):base(yyq,
	((DoWhileStatement)(yyq.StackAt(0).m_value))
	){}}

public class Statement_12 : Statement {
  public Statement_12(Parser yyq):base(yyq,
	((ForLoop)(yyq.StackAt(0).m_value))
	){}}

public class Statement_13 : Statement {
  public Statement_13(Parser yyq):base(yyq,
	((CompoundStatement)(yyq.StackAt(0).m_value))
	){}}

public class JumpLabel_1 : JumpLabel {
  public JumpLabel_1(Parser yyq):base(yyq,
	((IDENT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class JumpStatement_1 : JumpStatement {
  public JumpStatement_1(Parser yyq):base(yyq,
	((IDENT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class StateChange_1 : StateChange {
  public StateChange_1(Parser yyq):base(yyq,
	((IDENT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class StateChange_2 : StateChange {
  public StateChange_2(Parser yyq):base(yyq,
	((DEFAULT_STATE)(yyq.StackAt(0).m_value))
	.yytext){}}

public class IfStatement_1 : IfStatement {
  public IfStatement_1(Parser yyq):base(yyq,
	((Expression)(yyq.StackAt(2).m_value))
	, 
	((Statement)(yyq.StackAt(0).m_value))
	){}}

public class IfStatement_2 : IfStatement {
  public IfStatement_2(Parser yyq):base(yyq,
	((Expression)(yyq.StackAt(4).m_value))
	, 
	((Statement)(yyq.StackAt(2).m_value))
	, 
	((Statement)(yyq.StackAt(0).m_value))
	){}}

public class IfStatement_3 : IfStatement {
  public IfStatement_3(Parser yyq):base(yyq,
	((SimpleAssignment)(yyq.StackAt(2).m_value))
	, 
	((Statement)(yyq.StackAt(0).m_value))
	){}}

public class IfStatement_4 : IfStatement {
  public IfStatement_4(Parser yyq):base(yyq,
	((SimpleAssignment)(yyq.StackAt(4).m_value))
	, 
	((Statement)(yyq.StackAt(2).m_value))
	, 
	((Statement)(yyq.StackAt(0).m_value))
	){}}

public class WhileStatement_1 : WhileStatement {
  public WhileStatement_1(Parser yyq):base(yyq,
	((Expression)(yyq.StackAt(2).m_value))
	, 
	((Statement)(yyq.StackAt(0).m_value))
	){}}

public class WhileStatement_2 : WhileStatement {
  public WhileStatement_2(Parser yyq):base(yyq,
	((SimpleAssignment)(yyq.StackAt(2).m_value))
	, 
	((Statement)(yyq.StackAt(0).m_value))
	){}}

public class DoWhileStatement_1 : DoWhileStatement {
  public DoWhileStatement_1(Parser yyq):base(yyq,
	((Expression)(yyq.StackAt(2).m_value))
	, 
	((Statement)(yyq.StackAt(5).m_value))
	){}}

public class DoWhileStatement_2 : DoWhileStatement {
  public DoWhileStatement_2(Parser yyq):base(yyq,
	((SimpleAssignment)(yyq.StackAt(2).m_value))
	, 
	((Statement)(yyq.StackAt(5).m_value))
	){}}

public class ForLoop_1 : ForLoop {
  public ForLoop_1(Parser yyq):base(yyq,
	((ForLoopStatement)(yyq.StackAt(6).m_value))
	, 
	((Expression)(yyq.StackAt(4).m_value))
	, 
	((ForLoopStatement)(yyq.StackAt(2).m_value))
	, 
	((Statement)(yyq.StackAt(0).m_value))
	){}}

public class ForLoop_2 : ForLoop {
  public ForLoop_2(Parser yyq):base(yyq,null, 
	((Expression)(yyq.StackAt(4).m_value))
	, 
	((ForLoopStatement)(yyq.StackAt(2).m_value))
	, 
	((Statement)(yyq.StackAt(0).m_value))
	){}}

public class ForLoopStatement_1 : ForLoopStatement {
  public ForLoopStatement_1(Parser yyq):base(yyq,
	((Expression)(yyq.StackAt(0).m_value))
	){}}

public class ForLoopStatement_2 : ForLoopStatement {
  public ForLoopStatement_2(Parser yyq):base(yyq,
	((SimpleAssignment)(yyq.StackAt(0).m_value))
	){}}

public class ForLoopStatement_3 : ForLoopStatement {
  public ForLoopStatement_3(Parser yyq):base(yyq,
	((ForLoopStatement)(yyq.StackAt(2).m_value))
	, 
	((Expression)(yyq.StackAt(0).m_value))
	){}}

public class ForLoopStatement_4 : ForLoopStatement {
  public ForLoopStatement_4(Parser yyq):base(yyq,
	((ForLoopStatement)(yyq.StackAt(2).m_value))
	, 
	((SimpleAssignment)(yyq.StackAt(0).m_value))
	){}}

public class Assignment_1 : Assignment {
  public Assignment_1(Parser yyq):base(yyq,
	((Declaration)(yyq.StackAt(2).m_value))
	, 
	((Expression)(yyq.StackAt(0).m_value))
	, 
	((EQUALS)(yyq.StackAt(1).m_value))
	.yytext){}}

public class Assignment_2 : Assignment {
  public Assignment_2(Parser yyq):base(yyq,
	((SimpleAssignment)(yyq.StackAt(0).m_value))
	){}}

public class SimpleAssignment_1 : SimpleAssignment {
  public SimpleAssignment_1(Parser yyq):base(yyq,
	((IDENT)(yyq.StackAt(2).m_value))
	, 
	((Expression)(yyq.StackAt(0).m_value))
	, 
	((EQUALS)(yyq.StackAt(1).m_value))
	.yytext){}}

public class SimpleAssignment_2 : SimpleAssignment {
  public SimpleAssignment_2(Parser yyq):base(yyq,
	((IDENT)(yyq.StackAt(2).m_value))
	, 
	((Expression)(yyq.StackAt(0).m_value))
	, 
	((PLUS_EQUALS)(yyq.StackAt(1).m_value))
	.yytext){}}

public class SimpleAssignment_3 : SimpleAssignment {
  public SimpleAssignment_3(Parser yyq):base(yyq,
	((IDENT)(yyq.StackAt(2).m_value))
	, 
	((Expression)(yyq.StackAt(0).m_value))
	, 
	((MINUS_EQUALS)(yyq.StackAt(1).m_value))
	.yytext){}}

public class SimpleAssignment_4 : SimpleAssignment {
  public SimpleAssignment_4(Parser yyq):base(yyq,
	((IDENT)(yyq.StackAt(2).m_value))
	, 
	((Expression)(yyq.StackAt(0).m_value))
	, 
	((STAR_EQUALS)(yyq.StackAt(1).m_value))
	.yytext){}}

public class SimpleAssignment_5 : SimpleAssignment {
  public SimpleAssignment_5(Parser yyq):base(yyq,
	((IDENT)(yyq.StackAt(2).m_value))
	, 
	((Expression)(yyq.StackAt(0).m_value))
	, 
	((SLASH_EQUALS)(yyq.StackAt(1).m_value))
	.yytext){}}

public class SimpleAssignment_6 : SimpleAssignment {
  public SimpleAssignment_6(Parser yyq):base(yyq,
	((IDENT)(yyq.StackAt(2).m_value))
	, 
	((Expression)(yyq.StackAt(0).m_value))
	, 
	((PERCENT_EQUALS)(yyq.StackAt(1).m_value))
	.yytext){}}

public class SimpleAssignment_7 : SimpleAssignment {
  public SimpleAssignment_7(Parser yyq):base(yyq,new IdentDotExpression(((LSLSyntax
)yyq), 
	((IDENT)(yyq.StackAt(4).m_value))
	.yytext, 
	((IDENT)(yyq.StackAt(2).m_value))
	.yytext), 
	((Expression)(yyq.StackAt(0).m_value))
	, 
	((EQUALS)(yyq.StackAt(1).m_value))
	.yytext){}}

public class SimpleAssignment_8 : SimpleAssignment {
  public SimpleAssignment_8(Parser yyq):base(yyq,new IdentDotExpression(((LSLSyntax
)yyq), 
	((IDENT)(yyq.StackAt(4).m_value))
	.yytext, 
	((IDENT)(yyq.StackAt(2).m_value))
	.yytext), 
	((Expression)(yyq.StackAt(0).m_value))
	, 
	((PLUS_EQUALS)(yyq.StackAt(1).m_value))
	.yytext){}}

public class SimpleAssignment_9 : SimpleAssignment {
  public SimpleAssignment_9(Parser yyq):base(yyq,new IdentDotExpression(((LSLSyntax
)yyq), 
	((IDENT)(yyq.StackAt(4).m_value))
	.yytext, 
	((IDENT)(yyq.StackAt(2).m_value))
	.yytext), 
	((Expression)(yyq.StackAt(0).m_value))
	, 
	((MINUS_EQUALS)(yyq.StackAt(1).m_value))
	.yytext){}}

public class SimpleAssignment_10 : SimpleAssignment {
  public SimpleAssignment_10(Parser yyq):base(yyq,new IdentDotExpression(((LSLSyntax
)yyq), 
	((IDENT)(yyq.StackAt(4).m_value))
	.yytext, 
	((IDENT)(yyq.StackAt(2).m_value))
	.yytext), 
	((Expression)(yyq.StackAt(0).m_value))
	, 
	((STAR_EQUALS)(yyq.StackAt(1).m_value))
	.yytext){}}

public class SimpleAssignment_11 : SimpleAssignment {
  public SimpleAssignment_11(Parser yyq):base(yyq,new IdentDotExpression(((LSLSyntax
)yyq), 
	((IDENT)(yyq.StackAt(4).m_value))
	.yytext, 
	((IDENT)(yyq.StackAt(2).m_value))
	.yytext), 
	((Expression)(yyq.StackAt(0).m_value))
	, 
	((SLASH_EQUALS)(yyq.StackAt(1).m_value))
	.yytext){}}

public class SimpleAssignment_12 : SimpleAssignment {
  public SimpleAssignment_12(Parser yyq):base(yyq,new IdentDotExpression(((LSLSyntax
)yyq), 
	((IDENT)(yyq.StackAt(4).m_value))
	.yytext, 
	((IDENT)(yyq.StackAt(2).m_value))
	.yytext), 
	((Expression)(yyq.StackAt(0).m_value))
	, 
	((PERCENT_EQUALS)(yyq.StackAt(1).m_value))
	.yytext){}}

public class SimpleAssignment_13 : SimpleAssignment {
  public SimpleAssignment_13(Parser yyq):base(yyq,
	((IDENT)(yyq.StackAt(2).m_value))
	, 
	((SimpleAssignment)(yyq.StackAt(0).m_value))
	, 
	((EQUALS)(yyq.StackAt(1).m_value))
	.yytext){}}

public class SimpleAssignment_14 : SimpleAssignment {
  public SimpleAssignment_14(Parser yyq):base(yyq,
	((IDENT)(yyq.StackAt(2).m_value))
	, 
	((SimpleAssignment)(yyq.StackAt(0).m_value))
	, 
	((PLUS_EQUALS)(yyq.StackAt(1).m_value))
	.yytext){}}

public class SimpleAssignment_15 : SimpleAssignment {
  public SimpleAssignment_15(Parser yyq):base(yyq,
	((IDENT)(yyq.StackAt(2).m_value))
	, 
	((SimpleAssignment)(yyq.StackAt(0).m_value))
	, 
	((MINUS_EQUALS)(yyq.StackAt(1).m_value))
	.yytext){}}

public class SimpleAssignment_16 : SimpleAssignment {
  public SimpleAssignment_16(Parser yyq):base(yyq,
	((IDENT)(yyq.StackAt(2).m_value))
	, 
	((SimpleAssignment)(yyq.StackAt(0).m_value))
	, 
	((STAR_EQUALS)(yyq.StackAt(1).m_value))
	.yytext){}}

public class SimpleAssignment_17 : SimpleAssignment {
  public SimpleAssignment_17(Parser yyq):base(yyq,
	((IDENT)(yyq.StackAt(2).m_value))
	, 
	((SimpleAssignment)(yyq.StackAt(0).m_value))
	, 
	((SLASH_EQUALS)(yyq.StackAt(1).m_value))
	.yytext){}}

public class SimpleAssignment_18 : SimpleAssignment {
  public SimpleAssignment_18(Parser yyq):base(yyq,
	((IDENT)(yyq.StackAt(2).m_value))
	, 
	((SimpleAssignment)(yyq.StackAt(0).m_value))
	, 
	((PERCENT_EQUALS)(yyq.StackAt(1).m_value))
	.yytext){}}

public class SimpleAssignment_19 : SimpleAssignment {
  public SimpleAssignment_19(Parser yyq):base(yyq,new IdentDotExpression(((LSLSyntax
)yyq), 
	((IDENT)(yyq.StackAt(4).m_value))
	.yytext, 
	((IDENT)(yyq.StackAt(2).m_value))
	.yytext), 
	((SimpleAssignment)(yyq.StackAt(0).m_value))
	, 
	((EQUALS)(yyq.StackAt(1).m_value))
	.yytext){}}

public class SimpleAssignment_20 : SimpleAssignment {
  public SimpleAssignment_20(Parser yyq):base(yyq,new IdentDotExpression(((LSLSyntax
)yyq), 
	((IDENT)(yyq.StackAt(4).m_value))
	.yytext, 
	((IDENT)(yyq.StackAt(2).m_value))
	.yytext), 
	((SimpleAssignment)(yyq.StackAt(0).m_value))
	, 
	((PLUS_EQUALS)(yyq.StackAt(1).m_value))
	.yytext){}}

public class SimpleAssignment_21 : SimpleAssignment {
  public SimpleAssignment_21(Parser yyq):base(yyq,new IdentDotExpression(((LSLSyntax
)yyq), 
	((IDENT)(yyq.StackAt(4).m_value))
	.yytext, 
	((IDENT)(yyq.StackAt(2).m_value))
	.yytext), 
	((SimpleAssignment)(yyq.StackAt(0).m_value))
	, 
	((MINUS_EQUALS)(yyq.StackAt(1).m_value))
	.yytext){}}

public class SimpleAssignment_22 : SimpleAssignment {
  public SimpleAssignment_22(Parser yyq):base(yyq,new IdentDotExpression(((LSLSyntax
)yyq), 
	((IDENT)(yyq.StackAt(4).m_value))
	.yytext, 
	((IDENT)(yyq.StackAt(2).m_value))
	.yytext), 
	((SimpleAssignment)(yyq.StackAt(0).m_value))
	, 
	((STAR_EQUALS)(yyq.StackAt(1).m_value))
	.yytext){}}

public class SimpleAssignment_23 : SimpleAssignment {
  public SimpleAssignment_23(Parser yyq):base(yyq,new IdentDotExpression(((LSLSyntax
)yyq), 
	((IDENT)(yyq.StackAt(4).m_value))
	.yytext, 
	((IDENT)(yyq.StackAt(2).m_value))
	.yytext), 
	((SimpleAssignment)(yyq.StackAt(0).m_value))
	, 
	((SLASH_EQUALS)(yyq.StackAt(1).m_value))
	.yytext){}}

public class SimpleAssignment_24 : SimpleAssignment {
  public SimpleAssignment_24(Parser yyq):base(yyq,new IdentDotExpression(((LSLSyntax
)yyq), 
	((IDENT)(yyq.StackAt(4).m_value))
	.yytext, 
	((IDENT)(yyq.StackAt(2).m_value))
	.yytext), 
	((SimpleAssignment)(yyq.StackAt(0).m_value))
	, 
	((PERCENT_EQUALS)(yyq.StackAt(1).m_value))
	.yytext){}}

public class ReturnStatement_1 : ReturnStatement {
  public ReturnStatement_1(Parser yyq):base(yyq,
	((Expression)(yyq.StackAt(0).m_value))
	){}}

public class ReturnStatement_2 : ReturnStatement {
  public ReturnStatement_2(Parser yyq):base(yyq){}}

public class Constant_1 : Constant {
  public Constant_1(Parser yyq):base(yyq,"integer", 
	((INTEGER_CONSTANT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class Constant_2 : Constant {
  public Constant_2(Parser yyq):base(yyq,"integer", 
	((HEX_INTEGER_CONSTANT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class Constant_3 : Constant {
  public Constant_3(Parser yyq):base(yyq,"float", 
	((FLOAT_CONSTANT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class Constant_4 : Constant {
  public Constant_4(Parser yyq):base(yyq,"string", 
	((STRING_CONSTANT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class ListConstant_1 : ListConstant {
  public ListConstant_1(Parser yyq):base(yyq,
	((ArgumentList)(yyq.StackAt(1).m_value))
	){}}

public class VectorConstant_1 : VectorConstant {
  public VectorConstant_1(Parser yyq):base(yyq,
	((Expression)(yyq.StackAt(5).m_value))
	, 
	((Expression)(yyq.StackAt(3).m_value))
	, 
	((Expression)(yyq.StackAt(1).m_value))
	){}}

public class RotationConstant_1 : RotationConstant {
  public RotationConstant_1(Parser yyq):base(yyq,
	((Expression)(yyq.StackAt(7).m_value))
	, 
	((Expression)(yyq.StackAt(5).m_value))
	, 
	((Expression)(yyq.StackAt(3).m_value))
	, 
	((Expression)(yyq.StackAt(1).m_value))
	){}}

public class ConstantExpression_1 : ConstantExpression {
  public ConstantExpression_1(Parser yyq):base(yyq,
	((Constant)(yyq.StackAt(0).m_value))
	){}}

public class IdentExpression_1 : IdentExpression {
  public IdentExpression_1(Parser yyq):base(yyq,
	((IDENT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class IdentDotExpression_1 : IdentDotExpression {
  public IdentDotExpression_1(Parser yyq):base(yyq,
	((IDENT)(yyq.StackAt(2).m_value))
	.yytext, 
	((IDENT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class IncrementDecrementExpression_1 : IncrementDecrementExpression {
  public IncrementDecrementExpression_1(Parser yyq):base(yyq,
	((IDENT)(yyq.StackAt(1).m_value))
	.yytext, 
	((INCREMENT)(yyq.StackAt(0).m_value))
	.yytext, true){}}

public class IncrementDecrementExpression_2 : IncrementDecrementExpression {
  public IncrementDecrementExpression_2(Parser yyq):base(yyq,
	((IDENT)(yyq.StackAt(1).m_value))
	.yytext, 
	((DECREMENT)(yyq.StackAt(0).m_value))
	.yytext, true){}}

public class IncrementDecrementExpression_3 : IncrementDecrementExpression {
  public IncrementDecrementExpression_3(Parser yyq):base(yyq,new IdentDotExpression(((LSLSyntax
)yyq), 
	((IDENT)(yyq.StackAt(3).m_value))
	.yytext, 
	((IDENT)(yyq.StackAt(1).m_value))
	.yytext), 
	((INCREMENT)(yyq.StackAt(0).m_value))
	.yytext, true){}}

public class IncrementDecrementExpression_4 : IncrementDecrementExpression {
  public IncrementDecrementExpression_4(Parser yyq):base(yyq,new IdentDotExpression(((LSLSyntax
)yyq), 
	((IDENT)(yyq.StackAt(3).m_value))
	.yytext, 
	((IDENT)(yyq.StackAt(1).m_value))
	.yytext), 
	((DECREMENT)(yyq.StackAt(0).m_value))
	.yytext, true){}}

public class IncrementDecrementExpression_5 : IncrementDecrementExpression {
  public IncrementDecrementExpression_5(Parser yyq):base(yyq,
	((IDENT)(yyq.StackAt(0).m_value))
	.yytext, 
	((INCREMENT)(yyq.StackAt(1).m_value))
	.yytext, false){}}

public class IncrementDecrementExpression_6 : IncrementDecrementExpression {
  public IncrementDecrementExpression_6(Parser yyq):base(yyq,
	((IDENT)(yyq.StackAt(0).m_value))
	.yytext, 
	((DECREMENT)(yyq.StackAt(1).m_value))
	.yytext, false){}}

public class IncrementDecrementExpression_7 : IncrementDecrementExpression {
  public IncrementDecrementExpression_7(Parser yyq):base(yyq,new IdentDotExpression(((LSLSyntax
)yyq), 
	((IDENT)(yyq.StackAt(2).m_value))
	.yytext, 
	((IDENT)(yyq.StackAt(0).m_value))
	.yytext), 
	((INCREMENT)(yyq.StackAt(3).m_value))
	.yytext, false){}}

public class IncrementDecrementExpression_8 : IncrementDecrementExpression {
  public IncrementDecrementExpression_8(Parser yyq):base(yyq,new IdentDotExpression(((LSLSyntax
)yyq), 
	((IDENT)(yyq.StackAt(2).m_value))
	.yytext, 
	((IDENT)(yyq.StackAt(0).m_value))
	.yytext), 
	((DECREMENT)(yyq.StackAt(3).m_value))
	.yytext, false){}}

public class FunctionCallExpression_1 : FunctionCallExpression {
  public FunctionCallExpression_1(Parser yyq):base(yyq,
	((FunctionCall)(yyq.StackAt(0).m_value))
	){}}

public class BinaryExpression_1 : BinaryExpression {
  public BinaryExpression_1(Parser yyq):base(yyq,
	((Expression)(yyq.StackAt(2).m_value))
	, 
	((Expression)(yyq.StackAt(0).m_value))
	, 
	((PLUS)(yyq.StackAt(1).m_value))
	.yytext){}}

public class BinaryExpression_2 : BinaryExpression {
  public BinaryExpression_2(Parser yyq):base(yyq,
	((Expression)(yyq.StackAt(2).m_value))
	, 
	((Expression)(yyq.StackAt(0).m_value))
	, 
	((MINUS)(yyq.StackAt(1).m_value))
	.yytext){}}

public class BinaryExpression_3 : BinaryExpression {
  public BinaryExpression_3(Parser yyq):base(yyq,
	((Expression)(yyq.StackAt(2).m_value))
	, 
	((Expression)(yyq.StackAt(0).m_value))
	, 
	((STAR)(yyq.StackAt(1).m_value))
	.yytext){}}

public class BinaryExpression_4 : BinaryExpression {
  public BinaryExpression_4(Parser yyq):base(yyq,
	((Expression)(yyq.StackAt(2).m_value))
	, 
	((Expression)(yyq.StackAt(0).m_value))
	, 
	((SLASH)(yyq.StackAt(1).m_value))
	.yytext){}}

public class BinaryExpression_5 : BinaryExpression {
  public BinaryExpression_5(Parser yyq):base(yyq,
	((Expression)(yyq.StackAt(2).m_value))
	, 
	((Expression)(yyq.StackAt(0).m_value))
	, 
	((PERCENT)(yyq.StackAt(1).m_value))
	.yytext){}}

public class BinaryExpression_6 : BinaryExpression {
  public BinaryExpression_6(Parser yyq):base(yyq,
	((Expression)(yyq.StackAt(2).m_value))
	, 
	((Expression)(yyq.StackAt(0).m_value))
	, 
	((AMP)(yyq.StackAt(1).m_value))
	.yytext){}}

public class BinaryExpression_7 : BinaryExpression {
  public BinaryExpression_7(Parser yyq):base(yyq,
	((Expression)(yyq.StackAt(2).m_value))
	, 
	((Expression)(yyq.StackAt(0).m_value))
	, 
	((STROKE)(yyq.StackAt(1).m_value))
	.yytext){}}

public class BinaryExpression_8 : BinaryExpression {
  public BinaryExpression_8(Parser yyq):base(yyq,
	((Expression)(yyq.StackAt(2).m_value))
	, 
	((Expression)(yyq.StackAt(0).m_value))
	, 
	((CARET)(yyq.StackAt(1).m_value))
	.yytext){}}

public class BinaryExpression_9 : BinaryExpression {
  public BinaryExpression_9(Parser yyq):base(yyq,
	((Expression)(yyq.StackAt(2).m_value))
	, 
	((Expression)(yyq.StackAt(0).m_value))
	, 
	((RIGHT_ANGLE)(yyq.StackAt(1).m_value))
	.yytext){}}

public class BinaryExpression_10 : BinaryExpression {
  public BinaryExpression_10(Parser yyq):base(yyq,
	((Expression)(yyq.StackAt(2).m_value))
	, 
	((Expression)(yyq.StackAt(0).m_value))
	, 
	((LEFT_ANGLE)(yyq.StackAt(1).m_value))
	.yytext){}}

public class BinaryExpression_11 : BinaryExpression {
  public BinaryExpression_11(Parser yyq):base(yyq,
	((Expression)(yyq.StackAt(2).m_value))
	, 
	((Expression)(yyq.StackAt(0).m_value))
	, 
	((EQUALS_EQUALS)(yyq.StackAt(1).m_value))
	.yytext){}}

public class BinaryExpression_12 : BinaryExpression {
  public BinaryExpression_12(Parser yyq):base(yyq,
	((Expression)(yyq.StackAt(2).m_value))
	, 
	((Expression)(yyq.StackAt(0).m_value))
	, 
	((EXCLAMATION_EQUALS)(yyq.StackAt(1).m_value))
	.yytext){}}

public class BinaryExpression_13 : BinaryExpression {
  public BinaryExpression_13(Parser yyq):base(yyq,
	((Expression)(yyq.StackAt(2).m_value))
	, 
	((Expression)(yyq.StackAt(0).m_value))
	, 
	((LESS_EQUALS)(yyq.StackAt(1).m_value))
	.yytext){}}

public class BinaryExpression_14 : BinaryExpression {
  public BinaryExpression_14(Parser yyq):base(yyq,
	((Expression)(yyq.StackAt(2).m_value))
	, 
	((Expression)(yyq.StackAt(0).m_value))
	, 
	((GREATER_EQUALS)(yyq.StackAt(1).m_value))
	.yytext){}}

public class BinaryExpression_15 : BinaryExpression {
  public BinaryExpression_15(Parser yyq):base(yyq,
	((Expression)(yyq.StackAt(2).m_value))
	, 
	((Expression)(yyq.StackAt(0).m_value))
	, 
	((AMP_AMP)(yyq.StackAt(1).m_value))
	.yytext){}}

public class BinaryExpression_16 : BinaryExpression {
  public BinaryExpression_16(Parser yyq):base(yyq,
	((Expression)(yyq.StackAt(2).m_value))
	, 
	((Expression)(yyq.StackAt(0).m_value))
	, 
	((STROKE_STROKE)(yyq.StackAt(1).m_value))
	.yytext){}}

public class BinaryExpression_17 : BinaryExpression {
  public BinaryExpression_17(Parser yyq):base(yyq,
	((Expression)(yyq.StackAt(2).m_value))
	, 
	((Expression)(yyq.StackAt(0).m_value))
	, 
	((LEFT_SHIFT)(yyq.StackAt(1).m_value))
	.yytext){}}

public class BinaryExpression_18 : BinaryExpression {
  public BinaryExpression_18(Parser yyq):base(yyq,
	((Expression)(yyq.StackAt(2).m_value))
	, 
	((Expression)(yyq.StackAt(0).m_value))
	, 
	((RIGHT_SHIFT)(yyq.StackAt(1).m_value))
	.yytext){}}

public class UnaryExpression_1 : UnaryExpression {
  public UnaryExpression_1(Parser yyq):base(yyq,
	((EXCLAMATION)(yyq.StackAt(1).m_value))
	.yytext, 
	((Expression)(yyq.StackAt(0).m_value))
	){}}

public class UnaryExpression_2 : UnaryExpression {
  public UnaryExpression_2(Parser yyq):base(yyq,
	((MINUS)(yyq.StackAt(1).m_value))
	.yytext, 
	((Expression)(yyq.StackAt(0).m_value))
	){}}

public class UnaryExpression_3 : UnaryExpression {
  public UnaryExpression_3(Parser yyq):base(yyq,
	((TILDE)(yyq.StackAt(1).m_value))
	.yytext, 
	((Expression)(yyq.StackAt(0).m_value))
	){}}

public class ParenthesisExpression_1 : ParenthesisExpression {
  public ParenthesisExpression_1(Parser yyq):base(yyq,
	((Expression)(yyq.StackAt(1).m_value))
	){}}

public class ParenthesisExpression_2 : ParenthesisExpression {
  public ParenthesisExpression_2(Parser yyq):base(yyq,
	((SimpleAssignment)(yyq.StackAt(1).m_value))
	){}}

public class TypecastExpression_1 : TypecastExpression {
  public TypecastExpression_1(Parser yyq):base(yyq,
	((Typename)(yyq.StackAt(2).m_value))
	.yytext, 
	((Constant)(yyq.StackAt(0).m_value))
	){}}

public class TypecastExpression_2 : TypecastExpression {
  public TypecastExpression_2(Parser yyq):base(yyq,
	((Typename)(yyq.StackAt(2).m_value))
	.yytext, new IdentExpression(((LSLSyntax
)yyq), 
	((IDENT)(yyq.StackAt(0).m_value))
	.yytext)){}}

public class TypecastExpression_3 : TypecastExpression {
  public TypecastExpression_3(Parser yyq):base(yyq,
	((Typename)(yyq.StackAt(4).m_value))
	.yytext, new IdentDotExpression(((LSLSyntax
)yyq), 
	((IDENT)(yyq.StackAt(2).m_value))
	.yytext, 
	((IDENT)(yyq.StackAt(0).m_value))
	.yytext)){}}

public class TypecastExpression_4 : TypecastExpression {
  public TypecastExpression_4(Parser yyq):base(yyq,
	((Typename)(yyq.StackAt(3).m_value))
	.yytext, new IncrementDecrementExpression(((LSLSyntax
)yyq), 
	((IDENT)(yyq.StackAt(1).m_value))
	.yytext, 
	((INCREMENT)(yyq.StackAt(0).m_value))
	.yytext, true)){}}

public class TypecastExpression_5 : TypecastExpression {
  public TypecastExpression_5(Parser yyq):base(yyq,
	((Typename)(yyq.StackAt(5).m_value))
	.yytext, new IncrementDecrementExpression(((LSLSyntax
)yyq), new IdentDotExpression(((LSLSyntax
)yyq), 
	((IDENT)(yyq.StackAt(3).m_value))
	.yytext, 
	((IDENT)(yyq.StackAt(1).m_value))
	.yytext), 
	((INCREMENT)(yyq.StackAt(0).m_value))
	.yytext, true)){}}

public class TypecastExpression_6 : TypecastExpression {
  public TypecastExpression_6(Parser yyq):base(yyq,
	((Typename)(yyq.StackAt(3).m_value))
	.yytext, new IncrementDecrementExpression(((LSLSyntax
)yyq), 
	((IDENT)(yyq.StackAt(1).m_value))
	.yytext, 
	((DECREMENT)(yyq.StackAt(0).m_value))
	.yytext, true)){}}

public class TypecastExpression_7 : TypecastExpression {
  public TypecastExpression_7(Parser yyq):base(yyq,
	((Typename)(yyq.StackAt(5).m_value))
	.yytext, new IncrementDecrementExpression(((LSLSyntax
)yyq), new IdentDotExpression(((LSLSyntax
)yyq), 
	((IDENT)(yyq.StackAt(3).m_value))
	.yytext, 
	((IDENT)(yyq.StackAt(1).m_value))
	.yytext), 
	((DECREMENT)(yyq.StackAt(0).m_value))
	.yytext, true)){}}

public class TypecastExpression_8 : TypecastExpression {
  public TypecastExpression_8(Parser yyq):base(yyq,
	((Typename)(yyq.StackAt(2).m_value))
	.yytext, 
	((FunctionCall)(yyq.StackAt(0).m_value))
	){}}

public class TypecastExpression_9 : TypecastExpression {
  public TypecastExpression_9(Parser yyq):base(yyq,
	((Typename)(yyq.StackAt(4).m_value))
	.yytext, 
	((Expression)(yyq.StackAt(1).m_value))
	){}}

public class FunctionCall_1 : FunctionCall {
  public FunctionCall_1(Parser yyq):base(yyq,
	((IDENT)(yyq.StackAt(3).m_value))
	.yytext, 
	((ArgumentList)(yyq.StackAt(1).m_value))
	){}}

public class ArgumentList_1 : ArgumentList {
  public ArgumentList_1(Parser yyq):base(yyq,
	((Argument)(yyq.StackAt(0).m_value))
	){}}

public class ArgumentList_2 : ArgumentList {
  public ArgumentList_2(Parser yyq):base(yyq,
	((ArgumentList)(yyq.StackAt(2).m_value))
	, 
	((Argument)(yyq.StackAt(0).m_value))
	){}}

public class ExpressionArgument_1 : ExpressionArgument {
  public ExpressionArgument_1(Parser yyq):base(yyq,
	((Expression)(yyq.StackAt(0).m_value))
	){}}

public class Typename_1 : Typename {
  public Typename_1(Parser yyq):base(yyq,
	((INTEGER_TYPE)(yyq.StackAt(0).m_value))
	.yytext){}}

public class Typename_2 : Typename {
  public Typename_2(Parser yyq):base(yyq,
	((FLOAT_TYPE)(yyq.StackAt(0).m_value))
	.yytext){}}

public class Typename_3 : Typename {
  public Typename_3(Parser yyq):base(yyq,
	((STRING_TYPE)(yyq.StackAt(0).m_value))
	.yytext){}}

public class Typename_4 : Typename {
  public Typename_4(Parser yyq):base(yyq,
	((KEY_TYPE)(yyq.StackAt(0).m_value))
	.yytext){}}

public class Typename_5 : Typename {
  public Typename_5(Parser yyq):base(yyq,
	((VECTOR_TYPE)(yyq.StackAt(0).m_value))
	.yytext){}}

public class Typename_6 : Typename {
  public Typename_6(Parser yyq):base(yyq,
	((ROTATION_TYPE)(yyq.StackAt(0).m_value))
	.yytext){}}

public class Typename_7 : Typename {
  public Typename_7(Parser yyq):base(yyq,
	((LIST_TYPE)(yyq.StackAt(0).m_value))
	.yytext){}}

public class Event_1 : Event {
  public Event_1(Parser yyq):base(yyq,
	((DATASERVER_EVENT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class Event_2 : Event {
  public Event_2(Parser yyq):base(yyq,
	((EMAIL_EVENT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class Event_3 : Event {
  public Event_3(Parser yyq):base(yyq,
	((HTTP_RESPONSE_EVENT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class Event_4 : Event {
  public Event_4(Parser yyq):base(yyq,
	((LINK_MESSAGE_EVENT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class Event_5 : Event {
  public Event_5(Parser yyq):base(yyq,
	((LISTEN_EVENT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class Event_6 : Event {
  public Event_6(Parser yyq):base(yyq,
	((MONEY_EVENT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class Event_7 : Event {
  public Event_7(Parser yyq):base(yyq,
	((REMOTE_DATA_EVENT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class Event_8 : Event {
  public Event_8(Parser yyq):base(yyq,
	((HTTP_REQUEST_EVENT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class VoidArgEvent_1 : VoidArgEvent {
  public VoidArgEvent_1(Parser yyq):base(yyq,
	((STATE_ENTRY_EVENT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class VoidArgEvent_2 : VoidArgEvent {
  public VoidArgEvent_2(Parser yyq):base(yyq,
	((STATE_EXIT_EVENT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class VoidArgEvent_3 : VoidArgEvent {
  public VoidArgEvent_3(Parser yyq):base(yyq,
	((MOVING_END_EVENT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class VoidArgEvent_4 : VoidArgEvent {
  public VoidArgEvent_4(Parser yyq):base(yyq,
	((MOVING_START_EVENT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class VoidArgEvent_5 : VoidArgEvent {
  public VoidArgEvent_5(Parser yyq):base(yyq,
	((NO_SENSOR_EVENT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class VoidArgEvent_6 : VoidArgEvent {
  public VoidArgEvent_6(Parser yyq):base(yyq,
	((NOT_AT_ROT_TARGET_EVENT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class VoidArgEvent_7 : VoidArgEvent {
  public VoidArgEvent_7(Parser yyq):base(yyq,
	((NOT_AT_TARGET_EVENT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class VoidArgEvent_8 : VoidArgEvent {
  public VoidArgEvent_8(Parser yyq):base(yyq,
	((TIMER_EVENT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class KeyArgEvent_1 : KeyArgEvent {
  public KeyArgEvent_1(Parser yyq):base(yyq,
	((ATTACH_EVENT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class KeyArgEvent_2 : KeyArgEvent {
  public KeyArgEvent_2(Parser yyq):base(yyq,
	((OBJECT_REZ_EVENT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class IntArgEvent_1 : IntArgEvent {
  public IntArgEvent_1(Parser yyq):base(yyq,
	((CHANGED_EVENT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class IntArgEvent_2 : IntArgEvent {
  public IntArgEvent_2(Parser yyq):base(yyq,
	((COLLISION_EVENT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class IntArgEvent_3 : IntArgEvent {
  public IntArgEvent_3(Parser yyq):base(yyq,
	((COLLISION_END_EVENT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class IntArgEvent_4 : IntArgEvent {
  public IntArgEvent_4(Parser yyq):base(yyq,
	((COLLISION_START_EVENT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class IntArgEvent_5 : IntArgEvent {
  public IntArgEvent_5(Parser yyq):base(yyq,
	((ON_REZ_EVENT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class IntArgEvent_6 : IntArgEvent {
  public IntArgEvent_6(Parser yyq):base(yyq,
	((RUN_TIME_PERMISSIONS_EVENT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class IntArgEvent_7 : IntArgEvent {
  public IntArgEvent_7(Parser yyq):base(yyq,
	((SENSOR_EVENT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class IntArgEvent_8 : IntArgEvent {
  public IntArgEvent_8(Parser yyq):base(yyq,
	((TOUCH_EVENT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class IntArgEvent_9 : IntArgEvent {
  public IntArgEvent_9(Parser yyq):base(yyq,
	((TOUCH_END_EVENT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class IntArgEvent_10 : IntArgEvent {
  public IntArgEvent_10(Parser yyq):base(yyq,
	((TOUCH_START_EVENT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class VectorArgEvent_1 : VectorArgEvent {
  public VectorArgEvent_1(Parser yyq):base(yyq,
	((LAND_COLLISION_EVENT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class VectorArgEvent_2 : VectorArgEvent {
  public VectorArgEvent_2(Parser yyq):base(yyq,
	((LAND_COLLISION_END_EVENT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class VectorArgEvent_3 : VectorArgEvent {
  public VectorArgEvent_3(Parser yyq):base(yyq,
	((LAND_COLLISION_START_EVENT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class IntRotRotArgEvent_1 : IntRotRotArgEvent {
  public IntRotRotArgEvent_1(Parser yyq):base(yyq,
	((AT_ROT_TARGET_EVENT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class IntVecVecArgEvent_1 : IntVecVecArgEvent {
  public IntVecVecArgEvent_1(Parser yyq):base(yyq,
	((AT_TARGET_EVENT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class KeyIntIntArgEvent_1 : KeyIntIntArgEvent {
  public KeyIntIntArgEvent_1(Parser yyq):base(yyq,
	((CONTROL_EVENT)(yyq.StackAt(0).m_value))
	.yytext){}}
public class yyLSLSyntax
: YyParser {
  public override object Action(Parser yyq,SYMBOL yysym, int yyact) {
    switch(yyact) {
	 case -1: break; //// keep compiler happy
}  return null; }

public class ArgumentDeclarationList_3 : ArgumentDeclarationList {
  public ArgumentDeclarationList_3(Parser yyq):base(yyq){}}

public class ArgumentList_3 : ArgumentList {
  public ArgumentList_3(Parser yyq):base(yyq){}}

public class ArgumentDeclarationList_4 : ArgumentDeclarationList {
  public ArgumentDeclarationList_4(Parser yyq):base(yyq){}}

public class ArgumentList_4 : ArgumentList {
  public ArgumentList_4(Parser yyq):base(yyq){}}

public class ArgumentDeclarationList_5 : ArgumentDeclarationList {
  public ArgumentDeclarationList_5(Parser yyq):base(yyq){}}
public yyLSLSyntax
():base() { arr = new int[] { 
101,4,6,52,0,
46,0,53,0,102,
20,103,4,28,76,
0,83,0,76,0,
80,0,114,0,111,
0,103,0,114,0,
97,0,109,0,82,
0,111,0,111,0,
116,0,1,96,1,
2,104,18,1,2841,
102,2,0,105,5,
394,1,0,106,18,
1,0,0,2,0,
1,1,107,18,1,
1,108,20,109,4,
18,76,0,73,0,
83,0,84,0,95,
0,84,0,89,0,
80,0,69,0,1,
57,1,1,2,0,
1,2,110,18,1,
2,111,20,112,4,
26,82,0,79,0,
84,0,65,0,84,
0,73,0,79,0,
78,0,95,0,84,
0,89,0,80,0,
69,0,1,56,1,
1,2,0,1,3,
113,18,1,3,114,
20,115,4,22,86,
0,69,0,67,0,
84,0,79,0,82,
0,95,0,84,0,
89,0,80,0,69,
0,1,55,1,1,
2,0,1,4,116,
18,1,4,117,20,
118,4,16,75,0,
69,0,89,0,95,
0,84,0,89,0,
80,0,69,0,1,
54,1,1,2,0,
1,5,119,18,1,
5,120,20,121,4,
22,83,0,84,0,
82,0,73,0,78,
0,71,0,95,0,
84,0,89,0,80,
0,69,0,1,53,
1,1,2,0,1,
6,122,18,1,6,
123,20,124,4,20,
70,0,76,0,79,
0,65,0,84,0,
95,0,84,0,89,
0,80,0,69,0,
1,52,1,1,2,
0,1,7,125,18,
1,7,126,20,127,
4,24,73,0,78,
0,84,0,69,0,
71,0,69,0,82,
0,95,0,84,0,
89,0,80,0,69,
0,1,51,1,1,
2,0,1,8,128,
18,1,8,129,20,
130,4,16,84,0,
121,0,112,0,101,
0,110,0,97,0,
109,0,101,0,1,
123,1,2,2,0,
1,9,131,18,1,
9,132,20,133,4,
10,73,0,68,0,
69,0,78,0,84,
0,1,92,1,1,
2,0,1,10,134,
18,1,10,135,20,
136,4,20,76,0,
69,0,70,0,84,
0,95,0,80,0,
65,0,82,0,69,
0,78,0,1,16,
1,1,2,0,1,
18,137,18,1,18,
129,2,0,1,19,
138,18,1,19,132,
2,0,1,20,139,
18,1,20,140,20,
141,4,46,65,0,
114,0,103,0,117,
0,109,0,101,0,
110,0,116,0,68,
0,101,0,99,0,
108,0,97,0,114,
0,97,0,116,0,
105,0,111,0,110,
0,76,0,105,0,
115,0,116,0,1,
111,1,2,2,0,
1,21,142,18,1,
21,143,20,144,4,
10,67,0,79,0,
77,0,77,0,65,
0,1,14,1,1,
2,0,1,2807,145,
18,1,2807,146,20,
147,4,18,83,0,
69,0,77,0,73,
0,67,0,79,0,
76,0,79,0,78,
0,1,11,1,1,
2,0,1,1694,148,
18,1,1694,149,20,
150,4,32,70,0,
111,0,114,0,76,
0,111,0,111,0,
112,0,83,0,116,
0,97,0,116,0,
101,0,109,0,101,
0,110,0,116,0,
1,146,1,2,2,
0,1,1695,151,18,
1,1695,143,2,0,
1,2645,152,18,1,
2645,153,20,154,4,
34,86,0,111,0,
105,0,100,0,65,
0,114,0,103,0,
83,0,116,0,97,
0,116,0,101,0,
69,0,118,0,101,
0,110,0,116,0,
1,104,1,2,2,
0,1,2646,155,18,
1,2646,156,20,157,
4,20,83,0,116,
0,97,0,116,0,
101,0,69,0,118,
0,101,0,110,0,
116,0,1,103,1,
2,2,0,1,30,
158,18,1,30,159,
20,160,4,22,68,
0,101,0,99,0,
108,0,97,0,114,
0,97,0,116,0,
105,0,111,0,110,
0,1,118,1,2,
2,0,1,31,161,
18,1,31,162,20,
163,4,22,82,0,
73,0,71,0,72,
0,84,0,95,0,
80,0,65,0,82,
0,69,0,78,0,
1,17,1,1,2,
0,1,32,164,18,
1,32,165,20,166,
4,20,76,0,69,
0,70,0,84,0,
95,0,66,0,82,
0,65,0,67,0,
69,0,1,12,1,
1,2,0,1,2650,
167,18,1,2650,168,
20,169,4,44,73,
0,110,0,116,0,
82,0,111,0,116,
0,82,0,111,0,
116,0,65,0,114,
0,103,0,83,0,
116,0,97,0,116,
0,101,0,69,0,
118,0,101,0,110,
0,116,0,1,108,
1,2,2,0,1,
2819,170,18,1,2819,
171,20,172,4,34,
71,0,108,0,111,
0,98,0,97,0,
108,0,68,0,101,
0,102,0,105,0,
110,0,105,0,116,
0,105,0,111,0,
110,0,115,0,1,
97,1,2,2,0,
1,2652,173,18,1,
2652,174,20,175,4,
32,73,0,110,0,
116,0,65,0,114,
0,103,0,83,0,
116,0,97,0,116,
0,101,0,69,0,
118,0,101,0,110,
0,116,0,1,106,
1,2,2,0,1,
1114,176,18,1,1114,
132,2,0,1,2654,
177,18,1,2654,153,
2,0,1,1152,178,
18,1,1152,179,20,
180,4,32,83,0,
105,0,109,0,112,
0,108,0,101,0,
65,0,115,0,115,
0,105,0,103,0,
110,0,109,0,101,
0,110,0,116,0,
1,137,1,2,2,
0,1,1117,181,18,
1,1117,182,20,183,
4,28,80,0,69,
0,82,0,67,0,
69,0,78,0,84,
0,95,0,69,0,
81,0,85,0,65,
0,76,0,83,0,
1,10,1,1,2,
0,1,40,184,18,
1,40,132,2,0,
1,41,185,18,1,
41,135,2,0,1,
42,186,18,1,42,
187,20,188,4,20,
69,0,120,0,112,
0,114,0,101,0,
115,0,115,0,105,
0,111,0,110,0,
1,155,1,2,2,
0,1,43,189,18,
1,43,190,20,191,
4,22,82,0,73,
0,71,0,72,0,
84,0,95,0,83,
0,72,0,73,0,
70,0,84,0,1,
41,1,1,2,0,
1,44,192,18,1,
44,132,2,0,1,
1159,193,18,1,1159,
187,2,0,1,46,
194,18,1,46,195,
20,196,4,12,80,
0,69,0,82,0,
73,0,79,0,68,
0,1,24,1,1,
2,0,1,47,197,
18,1,47,132,2,
0,1,48,198,18,
1,48,199,20,200,
4,18,68,0,69,
0,67,0,82,0,
69,0,77,0,69,
0,78,0,84,0,
1,5,1,1,2,
0,1,49,201,18,
1,49,202,20,203,
4,18,73,0,78,
0,67,0,82,0,
69,0,77,0,69,
0,78,0,84,0,
1,4,1,1,2,
0,1,50,204,18,
1,50,199,2,0,
1,51,205,18,1,
51,202,2,0,1,
52,206,18,1,52,
135,2,0,1,2281,
207,18,1,2281,179,
2,0,1,2839,208,
18,1,2839,209,20,
210,4,48,71,0,
108,0,111,0,98,
0,97,0,108,0,
70,0,117,0,110,
0,99,0,116,0,
105,0,111,0,110,
0,68,0,101,0,
102,0,105,0,110,
0,105,0,116,0,
105,0,111,0,110,
0,1,99,1,2,
2,0,1,2840,211,
18,1,2840,212,20,
213,4,50,71,0,
108,0,111,0,98,
0,97,0,108,0,
86,0,97,0,114,
0,105,0,97,0,
98,0,108,0,101,
0,68,0,101,0,
99,0,108,0,97,
0,114,0,97,0,
116,0,105,0,111,
0,110,0,1,98,
1,2,2,0,1,
2841,104,1,2842,214,
18,1,2842,215,23,
216,4,6,69,0,
79,0,70,0,1,
2,1,6,2,0,
1,1730,217,18,1,
1730,179,2,0,1,
1731,218,18,1,1731,
146,2,0,1,61,
219,18,1,61,129,
2,0,1,62,220,
18,1,62,162,2,
0,1,63,221,18,
1,63,132,2,0,
1,65,222,18,1,
65,195,2,0,1,
66,223,18,1,66,
132,2,0,1,67,
224,18,1,67,199,
2,0,1,68,225,
18,1,68,202,2,
0,1,69,226,18,
1,69,199,2,0,
1,70,227,18,1,
70,202,2,0,1,
71,228,18,1,71,
135,2,0,1,73,
229,18,1,73,187,
2,0,1,74,230,
18,1,74,162,2,
0,1,1189,231,18,
1,1189,232,20,233,
4,22,83,0,84,
0,65,0,82,0,
95,0,69,0,81,
0,85,0,65,0,
76,0,83,0,1,
8,1,1,2,0,
1,76,234,18,1,
76,235,20,236,4,
20,76,0,69,0,
70,0,84,0,95,
0,83,0,72,0,
73,0,70,0,84,
0,1,40,1,1,
2,0,1,1153,237,
18,1,1153,238,20,
239,4,24,83,0,
76,0,65,0,83,
0,72,0,95,0,
69,0,81,0,85,
0,65,0,76,0,
83,0,1,9,1,
1,2,0,1,79,
240,18,1,79,241,
20,242,4,10,84,
0,73,0,76,0,
68,0,69,0,1,
36,1,1,2,0,
1,1195,243,18,1,
1195,187,2,0,1,
82,244,18,1,82,
187,2,0,1,1123,
245,18,1,1123,187,
2,0,1,85,246,
18,1,85,247,20,
248,4,26,83,0,
84,0,82,0,79,
0,75,0,69,0,
95,0,83,0,84,
0,82,0,79,0,
75,0,69,0,1,
39,1,1,2,0,
1,2547,249,18,1,
2547,250,20,251,4,
64,73,0,110,0,
116,0,82,0,111,
0,116,0,82,0,
111,0,116,0,65,
0,114,0,103,0,
117,0,109,0,101,
0,110,0,116,0,
68,0,101,0,99,
0,108,0,97,0,
114,0,97,0,116,
0,105,0,111,0,
110,0,76,0,105,
0,115,0,116,0,
1,115,1,2,2,
0,1,89,252,18,
1,89,253,20,254,
4,10,77,0,73,
0,78,0,85,0,
83,0,1,19,1,
1,2,0,1,2318,
255,18,1,2318,146,
2,0,1,2788,256,
18,1,2788,187,2,
0,1,93,257,18,
1,93,187,2,0,
1,97,258,18,1,
97,259,20,260,4,
14,65,0,77,0,
80,0,95,0,65,
0,77,0,80,0,
1,38,1,1,2,
0,1,102,261,18,
1,102,262,20,263,
4,22,69,0,88,
0,67,0,76,0,
65,0,77,0,65,
0,84,0,73,0,
79,0,78,0,1,
37,1,1,2,0,
1,1775,264,18,1,
1775,162,2,0,1,
107,265,18,1,107,
187,2,0,1,2337,
266,18,1,2337,162,
2,0,1,1224,267,
18,1,1224,179,2,
0,1,1225,268,18,
1,1225,269,20,270,
4,24,77,0,73,
0,78,0,85,0,
83,0,95,0,69,
0,81,0,85,0,
65,0,76,0,83,
0,1,7,1,1,
2,0,1,112,271,
18,1,112,272,20,
273,4,28,71,0,
82,0,69,0,65,
0,84,0,69,0,
82,0,95,0,69,
0,81,0,85,0,
65,0,76,0,83,
0,1,32,1,1,
2,0,1,1188,274,
18,1,1188,179,2,
0,1,1231,275,18,
1,1231,187,2,0,
1,118,276,18,1,
118,187,2,0,1,
1737,277,18,1,1737,
187,2,0,1,2818,
278,18,1,2818,146,
2,0,1,124,279,
18,1,124,280,20,
281,4,22,76,0,
69,0,83,0,83,
0,95,0,69,0,
81,0,85,0,65,
0,76,0,83,0,
1,31,1,1,2,
0,1,2657,282,18,
1,2657,165,2,0,
1,130,283,18,1,
130,187,2,0,1,
1803,284,18,1,1803,
285,20,286,4,18,
83,0,116,0,97,
0,116,0,101,0,
109,0,101,0,110,
0,116,0,1,134,
1,2,2,0,1,
1804,287,18,1,1804,
288,20,289,4,4,
68,0,79,0,1,
44,1,1,2,0,
1,2830,290,18,1,
2830,291,20,292,4,
12,83,0,116,0,
97,0,116,0,101,
0,115,0,1,100,
1,2,2,0,1,
2364,293,18,1,2364,
285,2,0,1,137,
294,18,1,137,295,
20,296,4,36,69,
0,88,0,67,0,
76,0,65,0,77,
0,65,0,84,0,
73,0,79,0,78,
0,95,0,69,0,
81,0,85,0,65,
0,76,0,83,0,
1,30,1,1,2,
0,1,2293,297,18,
1,2293,146,2,0,
1,1701,298,18,1,
1701,187,2,0,1,
1756,299,18,1,1756,
146,2,0,1,2527,
300,18,1,2527,132,
2,0,1,143,301,
18,1,143,187,2,
0,1,2299,302,18,
1,2299,187,2,0,
1,1260,303,18,1,
1260,179,2,0,1,
1261,304,18,1,1261,
305,20,306,4,22,
80,0,76,0,85,
0,83,0,95,0,
69,0,81,0,85,
0,65,0,76,0,
83,0,1,6,1,
1,2,0,1,2528,
307,18,1,2528,308,
20,309,4,28,86,
0,101,0,99,0,
68,0,101,0,99,
0,108,0,97,0,
114,0,97,0,116,
0,105,0,111,0,
110,0,1,121,1,
2,2,0,1,151,
310,18,1,151,311,
20,312,4,26,69,
0,81,0,85,0,
65,0,76,0,83,
0,95,0,69,0,
81,0,85,0,65,
0,76,0,83,0,
1,29,1,1,2,
0,1,1267,313,18,
1,1267,187,2,0,
1,2765,314,18,1,
2765,132,2,0,1,
157,315,18,1,157,
187,2,0,1,1773,
316,18,1,1773,149,
2,0,1,1832,317,
18,1,1832,285,2,
0,1,1833,318,18,
1,1833,319,20,320,
4,10,87,0,72,
0,73,0,76,0,
69,0,1,45,1,
1,2,0,1,1834,
321,18,1,1834,135,
2,0,1,166,322,
18,1,166,323,20,
324,4,20,76,0,
69,0,70,0,84,
0,95,0,65,0,
78,0,71,0,76,
0,69,0,1,25,
1,1,2,0,1,
1840,325,18,1,1840,
187,2,0,1,2779,
326,18,1,2779,327,
20,328,4,34,67,
0,111,0,109,0,
112,0,111,0,117,
0,110,0,100,0,
83,0,116,0,97,
0,116,0,101,0,
109,0,101,0,110,
0,116,0,1,132,
1,2,2,0,1,
172,329,18,1,172,
187,2,0,1,2335,
330,18,1,2335,149,
2,0,1,1296,331,
18,1,1296,179,2,
0,1,1297,332,18,
1,1297,333,20,334,
4,12,69,0,81,
0,85,0,65,0,
76,0,83,0,1,
15,1,1,2,0,
1,2413,335,18,1,
2413,336,20,337,4,
26,83,0,116,0,
97,0,116,0,101,
0,109,0,101,0,
110,0,116,0,76,
0,105,0,115,0,
116,0,1,133,1,
2,2,0,1,1859,
338,18,1,1859,162,
2,0,1,1860,339,
18,1,1860,146,2,
0,1,188,340,18,
1,188,187,2,0,
1,182,341,18,1,
182,342,20,343,4,
22,82,0,73,0,
71,0,72,0,84,
0,95,0,65,0,
78,0,71,0,76,
0,69,0,1,26,
1,1,2,0,1,
199,344,18,1,199,
345,20,346,4,10,
67,0,65,0,82,
0,69,0,84,0,
1,35,1,1,2,
0,1,1871,347,18,
1,1871,179,2,0,
1,1872,348,18,1,
1872,162,2,0,1,
1873,349,18,1,1873,
146,2,0,1,1875,
350,18,1,1875,319,
2,0,1,205,351,
18,1,205,187,2,
0,1,2581,352,18,
1,2581,135,2,0,
1,1882,353,18,1,
1882,187,2,0,1,
2227,354,18,1,2227,
285,2,0,1,2590,
355,18,1,2590,140,
2,0,1,217,356,
18,1,217,357,20,
358,4,12,83,0,
84,0,82,0,79,
0,75,0,69,0,
1,34,1,1,2,
0,1,1332,359,18,
1,1332,179,2,0,
1,1335,360,18,1,
1335,182,2,0,1,
223,361,18,1,223,
187,2,0,1,1341,
362,18,1,1341,187,
2,0,1,1901,363,
18,1,1901,162,2,
0,1,1303,364,18,
1,1303,187,2,0,
1,2837,365,18,1,
2837,209,2,0,1,
2838,366,18,1,2838,
212,2,0,1,2462,
367,18,1,2462,285,
2,0,1,236,368,
18,1,236,369,20,
370,4,6,65,0,
77,0,80,0,1,
33,1,1,2,0,
1,2466,371,18,1,
2466,327,2,0,1,
2467,372,18,1,2467,
159,2,0,1,2468,
373,18,1,2468,374,
20,375,4,10,83,
0,84,0,65,0,
84,0,69,0,1,
48,1,1,2,0,
1,2469,376,18,1,
2469,132,2,0,1,
242,377,18,1,242,
187,2,0,1,2471,
378,18,1,2471,379,
20,380,4,26,67,
0,79,0,78,0,
84,0,82,0,79,
0,76,0,95,0,
69,0,86,0,69,
0,78,0,84,0,
1,65,1,1,2,
0,1,2472,381,18,
1,2472,382,20,383,
4,30,65,0,84,
0,95,0,84,0,
65,0,82,0,71,
0,69,0,84,0,
95,0,69,0,86,
0,69,0,78,0,
84,0,1,59,1,
1,2,0,1,2473,
384,18,1,2473,385,
20,386,4,38,65,
0,84,0,95,0,
82,0,79,0,84,
0,95,0,84,0,
65,0,82,0,71,
0,69,0,84,0,
95,0,69,0,86,
0,69,0,78,0,
84,0,1,58,1,
1,2,0,1,2474,
387,18,1,2474,388,
20,389,4,52,76,
0,65,0,78,0,
68,0,95,0,67,
0,79,0,76,0,
76,0,73,0,83,
0,73,0,79,0,
78,0,95,0,83,
0,84,0,65,0,
82,0,84,0,95,
0,69,0,86,0,
69,0,78,0,84,
0,1,71,1,1,
2,0,1,2475,390,
18,1,2475,391,20,
392,4,48,76,0,
65,0,78,0,68,
0,95,0,67,0,
79,0,76,0,76,
0,73,0,83,0,
73,0,79,0,78,
0,95,0,69,0,
78,0,68,0,95,
0,69,0,86,0,
69,0,78,0,84,
0,1,70,1,1,
2,0,1,2476,393,
18,1,2476,394,20,
395,4,40,76,0,
65,0,78,0,68,
0,95,0,67,0,
79,0,76,0,76,
0,73,0,83,0,
73,0,79,0,78,
0,95,0,69,0,
86,0,69,0,78,
0,84,0,1,69,
1,1,2,0,1,
2477,396,18,1,2477,
397,20,398,4,34,
84,0,79,0,85,
0,67,0,72,0,
95,0,83,0,84,
0,65,0,82,0,
84,0,95,0,69,
0,86,0,69,0,
78,0,84,0,1,
89,1,1,2,0,
1,2478,399,18,1,
2478,400,20,401,4,
30,84,0,79,0,
85,0,67,0,72,
0,95,0,69,0,
78,0,68,0,95,
0,69,0,86,0,
69,0,78,0,84,
0,1,90,1,1,
2,0,1,2479,402,
18,1,2479,403,20,
404,4,22,84,0,
79,0,85,0,67,
0,72,0,95,0,
69,0,86,0,69,
0,78,0,84,0,
1,88,1,1,2,
0,1,2480,405,18,
1,2480,406,20,407,
4,24,83,0,69,
0,78,0,83,0,
79,0,82,0,95,
0,69,0,86,0,
69,0,78,0,84,
0,1,84,1,1,
2,0,1,2481,408,
18,1,2481,409,20,
410,4,52,82,0,
85,0,78,0,95,
0,84,0,73,0,
77,0,69,0,95,
0,80,0,69,0,
82,0,77,0,73,
0,83,0,83,0,
73,0,79,0,78,
0,83,0,95,0,
69,0,86,0,69,
0,78,0,84,0,
1,83,1,1,2,
0,1,2482,411,18,
1,2482,412,20,413,
4,24,79,0,78,
0,95,0,82,0,
69,0,90,0,95,
0,69,0,86,0,
69,0,78,0,84,
0,1,81,1,1,
2,0,1,2483,414,
18,1,2483,415,20,
416,4,42,67,0,
79,0,76,0,76,
0,73,0,83,0,
73,0,79,0,78,
0,95,0,83,0,
84,0,65,0,82,
0,84,0,95,0,
69,0,86,0,69,
0,78,0,84,0,
1,64,1,1,2,
0,1,256,417,18,
1,256,418,20,419,
4,14,80,0,69,
0,82,0,67,0,
69,0,78,0,84,
0,1,22,1,1,
2,0,1,1371,420,
18,1,1371,238,2,
0,1,2486,421,18,
1,2486,422,20,423,
4,26,67,0,72,
0,65,0,78,0,
71,0,69,0,68,
0,95,0,69,0,
86,0,69,0,78,
0,84,0,1,61,
1,1,2,0,1,
2487,424,18,1,2487,
425,20,426,4,32,
79,0,66,0,74,
0,69,0,67,0,
84,0,95,0,82,
0,69,0,90,0,
95,0,69,0,86,
0,69,0,78,0,
84,0,1,80,1,
1,2,0,1,1931,
427,18,1,1931,285,
2,0,1,1932,428,
18,1,1932,429,20,
430,4,4,73,0,
70,0,1,42,1,
1,2,0,1,262,
431,18,1,262,187,
2,0,1,1377,432,
18,1,1377,187,2,
0,1,2492,433,18,
1,2492,434,20,435,
4,30,78,0,79,
0,95,0,83,0,
69,0,78,0,83,
0,79,0,82,0,
95,0,69,0,86,
0,69,0,78,0,
84,0,1,77,1,
1,2,0,1,1876,
436,18,1,1876,135,
2,0,1,2494,437,
18,1,2494,438,20,
439,4,32,77,0,
79,0,86,0,73,
0,78,0,71,0,
95,0,69,0,78,
0,68,0,95,0,
69,0,86,0,69,
0,78,0,84,0,
1,75,1,1,2,
0,1,2495,440,18,
1,2495,441,20,442,
4,32,83,0,84,
0,65,0,84,0,
69,0,95,0,69,
0,88,0,73,0,
84,0,95,0,69,
0,86,0,69,0,
78,0,84,0,1,
86,1,1,2,0,
1,1939,443,18,1,
1939,187,2,0,1,
2497,444,18,1,2497,
445,20,446,4,36,
72,0,84,0,84,
0,80,0,95,0,
82,0,69,0,81,
0,85,0,69,0,
83,0,84,0,95,
0,69,0,86,0,
69,0,78,0,84,
0,1,91,1,1,
2,0,1,827,447,
18,1,827,187,2,
0,1,2499,448,18,
1,2499,449,20,450,
4,22,77,0,79,
0,78,0,69,0,
89,0,95,0,69,
0,86,0,69,0,
78,0,84,0,1,
74,1,1,2,0,
1,2500,451,18,1,
2500,452,20,453,4,
24,76,0,73,0,
83,0,84,0,69,
0,78,0,95,0,
69,0,86,0,69,
0,78,0,84,0,
1,73,1,1,2,
0,1,2501,454,18,
1,2501,455,20,456,
4,36,76,0,73,
0,78,0,75,0,
95,0,77,0,69,
0,83,0,83,0,
65,0,71,0,69,
0,95,0,69,0,
86,0,69,0,78,
0,84,0,1,72,
1,1,2,0,1,
2502,457,18,1,2502,
458,20,459,4,38,
72,0,84,0,84,
0,80,0,95,0,
82,0,69,0,83,
0,80,0,79,0,
78,0,83,0,69,
0,95,0,69,0,
86,0,69,0,78,
0,84,0,1,68,
1,1,2,0,1,
2503,460,18,1,2503,
461,20,462,4,22,
69,0,77,0,65,
0,73,0,76,0,
95,0,69,0,86,
0,69,0,78,0,
84,0,1,67,1,
1,2,0,1,2504,
463,18,1,2504,464,
20,465,4,32,68,
0,65,0,84,0,
65,0,83,0,69,
0,82,0,86,0,
69,0,82,0,95,
0,69,0,86,0,
69,0,78,0,84,
0,1,66,1,1,
2,0,1,277,466,
18,1,277,467,20,
468,4,10,83,0,
76,0,65,0,83,
0,72,0,1,21,
1,1,2,0,1,
2506,469,18,1,2506,
135,2,0,1,2507,
470,18,1,2507,117,
2,0,1,2508,471,
18,1,2508,132,2,
0,1,2509,472,18,
1,2509,473,20,474,
4,28,75,0,101,
0,121,0,68,0,
101,0,99,0,108,
0,97,0,114,0,
97,0,116,0,105,
0,111,0,110,0,
1,119,1,2,2,
0,1,2510,475,18,
1,2510,143,2,0,
1,283,476,18,1,
283,187,2,0,1,
2512,477,18,1,2512,
132,2,0,1,2513,
478,18,1,2513,479,
20,480,4,28,73,
0,110,0,116,0,
68,0,101,0,99,
0,108,0,97,0,
114,0,97,0,116,
0,105,0,111,0,
110,0,1,120,1,
2,2,0,1,2514,
481,18,1,2514,143,
2,0,1,1958,482,
18,1,1958,162,2,
0,1,2516,483,18,
1,2516,479,2,0,
1,2517,484,18,1,
2517,485,20,486,4,
64,75,0,101,0,
121,0,73,0,110,
0,116,0,73,0,
110,0,116,0,65,
0,114,0,103,0,
117,0,109,0,101,
0,110,0,116,0,
68,0,101,0,99,
0,108,0,97,0,
114,0,97,0,116,
0,105,0,111,0,
110,0,76,0,105,
0,115,0,116,0,
1,117,1,2,2,
0,1,2518,487,18,
1,2518,162,2,0,
1,1406,488,18,1,
1406,179,2,0,1,
1407,489,18,1,1407,
232,2,0,1,2522,
490,18,1,2522,135,
2,0,1,2524,491,
18,1,2524,479,2,
0,1,2525,492,18,
1,2525,143,2,0,
1,2526,493,18,1,
2526,114,2,0,1,
299,494,18,1,299,
495,20,496,4,8,
83,0,84,0,65,
0,82,0,1,20,
1,1,2,0,1,
1370,497,18,1,1370,
179,2,0,1,2529,
498,18,1,2529,143,
2,0,1,2531,499,
18,1,2531,308,2,
0,1,2532,500,18,
1,2532,501,20,502,
4,64,73,0,110,
0,116,0,86,0,
101,0,99,0,86,
0,101,0,99,0,
65,0,114,0,103,
0,117,0,109,0,
101,0,110,0,116,
0,68,0,101,0,
99,0,108,0,97,
0,114,0,97,0,
116,0,105,0,111,
0,110,0,76,0,
105,0,115,0,116,
0,1,116,1,2,
2,0,1,305,503,
18,1,305,187,2,
0,1,2535,504,18,
1,2535,327,2,0,
1,2458,505,18,1,
2458,285,2,0,1,
2459,506,18,1,2459,
507,20,508,4,22,
82,0,73,0,71,
0,72,0,84,0,
95,0,66,0,82,
0,65,0,67,0,
69,0,1,13,1,
1,2,0,1,2539,
509,18,1,2539,479,
2,0,1,2540,510,
18,1,2540,143,2,
0,1,2541,511,18,
1,2541,111,2,0,
1,2542,512,18,1,
2542,132,2,0,1,
2464,513,18,1,2464,
507,2,0,1,2544,
514,18,1,2544,143,
2,0,1,1989,515,
18,1,1989,285,2,
0,1,1990,516,18,
1,1990,517,20,518,
4,8,69,0,76,
0,83,0,69,0,
1,43,1,1,2,
0,1,2548,519,18,
1,2548,162,2,0,
1,2470,520,18,1,
2470,165,2,0,1,
322,521,18,1,322,
253,2,0,1,2551,
522,18,1,2551,523,
20,524,4,28,86,
0,101,0,99,0,
116,0,111,0,114,
0,65,0,114,0,
103,0,69,0,118,
0,101,0,110,0,
116,0,1,128,1,
2,2,0,1,1933,
525,18,1,1933,135,
2,0,1,883,526,
18,1,883,187,2,
0,1,2555,527,18,
1,2555,528,20,529,
4,58,86,0,101,
0,99,0,116,0,
111,0,114,0,65,
0,114,0,103,0,
117,0,109,0,101,
0,110,0,116,0,
68,0,101,0,99,
0,108,0,97,0,
114,0,97,0,116,
0,105,0,111,0,
110,0,76,0,105,
0,115,0,116,0,
1,114,1,2,2,
0,1,328,530,18,
1,328,187,2,0,
1,1443,531,18,1,
1443,269,2,0,1,
2558,532,18,1,2558,
327,2,0,1,2559,
533,18,1,2559,534,
20,535,4,22,73,
0,110,0,116,0,
65,0,114,0,103,
0,69,0,118,0,
101,0,110,0,116,
0,1,127,1,2,
2,0,1,2560,536,
18,1,2560,135,2,
0,1,2562,537,18,
1,2562,479,2,0,
1,1449,538,18,1,
1449,187,2,0,1,
2485,539,18,1,2485,
540,20,541,4,30,
67,0,79,0,76,
0,76,0,73,0,
83,0,73,0,79,
0,78,0,95,0,
69,0,86,0,69,
0,78,0,84,0,
1,62,1,1,2,
0,1,2566,542,18,
1,2566,327,2,0,
1,2488,543,18,1,
2488,544,20,545,4,
24,65,0,84,0,
84,0,65,0,67,
0,72,0,95,0,
69,0,86,0,69,
0,78,0,84,0,
1,60,1,1,2,
0,1,2489,546,18,
1,2489,547,20,548,
4,22,84,0,73,
0,77,0,69,0,
82,0,95,0,69,
0,86,0,69,0,
78,0,84,0,1,
87,1,1,2,0,
1,2490,549,18,1,
2490,550,20,551,4,
38,78,0,79,0,
84,0,95,0,65,
0,84,0,95,0,
84,0,65,0,82,
0,71,0,69,0,
84,0,95,0,69,
0,86,0,69,0,
78,0,84,0,1,
79,1,1,2,0,
1,2491,552,18,1,
2491,553,20,554,4,
46,78,0,79,0,
84,0,95,0,65,
0,84,0,95,0,
82,0,79,0,84,
0,95,0,84,0,
65,0,82,0,71,
0,69,0,84,0,
95,0,69,0,86,
0,69,0,78,0,
84,0,1,78,1,
1,2,0,1,2571,
555,18,1,2571,556,
20,557,4,52,75,
0,101,0,121,0,
65,0,114,0,103,
0,117,0,109,0,
101,0,110,0,116,
0,68,0,101,0,
99,0,108,0,97,
0,114,0,97,0,
116,0,105,0,111,
0,110,0,76,0,
105,0,115,0,116,
0,1,112,1,2,
2,0,1,2493,558,
18,1,2493,559,20,
560,4,36,77,0,
79,0,86,0,73,
0,78,0,71,0,
95,0,83,0,84,
0,65,0,82,0,
84,0,95,0,69,
0,86,0,69,0,
78,0,84,0,1,
76,1,1,2,0,
1,1413,561,18,1,
1413,187,2,0,1,
346,562,18,1,346,
563,20,564,4,8,
80,0,76,0,85,
0,83,0,1,18,
1,1,2,0,1,
2575,565,18,1,2575,
566,20,567,4,24,
86,0,111,0,105,
0,100,0,65,0,
114,0,103,0,69,
0,118,0,101,0,
110,0,116,0,1,
125,1,2,2,0,
1,2496,568,18,1,
2496,569,20,570,4,
34,83,0,84,0,
65,0,84,0,69,
0,95,0,69,0,
78,0,84,0,82,
0,89,0,95,0,
69,0,86,0,69,
0,78,0,84,0,
1,85,1,1,2,
0,1,2577,571,18,
1,2577,162,2,0,
1,2021,572,18,1,
2021,285,2,0,1,
2022,573,18,1,2022,
374,2,0,1,352,
574,18,1,352,187,
2,0,1,2024,575,
18,1,2024,132,2,
0,1,2025,576,18,
1,2025,577,20,578,
4,8,74,0,85,
0,77,0,80,0,
1,49,1,1,2,
0,1,2026,579,18,
1,2026,132,2,0,
1,2027,580,18,1,
2027,581,20,582,4,
4,65,0,84,0,
1,23,1,1,2,
0,1,2028,583,18,
1,2028,132,2,0,
1,2029,584,18,1,
2029,327,2,0,1,
2030,585,18,1,2030,
586,20,587,4,14,
70,0,111,0,114,
0,76,0,111,0,
111,0,112,0,1,
145,1,2,2,0,
1,2031,588,18,1,
2031,589,20,590,4,
32,68,0,111,0,
87,0,104,0,105,
0,108,0,101,0,
83,0,116,0,97,
0,116,0,101,0,
109,0,101,0,110,
0,116,0,1,144,
1,2,2,0,1,
2032,591,18,1,2032,
592,20,593,4,28,
87,0,104,0,105,
0,108,0,101,0,
83,0,116,0,97,
0,116,0,101,0,
109,0,101,0,110,
0,116,0,1,143,
1,2,2,0,1,
2033,594,18,1,2033,
595,20,596,4,22,
73,0,102,0,83,
0,116,0,97,0,
116,0,101,0,109,
0,101,0,110,0,
116,0,1,142,1,
2,2,0,1,2034,
597,18,1,2034,598,
20,599,4,22,83,
0,116,0,97,0,
116,0,101,0,67,
0,104,0,97,0,
110,0,103,0,101,
0,1,141,1,2,
2,0,1,1478,600,
18,1,1478,179,2,
0,1,1479,601,18,
1,1479,305,2,0,
1,2037,602,18,1,
2037,146,2,0,1,
2038,603,18,1,2038,
604,20,605,4,18,
74,0,117,0,109,
0,112,0,76,0,
97,0,98,0,101,
0,108,0,1,139,
1,2,2,0,1,
2039,606,18,1,2039,
146,2,0,1,2040,
607,18,1,2040,608,
20,609,4,30,82,
0,101,0,116,0,
117,0,114,0,110,
0,83,0,116,0,
97,0,116,0,101,
0,109,0,101,0,
110,0,116,0,1,
138,1,2,2,0,
1,2041,610,18,1,
2041,146,2,0,1,
1485,611,18,1,1485,
187,2,0,1,372,
612,18,1,372,199,
2,0,1,373,613,
18,1,373,132,2,
0,1,374,614,18,
1,374,195,2,0,
1,375,615,18,1,
375,132,2,0,1,
376,616,18,1,376,
202,2,0,1,377,
617,18,1,377,132,
2,0,1,378,618,
18,1,378,195,2,
0,1,379,619,18,
1,379,132,2,0,
1,380,620,18,1,
380,621,20,622,4,
16,67,0,111,0,
110,0,115,0,116,
0,97,0,110,0,
116,0,1,151,1,
2,2,0,1,381,
623,18,1,381,323,
2,0,1,371,624,
18,1,371,625,20,
626,4,24,70,0,
117,0,110,0,99,
0,116,0,105,0,
111,0,110,0,67,
0,97,0,108,0,
108,0,1,147,1,
2,2,0,1,942,
627,18,1,942,187,
2,0,1,2533,628,
18,1,2533,162,2,
0,1,387,629,18,
1,387,187,2,0,
1,2536,630,18,1,
2536,631,20,632,4,
34,73,0,110,0,
116,0,82,0,111,
0,116,0,82,0,
111,0,116,0,65,
0,114,0,103,0,
69,0,118,0,101,
0,110,0,116,0,
1,129,1,2,2,
0,1,2537,633,18,
1,2537,135,2,0,
1,2543,634,18,1,
2543,635,20,636,4,
28,82,0,111,0,
116,0,68,0,101,
0,99,0,108,0,
97,0,114,0,97,
0,116,0,105,0,
111,0,110,0,1,
122,1,2,2,0,
1,2546,637,18,1,
2546,635,2,0,1,
1514,638,18,1,1514,
179,2,0,1,1515,
639,18,1,1515,333,
2,0,1,2074,640,
18,1,2074,179,2,
0,1,2075,641,18,
1,2075,162,2,0,
1,2552,642,18,1,
2552,135,2,0,1,
406,643,18,1,406,
143,2,0,1,1521,
644,18,1,1521,187,
2,0,1,2556,645,
18,1,2556,162,2,
0,1,2639,646,18,
1,2639,647,20,648,
4,44,75,0,101,
0,121,0,73,0,
110,0,116,0,73,
0,110,0,116,0,
65,0,114,0,103,
0,83,0,116,0,
97,0,116,0,101,
0,69,0,118,0,
101,0,110,0,116,
0,1,110,1,2,
2,0,1,412,649,
18,1,412,187,2,
0,1,2641,650,18,
1,2641,168,2,0,
1,2484,651,18,1,
2484,652,20,653,4,
38,67,0,79,0,
76,0,76,0,73,
0,83,0,73,0,
79,0,78,0,95,
0,69,0,78,0,
68,0,95,0,69,
0,86,0,69,0,
78,0,84,0,1,
63,1,1,2,0,
1,2643,654,18,1,
2643,174,2,0,1,
2644,655,18,1,2644,
656,20,657,4,32,
75,0,101,0,121,
0,65,0,114,0,
103,0,83,0,116,
0,97,0,116,0,
101,0,69,0,118,
0,101,0,110,0,
116,0,1,105,1,
2,2,0,1,2023,
658,18,1,2023,659,
20,660,4,26,68,
0,69,0,70,0,
65,0,85,0,76,
0,84,0,95,0,
83,0,84,0,65,
0,84,0,69,0,
1,47,1,1,2,
0,1,2564,661,18,
1,2564,162,2,0,
1,2647,662,18,1,
2647,507,2,0,1,
2648,663,18,1,2648,
647,2,0,1,2567,
664,18,1,2567,665,
20,666,4,22,75,
0,101,0,121,0,
65,0,114,0,103,
0,69,0,118,0,
101,0,110,0,116,
0,1,126,1,2,
2,0,1,1442,667,
18,1,1442,179,2,
0,1,2651,668,18,
1,2651,669,20,670,
4,38,86,0,101,
0,99,0,116,0,
111,0,114,0,65,
0,114,0,103,0,
83,0,116,0,97,
0,116,0,101,0,
69,0,118,0,101,
0,110,0,116,0,
1,107,1,2,2,
0,1,2570,671,18,
1,2570,473,2,0,
1,2653,672,18,1,
2653,656,2,0,1,
2572,673,18,1,2572,
162,2,0,1,2655,
674,18,1,2655,156,
2,0,1,2574,675,
18,1,2574,327,2,
0,1,2035,676,18,
1,2035,146,2,0,
1,2036,677,18,1,
2036,678,20,679,4,
26,74,0,117,0,
109,0,112,0,83,
0,116,0,97,0,
116,0,101,0,109,
0,101,0,110,0,
116,0,1,140,1,
2,2,0,1,431,
680,18,1,431,143,
2,0,1,2579,681,
18,1,2579,327,2,
0,1,2105,682,18,
1,2105,285,2,0,
1,2106,683,18,1,
2106,517,2,0,1,
1550,684,18,1,1550,
179,2,0,1,437,
685,18,1,437,187,
2,0,1,2044,686,
18,1,2044,687,20,
688,4,28,69,0,
109,0,112,0,116,
0,121,0,83,0,
116,0,97,0,116,
0,101,0,109,0,
101,0,110,0,116,
0,1,135,1,2,
2,0,1,2045,689,
18,1,2045,146,2,
0,1,1555,690,18,
1,1555,187,2,0,
1,2511,691,18,1,
2511,126,2,0,1,
1001,692,18,1,1001,
625,2,0,1,1002,
693,18,1,1002,621,
2,0,1,447,694,
18,1,447,342,2,
0,1,2594,695,18,
1,2594,327,2,0,
1,2596,696,18,1,
2596,697,20,698,4,
18,83,0,116,0,
97,0,116,0,101,
0,66,0,111,0,
100,0,121,0,1,
102,1,2,2,0,
1,2520,699,18,1,
2520,327,2,0,1,
1010,700,18,1,1010,
179,2,0,1,1011,
701,18,1,1011,162,
2,0,1,1012,702,
18,1,1012,187,2,
0,1,1013,703,18,
1,1013,162,2,0,
1,459,704,18,1,
459,705,20,706,4,
24,76,0,69,0,
70,0,84,0,95,
0,66,0,82,0,
65,0,67,0,75,
0,69,0,84,0,
1,27,1,1,2,
0,1,1574,707,18,
1,1574,146,2,0,
1,461,708,18,1,
461,709,20,710,4,
24,65,0,114,0,
103,0,117,0,109,
0,101,0,110,0,
116,0,76,0,105,
0,115,0,116,0,
1,148,1,2,2,
0,1,462,711,18,
1,462,143,2,0,
1,464,712,18,1,
464,713,20,714,4,
16,65,0,114,0,
103,0,117,0,109,
0,101,0,110,0,
116,0,1,149,1,
2,2,0,1,2136,
715,18,1,2136,285,
2,0,1,1585,716,
18,1,1585,717,20,
718,4,12,82,0,
69,0,84,0,85,
0,82,0,78,0,
1,50,1,1,2,
0,1,2700,719,18,
1,2700,697,2,0,
1,476,720,18,1,
476,721,20,722,4,
30,83,0,84,0,
82,0,73,0,78,
0,71,0,95,0,
67,0,79,0,78,
0,83,0,84,0,
65,0,78,0,84,
0,1,3,1,1,
2,0,1,477,723,
18,1,477,724,20,
725,4,28,70,0,
76,0,79,0,65,
0,84,0,95,0,
67,0,79,0,78,
0,83,0,84,0,
65,0,78,0,84,
0,1,95,1,1,
2,0,1,478,726,
18,1,478,727,20,
728,4,40,72,0,
69,0,88,0,95,
0,73,0,78,0,
84,0,69,0,71,
0,69,0,82,0,
95,0,67,0,79,
0,78,0,83,0,
84,0,65,0,78,
0,84,0,1,94,
1,1,2,0,1,
479,729,18,1,479,
730,20,731,4,32,
73,0,78,0,84,
0,69,0,71,0,
69,0,82,0,95,
0,67,0,79,0,
78,0,83,0,84,
0,65,0,78,0,
84,0,1,93,1,
1,2,0,1,480,
732,18,1,480,733,
20,734,4,26,82,
0,73,0,71,0,
72,0,84,0,95,
0,66,0,82,0,
65,0,67,0,75,
0,69,0,84,0,
1,28,1,1,2,
0,1,481,735,18,
1,481,713,2,0,
1,2550,736,18,1,
2550,327,2,0,1,
2554,737,18,1,2554,
308,2,0,1,1048,
738,18,1,1048,187,
2,0,1,2640,739,
18,1,2640,740,20,
741,4,44,73,0,
110,0,116,0,86,
0,101,0,99,0,
86,0,101,0,99,
0,65,0,114,0,
103,0,83,0,116,
0,97,0,116,0,
101,0,69,0,118,
0,101,0,110,0,
116,0,1,109,1,
2,2,0,1,2642,
742,18,1,2642,669,
2,0,1,2563,743,
18,1,2563,744,20,
745,4,52,73,0,
110,0,116,0,65,
0,114,0,103,0,
117,0,109,0,101,
0,110,0,116,0,
68,0,101,0,99,
0,108,0,97,0,
114,0,97,0,116,
0,105,0,111,0,
110,0,76,0,105,
0,115,0,116,0,
1,113,1,2,2,
0,1,2042,746,18,
1,2042,747,20,748,
4,20,65,0,115,
0,115,0,105,0,
103,0,110,0,109,
0,101,0,110,0,
116,0,1,136,1,
2,2,0,1,2043,
749,18,1,2043,146,
2,0,1,2568,750,
18,1,2568,135,2,
0,1,2649,751,18,
1,2649,740,2,0,
1,1620,752,18,1,
1620,179,2,0,1,
1621,753,18,1,1621,
159,2,0,1,1622,
754,18,1,1622,333,
2,0,1,509,755,
18,1,509,143,2,
0,1,2498,756,18,
1,2498,757,20,758,
4,34,82,0,69,
0,77,0,79,0,
84,0,69,0,95,
0,68,0,65,0,
84,0,65,0,95,
0,69,0,86,0,
69,0,78,0,84,
0,1,82,1,1,
2,0,1,2576,759,
18,1,2576,135,2,
0,1,2656,760,18,
1,2656,659,2,0,
1,1628,761,18,1,
1628,187,2,0,1,
515,762,18,1,515,
187,2,0,1,2580,
763,18,1,2580,764,
20,765,4,10,69,
0,118,0,101,0,
110,0,116,0,1,
124,1,2,2,0,
1,2505,766,18,1,
2505,767,20,768,4,
34,75,0,101,0,
121,0,73,0,110,
0,116,0,73,0,
110,0,116,0,65,
0,114,0,103,0,
69,0,118,0,101,
0,110,0,116,0,
1,131,1,2,2,
0,1,2751,769,18,
1,2751,507,2,0,
1,525,770,18,1,
525,342,2,0,1,
2197,771,18,1,2197,
179,2,0,1,2198,
772,18,1,2198,162,
2,0,1,1591,773,
18,1,1591,187,2,
0,1,2592,774,18,
1,2592,162,2,0,
1,2760,775,18,1,
2760,291,2,0,1,
2521,776,18,1,2521,
777,20,778,4,34,
73,0,110,0,116,
0,86,0,101,0,
99,0,86,0,101,
0,99,0,65,0,
114,0,103,0,69,
0,118,0,101,0,
110,0,116,0,1,
130,1,2,2,0,
1,2763,779,18,1,
2763,780,20,781,4,
10,83,0,116,0,
97,0,116,0,101,
0,1,101,1,2,
2,0,1,2764,782,
18,1,2764,780,2,
0,1,1094,783,18,
1,1094,709,2,0,
1,2766,784,18,1,
2766,135,2,0,1,
1096,785,18,1,1096,
162,2,0,1,1657,
786,18,1,1657,146,
2,0,1,1658,787,
18,1,1658,788,20,
789,4,6,70,0,
79,0,82,0,1,
46,1,1,2,0,
1,1659,790,18,1,
1659,135,2,0,1,
2775,791,18,1,2775,
140,2,0,1,2777,
792,18,1,2777,162,
2,0,1,1665,793,
18,1,1665,187,2,
0,1,2781,794,18,
1,2781,159,2,0,
1,2782,795,18,1,
2782,333,2,0,1,
1113,796,18,1,1113,
195,2,0,797,5,
0,798,5,379,1,
2,799,19,216,1,
2,800,5,6,1,
2764,801,17,802,15,
803,4,14,37,0,
83,0,116,0,97,
0,116,0,101,0,
115,0,1,-1,1,
5,804,20,805,4,
16,83,0,116,0,
97,0,116,0,101,
0,115,0,95,0,
49,0,1,176,1,
3,1,2,1,1,
806,22,1,11,1,
2751,807,17,808,15,
809,4,12,37,0,
83,0,116,0,97,
0,116,0,101,0,
1,-1,1,5,810,
20,811,4,14,83,
0,116,0,97,0,
116,0,101,0,95,
0,49,0,1,178,
1,3,1,5,1,
4,812,22,1,13,
1,2763,813,17,814,
15,803,1,-1,1,
5,815,20,816,4,
16,83,0,116,0,
97,0,116,0,101,
0,115,0,95,0,
50,0,1,177,1,
3,1,3,1,2,
817,22,1,12,1,
2830,818,17,819,15,
820,4,30,37,0,
76,0,83,0,76,
0,80,0,114,0,
111,0,103,0,114,
0,97,0,109,0,
82,0,111,0,111,
0,116,0,1,-1,
1,5,821,20,822,
4,32,76,0,83,
0,76,0,80,0,
114,0,111,0,103,
0,114,0,97,0,
109,0,82,0,111,
0,111,0,116,0,
95,0,49,0,1,
166,1,3,1,3,
1,2,823,22,1,
1,1,2647,824,17,
825,15,809,1,-1,
1,5,826,20,827,
4,14,83,0,116,
0,97,0,116,0,
101,0,95,0,50,
0,1,179,1,3,
1,6,1,5,828,
22,1,14,1,2760,
829,17,830,15,820,
1,-1,1,5,831,
20,832,4,32,76,
0,83,0,76,0,
80,0,114,0,111,
0,103,0,114,0,
97,0,109,0,82,
0,111,0,111,0,
116,0,95,0,50,
0,1,167,1,3,
1,2,1,1,833,
22,1,2,1,3,
834,19,722,1,3,
835,5,95,1,256,
836,16,0,720,1,
1261,837,16,0,720,
1,509,838,16,0,
720,1,1515,839,16,
0,720,1,2021,840,
17,841,15,842,4,
24,37,0,73,0,
102,0,83,0,116,
0,97,0,116,0,
101,0,109,0,101,
0,110,0,116,0,
1,-1,1,5,843,
20,844,4,26,73,
0,102,0,83,0,
116,0,97,0,116,
0,101,0,109,0,
101,0,110,0,116,
0,95,0,50,0,
1,240,1,3,1,
8,1,7,845,22,
1,76,1,1775,846,
16,0,720,1,2029,
847,17,848,15,849,
4,20,37,0,83,
0,116,0,97,0,
116,0,101,0,109,
0,101,0,110,0,
116,0,1,-1,1,
5,850,20,851,4,
24,83,0,116,0,
97,0,116,0,101,
0,109,0,101,0,
110,0,116,0,95,
0,49,0,51,0,
1,234,1,3,1,
2,1,1,852,22,
1,70,1,2030,853,
17,854,15,849,1,
-1,1,5,855,20,
856,4,24,83,0,
116,0,97,0,116,
0,101,0,109,0,
101,0,110,0,116,
0,95,0,49,0,
50,0,1,233,1,
3,1,2,1,1,
857,22,1,69,1,
2031,858,17,859,15,
849,1,-1,1,5,
860,20,861,4,24,
83,0,116,0,97,
0,116,0,101,0,
109,0,101,0,110,
0,116,0,95,0,
49,0,49,0,1,
232,1,3,1,2,
1,1,862,22,1,
68,1,2032,863,17,
864,15,849,1,-1,
1,5,865,20,866,
4,24,83,0,116,
0,97,0,116,0,
101,0,109,0,101,
0,110,0,116,0,
95,0,49,0,48,
0,1,231,1,3,
1,2,1,1,867,
22,1,67,1,2033,
868,17,869,15,849,
1,-1,1,5,870,
20,871,4,22,83,
0,116,0,97,0,
116,0,101,0,109,
0,101,0,110,0,
116,0,95,0,57,
0,1,230,1,3,
1,2,1,1,872,
22,1,66,1,277,
873,16,0,720,1,
2035,874,17,875,15,
849,1,-1,1,5,
876,20,877,4,22,
83,0,116,0,97,
0,116,0,101,0,
109,0,101,0,110,
0,116,0,95,0,
56,0,1,229,1,
3,1,3,1,2,
878,22,1,65,1,
2037,879,17,880,15,
849,1,-1,1,5,
881,20,882,4,22,
83,0,116,0,97,
0,116,0,101,0,
109,0,101,0,110,
0,116,0,95,0,
55,0,1,228,1,
3,1,3,1,2,
883,22,1,64,1,
2039,884,17,885,15,
849,1,-1,1,5,
886,20,887,4,22,
83,0,116,0,97,
0,116,0,101,0,
109,0,101,0,110,
0,116,0,95,0,
54,0,1,227,1,
3,1,3,1,2,
888,22,1,63,1,
32,889,16,0,720,
1,2041,890,17,891,
15,849,1,-1,1,
5,892,20,893,4,
22,83,0,116,0,
97,0,116,0,101,
0,109,0,101,0,
110,0,116,0,95,
0,53,0,1,226,
1,3,1,3,1,
2,894,22,1,62,
1,2293,895,16,0,
720,1,2043,896,17,
897,15,849,1,-1,
1,5,898,20,899,
4,22,83,0,116,
0,97,0,116,0,
101,0,109,0,101,
0,110,0,116,0,
95,0,51,0,1,
224,1,3,1,3,
1,2,900,22,1,
60,1,2045,901,17,
902,15,849,1,-1,
1,5,903,20,904,
4,22,83,0,116,
0,97,0,116,0,
101,0,109,0,101,
0,110,0,116,0,
95,0,49,0,1,
222,1,3,1,3,
1,2,905,22,1,
58,1,41,906,16,
0,720,1,1297,907,
16,0,720,1,43,
908,16,0,720,1,
1803,909,17,910,15,
911,4,16,37,0,
70,0,111,0,114,
0,76,0,111,0,
111,0,112,0,1,
-1,1,5,912,20,
913,4,18,70,0,
111,0,114,0,76,
0,111,0,111,0,
112,0,95,0,49,
0,1,247,1,3,
1,10,1,9,914,
22,1,83,1,1804,
915,16,0,720,1,
299,916,16,0,720,
1,52,917,16,0,
720,1,2318,918,16,
0,720,1,62,919,
16,0,720,1,2075,
920,16,0,720,1,
1574,921,17,922,15,
849,1,-1,1,5,
923,20,924,4,22,
83,0,116,0,97,
0,116,0,101,0,
109,0,101,0,110,
0,116,0,95,0,
52,0,1,225,1,
3,1,3,1,2,
925,22,1,61,1,
71,926,16,0,720,
1,76,927,16,0,
720,1,1834,928,16,
0,720,1,2337,929,
16,0,720,1,79,
930,16,0,720,1,
1335,931,16,0,720,
1,322,932,16,0,
720,1,85,933,16,
0,720,1,89,934,
16,0,720,1,346,
935,16,0,720,1,
2105,936,17,937,15,
842,1,-1,1,5,
938,20,939,4,26,
73,0,102,0,83,
0,116,0,97,0,
116,0,101,0,109,
0,101,0,110,0,
116,0,95,0,51,
0,1,241,1,3,
1,6,1,5,940,
22,1,77,1,2106,
941,16,0,720,1,
97,942,16,0,720,
1,1860,943,17,944,
15,945,4,34,37,
0,68,0,111,0,
87,0,104,0,105,
0,108,0,101,0,
83,0,116,0,97,
0,116,0,101,0,
109,0,101,0,110,
0,116,0,1,-1,
1,5,946,20,947,
4,36,68,0,111,
0,87,0,104,0,
105,0,108,0,101,
0,83,0,116,0,
97,0,116,0,101,
0,109,0,101,0,
110,0,116,0,95,
0,49,0,1,245,
1,3,1,8,1,
7,948,22,1,81,
1,2364,949,17,950,
15,911,1,-1,1,
5,951,20,952,4,
18,70,0,111,0,
114,0,76,0,111,
0,111,0,112,0,
95,0,50,0,1,
248,1,3,1,9,
1,8,953,22,1,
84,1,102,954,16,
0,720,1,2782,955,
16,0,720,1,112,
956,16,0,720,1,
1117,957,16,0,720,
1,1873,958,17,959,
15,945,1,-1,1,
5,960,20,961,4,
36,68,0,111,0,
87,0,104,0,105,
0,108,0,101,0,
83,0,116,0,97,
0,116,0,101,0,
109,0,101,0,110,
0,116,0,95,0,
50,0,1,246,1,
3,1,8,1,7,
962,22,1,82,1,
1876,963,16,0,720,
1,124,964,16,0,
720,1,2136,965,17,
966,15,842,1,-1,
1,5,967,20,968,
4,26,73,0,102,
0,83,0,116,0,
97,0,116,0,101,
0,109,0,101,0,
110,0,116,0,95,
0,52,0,1,242,
1,3,1,8,1,
7,969,22,1,78,
1,381,970,16,0,
720,1,525,971,16,
0,720,1,137,972,
16,0,720,1,1901,
973,16,0,720,1,
1153,974,16,0,720,
1,151,975,16,0,
720,1,1407,976,16,
0,720,1,1659,977,
16,0,720,1,2413,
978,16,0,720,1,
406,979,16,0,720,
1,1371,980,16,0,
720,1,166,981,16,
0,720,1,1622,982,
16,0,720,1,1931,
983,17,984,15,985,
4,30,37,0,87,
0,104,0,105,0,
108,0,101,0,83,
0,116,0,97,0,
116,0,101,0,109,
0,101,0,110,0,
116,0,1,-1,1,
5,986,20,987,4,
32,87,0,104,0,
105,0,108,0,101,
0,83,0,116,0,
97,0,116,0,101,
0,109,0,101,0,
110,0,116,0,95,
0,49,0,1,243,
1,3,1,6,1,
5,988,22,1,79,
1,1933,989,16,0,
720,1,431,990,16,
0,720,1,1585,991,
16,0,720,1,182,
992,16,0,720,1,
1189,993,16,0,720,
1,1443,994,16,0,
720,1,1695,995,16,
0,720,1,2198,996,
16,0,720,1,447,
997,16,0,720,1,
2458,998,17,999,15,
1000,4,28,37,0,
83,0,116,0,97,
0,116,0,101,0,
109,0,101,0,110,
0,116,0,76,0,
105,0,115,0,116,
0,1,-1,1,5,
1001,20,1002,4,30,
83,0,116,0,97,
0,116,0,101,0,
109,0,101,0,110,
0,116,0,76,0,
105,0,115,0,116,
0,95,0,50,0,
1,220,1,3,1,
3,1,2,1003,22,
1,56,1,2459,1004,
17,1005,15,1006,4,
36,37,0,67,0,
111,0,109,0,112,
0,111,0,117,0,
110,0,100,0,83,
0,116,0,97,0,
116,0,101,0,109,
0,101,0,110,0,
116,0,1,-1,1,
5,1007,20,1008,4,
38,67,0,111,0,
109,0,112,0,111,
0,117,0,110,0,
100,0,83,0,116,
0,97,0,116,0,
101,0,109,0,101,
0,110,0,116,0,
95,0,50,0,1,
218,1,3,1,4,
1,3,1009,22,1,
54,1,1958,1010,16,
0,720,1,2462,1011,
17,1012,15,1000,1,
-1,1,5,1013,20,
1014,4,30,83,0,
116,0,97,0,116,
0,101,0,109,0,
101,0,110,0,116,
0,76,0,105,0,
115,0,116,0,95,
0,49,0,1,219,
1,3,1,2,1,
1,1015,22,1,55,
1,1657,1016,17,1017,
15,849,1,-1,1,
5,1018,20,1019,4,
22,83,0,116,0,
97,0,116,0,101,
0,109,0,101,0,
110,0,116,0,95,
0,50,0,1,223,
1,3,1,3,1,
2,1020,22,1,59,
1,2464,1021,17,1022,
15,1006,1,-1,1,
5,1023,20,1024,4,
38,67,0,111,0,
109,0,112,0,111,
0,117,0,110,0,
100,0,83,0,116,
0,97,0,116,0,
101,0,109,0,101,
0,110,0,116,0,
95,0,49,0,1,
217,1,3,1,3,
1,2,1025,22,1,
53,1,199,1026,16,
0,720,1,459,1027,
16,0,720,1,462,
1028,16,0,720,1,
217,1029,16,0,720,
1,2227,1030,17,1031,
15,985,1,-1,1,
5,1032,20,1033,4,
32,87,0,104,0,
105,0,108,0,101,
0,83,0,116,0,
97,0,116,0,101,
0,109,0,101,0,
110,0,116,0,95,
0,50,0,1,244,
1,3,1,6,1,
5,1034,22,1,80,
1,1225,1035,16,0,
720,1,1479,1036,16,
0,720,1,1731,1037,
16,0,720,1,1989,
1038,17,1039,15,842,
1,-1,1,5,1040,
20,1041,4,26,73,
0,102,0,83,0,
116,0,97,0,116,
0,101,0,109,0,
101,0,110,0,116,
0,95,0,49,0,
1,239,1,3,1,
6,1,5,1042,22,
1,75,1,1990,1043,
16,0,720,1,236,
1044,16,0,720,1,
1756,1045,16,0,720,
1,4,1046,19,203,
1,4,1047,5,100,
1,256,1048,16,0,
616,1,1261,1049,16,
0,616,1,509,1050,
16,0,616,1,1515,
1051,16,0,616,1,
2021,840,1,1775,1052,
16,0,616,1,2029,
847,1,2030,853,1,
2031,858,1,2032,863,
1,2033,868,1,277,
1053,16,0,616,1,
2035,874,1,2037,879,
1,2039,884,1,32,
1054,16,0,616,1,
2041,890,1,2293,1055,
16,0,616,1,2043,
896,1,2045,901,1,
40,1056,16,0,205,
1,41,1057,16,0,
616,1,1297,1058,16,
0,616,1,43,1059,
16,0,616,1,44,
1060,16,0,205,1,
1803,909,1,1804,1061,
16,0,616,1,299,
1062,16,0,616,1,
47,1063,16,0,201,
1,52,1064,16,0,
616,1,2318,1065,16,
0,616,1,63,1066,
16,0,227,1,66,
1067,16,0,225,1,
2075,1068,16,0,616,
1,1574,921,1,71,
1069,16,0,616,1,
76,1070,16,0,616,
1,1834,1071,16,0,
616,1,2337,1072,16,
0,616,1,79,1073,
16,0,616,1,1335,
1074,16,0,616,1,
322,1075,16,0,616,
1,85,1076,16,0,
616,1,89,1077,16,
0,616,1,346,1078,
16,0,616,1,97,
1079,16,0,616,1,
2106,1080,16,0,616,
1,102,1081,16,0,
616,1,1860,943,1,
2364,949,1,2782,1082,
16,0,616,1,1114,
1083,16,0,201,1,
112,1084,16,0,616,
1,1117,1085,16,0,
616,1,1873,958,1,
1876,1086,16,0,616,
1,124,1087,16,0,
616,1,2136,965,1,
381,1088,16,0,616,
1,525,1089,16,0,
616,1,137,1090,16,
0,616,1,1901,1091,
16,0,616,1,1153,
1092,16,0,616,1,
151,1093,16,0,616,
1,1407,1094,16,0,
616,1,1659,1095,16,
0,616,1,2413,1096,
16,0,616,1,406,
1097,16,0,616,1,
1371,1098,16,0,616,
1,2105,936,1,166,
1099,16,0,616,1,
1622,1100,16,0,616,
1,1931,983,1,1933,
1101,16,0,616,1,
431,1102,16,0,616,
1,1585,1103,16,0,
616,1,182,1104,16,
0,616,1,1189,1105,
16,0,616,1,1443,
1106,16,0,616,1,
1695,1107,16,0,616,
1,2198,1108,16,0,
616,1,447,1109,16,
0,616,1,2458,998,
1,2459,1004,1,1958,
1110,16,0,616,1,
2462,1011,1,1657,1016,
1,2464,1021,1,199,
1111,16,0,616,1,
459,1112,16,0,616,
1,462,1113,16,0,
616,1,217,1114,16,
0,616,1,2227,1030,
1,1225,1115,16,0,
616,1,1479,1116,16,
0,616,1,1731,1117,
16,0,616,1,1989,
1038,1,1990,1118,16,
0,616,1,236,1119,
16,0,616,1,1756,
1120,16,0,616,1,
5,1121,19,200,1,
5,1122,5,100,1,
256,1123,16,0,612,
1,1261,1124,16,0,
612,1,509,1125,16,
0,612,1,1515,1126,
16,0,612,1,2021,
840,1,1775,1127,16,
0,612,1,2029,847,
1,2030,853,1,2031,
858,1,2032,863,1,
2033,868,1,277,1128,
16,0,612,1,2035,
874,1,2037,879,1,
2039,884,1,32,1129,
16,0,612,1,2041,
890,1,2293,1130,16,
0,612,1,2043,896,
1,2045,901,1,40,
1131,16,0,204,1,
41,1132,16,0,612,
1,1297,1133,16,0,
612,1,43,1134,16,
0,612,1,44,1135,
16,0,204,1,1803,
909,1,1804,1136,16,
0,612,1,299,1137,
16,0,612,1,47,
1138,16,0,198,1,
52,1139,16,0,612,
1,2318,1140,16,0,
612,1,63,1141,16,
0,226,1,66,1142,
16,0,224,1,2075,
1143,16,0,612,1,
1574,921,1,71,1144,
16,0,612,1,76,
1145,16,0,612,1,
1834,1146,16,0,612,
1,2337,1147,16,0,
612,1,79,1148,16,
0,612,1,1335,1149,
16,0,612,1,322,
1150,16,0,612,1,
85,1151,16,0,612,
1,89,1152,16,0,
612,1,346,1153,16,
0,612,1,97,1154,
16,0,612,1,2106,
1155,16,0,612,1,
102,1156,16,0,612,
1,1860,943,1,2364,
949,1,2782,1157,16,
0,612,1,1114,1158,
16,0,198,1,112,
1159,16,0,612,1,
1117,1160,16,0,612,
1,1873,958,1,1876,
1161,16,0,612,1,
124,1162,16,0,612,
1,2136,965,1,381,
1163,16,0,612,1,
525,1164,16,0,612,
1,137,1165,16,0,
612,1,1901,1166,16,
0,612,1,1153,1167,
16,0,612,1,151,
1168,16,0,612,1,
1407,1169,16,0,612,
1,1659,1170,16,0,
612,1,2413,1171,16,
0,612,1,406,1172,
16,0,612,1,1371,
1173,16,0,612,1,
2105,936,1,166,1174,
16,0,612,1,1622,
1175,16,0,612,1,
1931,983,1,1933,1176,
16,0,612,1,431,
1177,16,0,612,1,
1585,1178,16,0,612,
1,182,1179,16,0,
612,1,1189,1180,16,
0,612,1,1443,1181,
16,0,612,1,1695,
1182,16,0,612,1,
2198,1183,16,0,612,
1,447,1184,16,0,
612,1,2458,998,1,
2459,1004,1,1958,1185,
16,0,612,1,2462,
1011,1,1657,1016,1,
2464,1021,1,199,1186,
16,0,612,1,459,
1187,16,0,612,1,
462,1188,16,0,612,
1,217,1189,16,0,
612,1,2227,1030,1,
1225,1190,16,0,612,
1,1479,1191,16,0,
612,1,1731,1192,16,
0,612,1,1989,1038,
1,1990,1193,16,0,
612,1,236,1194,16,
0,612,1,1756,1195,
16,0,612,1,6,
1196,19,306,1,6,
1197,5,2,1,1114,
1198,16,0,304,1,
40,1199,16,0,601,
1,7,1200,19,270,
1,7,1201,5,2,
1,1114,1202,16,0,
268,1,40,1203,16,
0,531,1,8,1204,
19,233,1,8,1205,
5,2,1,1114,1206,
16,0,231,1,40,
1207,16,0,489,1,
9,1208,19,239,1,
9,1209,5,2,1,
1114,1210,16,0,237,
1,40,1211,16,0,
420,1,10,1212,19,
183,1,10,1213,5,
2,1,1114,1214,16,
0,181,1,40,1215,
16,0,360,1,11,
1216,19,147,1,11,
1217,5,146,1,1260,
1218,17,1219,15,1220,
4,34,37,0,83,
0,105,0,109,0,
112,0,108,0,101,
0,65,0,115,0,
115,0,105,0,103,
0,110,0,109,0,
101,0,110,0,116,
0,1,-1,1,5,
1221,20,1222,4,38,
83,0,105,0,109,
0,112,0,108,0,
101,0,65,0,115,
0,115,0,105,0,
103,0,110,0,109,
0,101,0,110,0,
116,0,95,0,50,
0,49,0,1,275,
1,3,1,6,1,
5,1223,22,1,111,
1,1011,1224,17,1225,
15,1226,4,44,37,
0,80,0,97,0,
114,0,101,0,110,
0,116,0,104,0,
101,0,115,0,105,
0,115,0,69,0,
120,0,112,0,114,
0,101,0,115,0,
115,0,105,0,111,
0,110,0,1,-1,
1,5,1227,20,1228,
4,46,80,0,97,
0,114,0,101,0,
110,0,116,0,104,
0,101,0,115,0,
105,0,115,0,69,
0,120,0,112,0,
114,0,101,0,115,
0,115,0,105,0,
111,0,110,0,95,
0,50,0,1,322,
1,3,1,4,1,
3,1229,22,1,158,
1,1514,1230,17,1231,
15,1220,1,-1,1,
5,1232,20,1233,4,
38,83,0,105,0,
109,0,112,0,108,
0,101,0,65,0,
115,0,115,0,105,
0,103,0,110,0,
109,0,101,0,110,
0,116,0,95,0,
49,0,52,0,1,
268,1,3,1,4,
1,3,1234,22,1,
104,1,9,1235,17,
1236,15,1237,4,24,
37,0,68,0,101,
0,99,0,108,0,
97,0,114,0,97,
0,116,0,105,0,
111,0,110,0,1,
-1,1,5,1238,20,
1239,4,26,68,0,
101,0,99,0,108,
0,97,0,114,0,
97,0,116,0,105,
0,111,0,110,0,
95,0,49,0,1,
212,1,3,1,3,
1,2,1240,22,1,
48,1,262,1241,17,
1242,15,1243,4,34,
37,0,66,0,105,
0,110,0,97,0,
114,0,121,0,69,
0,120,0,112,0,
114,0,101,0,115,
0,115,0,105,0,
111,0,110,0,1,
-1,1,5,1244,20,
1245,4,36,66,0,
105,0,110,0,97,
0,114,0,121,0,
69,0,120,0,112,
0,114,0,101,0,
115,0,115,0,105,
0,111,0,110,0,
95,0,53,0,1,
304,1,3,1,4,
1,3,1246,22,1,
140,1,1267,1247,17,
1248,15,1220,1,-1,
1,5,1249,20,1250,
4,36,83,0,105,
0,109,0,112,0,
108,0,101,0,65,
0,115,0,115,0,
105,0,103,0,110,
0,109,0,101,0,
110,0,116,0,95,
0,56,0,1,262,
1,3,1,6,1,
5,1251,22,1,98,
1,2021,840,1,1521,
1252,17,1253,15,1220,
1,-1,1,5,1254,
20,1255,4,36,83,
0,105,0,109,0,
112,0,108,0,101,
0,65,0,115,0,
115,0,105,0,103,
0,110,0,109,0,
101,0,110,0,116,
0,95,0,49,0,
1,255,1,3,1,
4,1,3,1256,22,
1,91,1,2024,1257,
17,1258,15,1259,4,
24,37,0,83,0,
116,0,97,0,116,
0,101,0,67,0,
104,0,97,0,110,
0,103,0,101,0,
1,-1,1,5,1260,
20,1261,4,26,83,
0,116,0,97,0,
116,0,101,0,67,
0,104,0,97,0,
110,0,103,0,101,
0,95,0,49,0,
1,237,1,3,1,
3,1,2,1262,22,
1,73,1,1775,1263,
17,1264,15,1265,4,
30,37,0,69,0,
109,0,112,0,116,
0,121,0,83,0,
116,0,97,0,116,
0,101,0,109,0,
101,0,110,0,116,
0,1,-1,1,5,
1266,20,1267,4,32,
69,0,109,0,112,
0,116,0,121,0,
83,0,116,0,97,
0,116,0,101,0,
109,0,101,0,110,
0,116,0,95,0,
49,0,1,221,1,
3,1,1,1,0,
1268,22,1,57,1,
19,1269,17,1236,1,
2,1240,1,2028,1270,
17,1271,15,1272,4,
20,37,0,74,0,
117,0,109,0,112,
0,76,0,97,0,
98,0,101,0,108,
0,1,-1,1,5,
1273,20,1274,4,22,
74,0,117,0,109,
0,112,0,76,0,
97,0,98,0,101,
0,108,0,95,0,
49,0,1,235,1,
3,1,3,1,2,
1275,22,1,71,1,
2029,847,1,2281,1276,
17,1277,15,1278,4,
34,37,0,70,0,
111,0,114,0,76,
0,111,0,111,0,
112,0,83,0,116,
0,97,0,116,0,
101,0,109,0,101,
0,110,0,116,0,
1,-1,1,5,1279,
20,1280,4,36,70,
0,111,0,114,0,
76,0,111,0,111,
0,112,0,83,0,
116,0,97,0,116,
0,101,0,109,0,
101,0,110,0,116,
0,95,0,50,0,
1,250,1,3,1,
2,1,1,1281,22,
1,86,1,2031,858,
1,2032,863,1,2033,
868,1,2034,1282,16,
0,676,1,2788,1283,
16,0,145,1,2036,
1284,16,0,602,1,
2037,879,1,2038,1285,
16,0,606,1,2039,
884,1,32,1286,17,
1264,1,0,1268,1,
2041,890,1,2042,1287,
16,0,749,1,2043,
896,1,2044,1288,16,
0,689,1,2045,901,
1,2299,1289,16,0,
255,1,1296,1290,17,
1291,15,1220,1,-1,
1,5,1292,20,1293,
4,38,83,0,105,
0,109,0,112,0,
108,0,101,0,65,
0,115,0,115,0,
105,0,103,0,110,
0,109,0,101,0,
110,0,116,0,95,
0,50,0,48,0,
1,274,1,3,1,
6,1,5,1294,22,
1,110,1,283,1295,
17,1296,15,1243,1,
-1,1,5,1297,20,
1298,4,36,66,0,
105,0,110,0,97,
0,114,0,121,0,
69,0,120,0,112,
0,114,0,101,0,
115,0,115,0,105,
0,111,0,110,0,
95,0,52,0,1,
303,1,3,1,4,
1,3,1299,22,1,
139,1,40,1300,17,
1301,15,1302,4,32,
37,0,73,0,100,
0,101,0,110,0,
116,0,69,0,120,
0,112,0,114,0,
101,0,115,0,115,
0,105,0,111,0,
110,0,1,-1,1,
5,1303,20,1304,4,
34,73,0,100,0,
101,0,110,0,116,
0,69,0,120,0,
112,0,114,0,101,
0,115,0,115,0,
105,0,111,0,110,
0,95,0,49,0,
1,289,1,3,1,
2,1,1,1305,22,
1,125,1,44,1306,
17,1301,1,1,1305,
1,1803,909,1,47,
1307,17,1308,15,1309,
4,38,37,0,73,
0,100,0,101,0,
110,0,116,0,68,
0,111,0,116,0,
69,0,120,0,112,
0,114,0,101,0,
115,0,115,0,105,
0,111,0,110,0,
1,-1,1,5,1310,
20,1311,4,40,73,
0,100,0,101,0,
110,0,116,0,68,
0,111,0,116,0,
69,0,120,0,112,
0,114,0,101,0,
115,0,115,0,105,
0,111,0,110,0,
95,0,49,0,1,
290,1,3,1,4,
1,3,1312,22,1,
126,1,48,1313,17,
1314,15,1315,4,58,
37,0,73,0,110,
0,99,0,114,0,
101,0,109,0,101,
0,110,0,116,0,
68,0,101,0,99,
0,114,0,101,0,
109,0,101,0,110,
0,116,0,69,0,
120,0,112,0,114,
0,101,0,115,0,
115,0,105,0,111,
0,110,0,1,-1,
1,5,1316,20,1317,
4,60,73,0,110,
0,99,0,114,0,
101,0,109,0,101,
0,110,0,116,0,
68,0,101,0,99,
0,114,0,101,0,
109,0,101,0,110,
0,116,0,69,0,
120,0,112,0,114,
0,101,0,115,0,
115,0,105,0,111,
0,110,0,95,0,
52,0,1,294,1,
3,1,5,1,4,
1318,22,1,130,1,
49,1319,17,1320,15,
1315,1,-1,1,5,
1321,20,1322,4,60,
73,0,110,0,99,
0,114,0,101,0,
109,0,101,0,110,
0,116,0,68,0,
101,0,99,0,114,
0,101,0,109,0,
101,0,110,0,116,
0,69,0,120,0,
112,0,114,0,101,
0,115,0,115,0,
105,0,111,0,110,
0,95,0,51,0,
1,293,1,3,1,
5,1,4,1323,22,
1,129,1,50,1324,
17,1325,15,1315,1,
-1,1,5,1326,20,
1327,4,60,73,0,
110,0,99,0,114,
0,101,0,109,0,
101,0,110,0,116,
0,68,0,101,0,
99,0,114,0,101,
0,109,0,101,0,
110,0,116,0,69,
0,120,0,112,0,
114,0,101,0,115,
0,115,0,105,0,
111,0,110,0,95,
0,50,0,1,292,
1,3,1,3,1,
2,1328,22,1,128,
1,51,1329,17,1330,
15,1315,1,-1,1,
5,1331,20,1332,4,
60,73,0,110,0,
99,0,114,0,101,
0,109,0,101,0,
110,0,116,0,68,
0,101,0,99,0,
114,0,101,0,109,
0,101,0,110,0,
116,0,69,0,120,
0,112,0,114,0,
101,0,115,0,115,
0,105,0,111,0,
110,0,95,0,49,
0,1,291,1,3,
1,3,1,2,1333,
22,1,127,1,305,
1334,17,1335,15,1243,
1,-1,1,5,1336,
20,1337,4,36,66,
0,105,0,110,0,
97,0,114,0,121,
0,69,0,120,0,
112,0,114,0,101,
0,115,0,115,0,
105,0,111,0,110,
0,95,0,51,0,
1,302,1,3,1,
4,1,3,1338,22,
1,138,1,525,1339,
17,1340,15,1341,4,
34,37,0,82,0,
111,0,116,0,97,
0,116,0,105,0,
111,0,110,0,67,
0,111,0,110,0,
115,0,116,0,97,
0,110,0,116,0,
1,-1,1,5,1342,
20,1343,4,36,82,
0,111,0,116,0,
97,0,116,0,105,
0,111,0,110,0,
67,0,111,0,110,
0,115,0,116,0,
97,0,110,0,116,
0,95,0,49,0,
1,287,1,3,1,
10,1,9,1344,22,
1,123,1,63,1345,
17,1346,15,1347,4,
38,37,0,84,0,
121,0,112,0,101,
0,99,0,97,0,
115,0,116,0,69,
0,120,0,112,0,
114,0,101,0,115,
0,115,0,105,0,
111,0,110,0,1,
-1,1,5,1348,20,
1349,4,40,84,0,
121,0,112,0,101,
0,99,0,97,0,
115,0,116,0,69,
0,120,0,112,0,
114,0,101,0,115,
0,115,0,105,0,
111,0,110,0,95,
0,50,0,1,324,
1,3,1,5,1,
4,1350,22,1,160,
1,66,1351,17,1352,
15,1347,1,-1,1,
5,1353,20,1354,4,
40,84,0,121,0,
112,0,101,0,99,
0,97,0,115,0,
116,0,69,0,120,
0,112,0,114,0,
101,0,115,0,115,
0,105,0,111,0,
110,0,95,0,51,
0,1,325,1,3,
1,7,1,6,1355,
22,1,161,1,67,
1356,17,1357,15,1347,
1,-1,1,5,1358,
20,1359,4,40,84,
0,121,0,112,0,
101,0,99,0,97,
0,115,0,116,0,
69,0,120,0,112,
0,114,0,101,0,
115,0,115,0,105,
0,111,0,110,0,
95,0,55,0,1,
329,1,3,1,8,
1,7,1360,22,1,
165,1,68,1361,17,
1362,15,1347,1,-1,
1,5,1363,20,1364,
4,40,84,0,121,
0,112,0,101,0,
99,0,97,0,115,
0,116,0,69,0,
120,0,112,0,114,
0,101,0,115,0,
115,0,105,0,111,
0,110,0,95,0,
53,0,1,327,1,
3,1,8,1,7,
1365,22,1,163,1,
69,1366,17,1367,15,
1347,1,-1,1,5,
1368,20,1369,4,40,
84,0,121,0,112,
0,101,0,99,0,
97,0,115,0,116,
0,69,0,120,0,
112,0,114,0,101,
0,115,0,115,0,
105,0,111,0,110,
0,95,0,54,0,
1,328,1,3,1,
6,1,5,1370,22,
1,164,1,70,1371,
17,1372,15,1347,1,
-1,1,5,1373,20,
1374,4,40,84,0,
121,0,112,0,101,
0,99,0,97,0,
115,0,116,0,69,
0,120,0,112,0,
114,0,101,0,115,
0,115,0,105,0,
111,0,110,0,95,
0,52,0,1,326,
1,3,1,6,1,
5,1375,22,1,162,
1,74,1376,17,1377,
15,1347,1,-1,1,
5,1378,20,1379,4,
40,84,0,121,0,
112,0,101,0,99,
0,97,0,115,0,
116,0,69,0,120,
0,112,0,114,0,
101,0,115,0,115,
0,105,0,111,0,
110,0,95,0,57,
0,1,331,1,3,
1,7,1,6,1380,
22,1,167,1,1013,
1381,17,1382,15,1226,
1,-1,1,5,1383,
20,1384,4,46,80,
0,97,0,114,0,
101,0,110,0,116,
0,104,0,101,0,
115,0,105,0,115,
0,69,0,120,0,
112,0,114,0,101,
0,115,0,115,0,
105,0,111,0,110,
0,95,0,49,0,
1,321,1,3,1,
4,1,3,1385,22,
1,157,1,1332,1386,
17,1387,15,1220,1,
-1,1,5,1388,20,
1389,4,38,83,0,
105,0,109,0,112,
0,108,0,101,0,
65,0,115,0,115,
0,105,0,103,0,
110,0,109,0,101,
0,110,0,116,0,
95,0,49,0,57,
0,1,273,1,3,
1,6,1,5,1390,
22,1,109,1,2337,
1391,17,1264,1,0,
1268,1,1585,1392,17,
1393,15,1394,4,32,
37,0,82,0,101,
0,116,0,117,0,
114,0,110,0,83,
0,116,0,97,0,
116,0,101,0,109,
0,101,0,110,0,
116,0,1,-1,1,
5,1395,20,1396,4,
34,82,0,101,0,
116,0,117,0,114,
0,110,0,83,0,
116,0,97,0,116,
0,101,0,109,0,
101,0,110,0,116,
0,95,0,50,0,
1,280,1,3,1,
2,1,1,1397,22,
1,116,1,2023,1398,
17,1399,15,1259,1,
-1,1,5,1400,20,
1401,4,26,83,0,
116,0,97,0,116,
0,101,0,67,0,
104,0,97,0,110,
0,103,0,101,0,
95,0,50,0,1,
238,1,3,1,3,
1,2,1402,22,1,
74,1,2136,965,1,
82,1403,17,1404,15,
1405,4,32,37,0,
85,0,110,0,97,
0,114,0,121,0,
69,0,120,0,112,
0,114,0,101,0,
115,0,115,0,105,
0,111,0,110,0,
1,-1,1,5,1406,
20,1407,4,34,85,
0,110,0,97,0,
114,0,121,0,69,
0,120,0,112,0,
114,0,101,0,115,
0,115,0,105,0,
111,0,110,0,95,
0,51,0,1,320,
1,3,1,3,1,
2,1408,22,1,156,
1,2026,1409,17,1410,
15,1411,4,28,37,
0,74,0,117,0,
109,0,112,0,83,
0,116,0,97,0,
116,0,101,0,109,
0,101,0,110,0,
116,0,1,-1,1,
5,1412,20,1413,4,
30,74,0,117,0,
109,0,112,0,83,
0,116,0,97,0,
116,0,101,0,109,
0,101,0,110,0,
116,0,95,0,49,
0,1,236,1,3,
1,3,1,2,1414,
22,1,72,1,1591,
1415,17,1416,15,1394,
1,-1,1,5,1417,
20,1418,4,34,82,
0,101,0,116,0,
117,0,114,0,110,
0,83,0,116,0,
97,0,116,0,101,
0,109,0,101,0,
110,0,116,0,95,
0,49,0,1,279,
1,3,1,3,1,
2,1419,22,1,115,
1,1341,1420,17,1421,
15,1220,1,-1,1,
5,1422,20,1423,4,
36,83,0,105,0,
109,0,112,0,108,
0,101,0,65,0,
115,0,115,0,105,
0,103,0,110,0,
109,0,101,0,110,
0,116,0,95,0,
54,0,1,260,1,
3,1,4,1,3,
1424,22,1,96,1,
2030,853,1,328,1425,
17,1426,15,1243,1,
-1,1,5,1427,20,
1428,4,36,66,0,
105,0,110,0,97,
0,114,0,121,0,
69,0,120,0,112,
0,114,0,101,0,
115,0,115,0,105,
0,111,0,110,0,
95,0,50,0,1,
301,1,3,1,4,
1,3,1429,22,1,
137,1,1303,1430,17,
1431,15,1220,1,-1,
1,5,1432,20,1433,
4,36,83,0,105,
0,109,0,112,0,
108,0,101,0,65,
0,115,0,115,0,
105,0,103,0,110,
0,109,0,101,0,
110,0,116,0,95,
0,55,0,1,261,
1,3,1,6,1,
5,1434,22,1,97,
1,2035,874,1,93,
1435,17,1436,15,1405,
1,-1,1,5,1437,
20,1438,4,34,85,
0,110,0,97,0,
114,0,121,0,69,
0,120,0,112,0,
114,0,101,0,115,
0,115,0,105,0,
111,0,110,0,95,
0,50,0,1,319,
1,3,1,3,1,
2,1439,22,1,155,
1,1550,1440,17,1441,
15,1220,1,-1,1,
5,1442,20,1443,4,
38,83,0,105,0,
109,0,112,0,108,
0,101,0,65,0,
115,0,115,0,105,
0,103,0,110,0,
109,0,101,0,110,
0,116,0,95,0,
49,0,51,0,1,
267,1,3,1,4,
1,3,1444,22,1,
103,1,2040,1445,16,
0,610,1,2106,1446,
17,1264,1,0,1268,
1,1555,1447,16,0,
707,1,827,1448,17,
1449,15,1243,1,-1,
1,5,1450,20,1451,
4,38,66,0,105,
0,110,0,97,0,
114,0,121,0,69,
0,120,0,112,0,
114,0,101,0,115,
0,115,0,105,0,
111,0,110,0,95,
0,49,0,53,0,
1,314,1,3,1,
4,1,3,1452,22,
1,150,1,1859,1453,
16,0,339,1,1860,
943,1,1804,1454,17,
1264,1,0,1268,1,
107,1455,17,1456,15,
1405,1,-1,1,5,
1457,20,1458,4,34,
85,0,110,0,97,
0,114,0,121,0,
69,0,120,0,112,
0,114,0,101,0,
115,0,115,0,105,
0,111,0,110,0,
95,0,49,0,1,
318,1,3,1,3,
1,2,1459,22,1,
154,1,2781,1460,16,
0,278,1,1114,1461,
17,1308,1,3,1312,
1,1048,1462,17,1463,
15,1243,1,-1,1,
5,1464,20,1465,4,
38,66,0,105,0,
110,0,97,0,114,
0,121,0,69,0,
120,0,112,0,114,
0,101,0,115,0,
115,0,105,0,111,
0,110,0,95,0,
49,0,56,0,1,
317,1,3,1,4,
1,3,1466,22,1,
153,1,352,1467,17,
1468,15,1243,1,-1,
1,5,1469,20,1470,
4,36,66,0,105,
0,110,0,97,0,
114,0,121,0,69,
0,120,0,112,0,
114,0,101,0,115,
0,115,0,105,0,
111,0,110,0,95,
0,49,0,1,300,
1,3,1,4,1,
3,1471,22,1,136,
1,1872,1472,16,0,
349,1,1873,958,1,
118,1473,17,1474,15,
1243,1,-1,1,5,
1475,20,1476,4,38,
66,0,105,0,110,
0,97,0,114,0,
121,0,69,0,120,
0,112,0,114,0,
101,0,115,0,115,
0,105,0,111,0,
110,0,95,0,49,
0,52,0,1,313,
1,3,1,4,1,
3,1477,22,1,149,
1,1123,1478,17,1479,
15,1220,1,-1,1,
5,1480,20,1481,4,
38,83,0,105,0,
109,0,112,0,108,
0,101,0,65,0,
115,0,115,0,105,
0,103,0,110,0,
109,0,101,0,110,
0,116,0,95,0,
49,0,50,0,1,
266,1,3,1,6,
1,5,1482,22,1,
102,1,371,1483,17,
1484,15,1485,4,46,
37,0,70,0,117,
0,110,0,99,0,
116,0,105,0,111,
0,110,0,67,0,
97,0,108,0,108,
0,69,0,120,0,
112,0,114,0,101,
0,115,0,115,0,
105,0,111,0,110,
0,1,-1,1,5,
1486,20,1487,4,48,
70,0,117,0,110,
0,99,0,116,0,
105,0,111,0,110,
0,67,0,97,0,
108,0,108,0,69,
0,120,0,112,0,
114,0,101,0,115,
0,115,0,105,0,
111,0,110,0,95,
0,49,0,1,299,
1,3,1,2,1,
1,1488,22,1,135,
1,1377,1489,17,1490,
15,1220,1,-1,1,
5,1491,20,1492,4,
36,83,0,105,0,
109,0,112,0,108,
0,101,0,65,0,
115,0,115,0,105,
0,103,0,110,0,
109,0,101,0,110,
0,116,0,95,0,
53,0,1,259,1,
3,1,4,1,3,
1493,22,1,95,1,
375,1494,17,1495,15,
1315,1,-1,1,5,
1496,20,1497,4,60,
73,0,110,0,99,
0,114,0,101,0,
109,0,101,0,110,
0,116,0,68,0,
101,0,99,0,114,
0,101,0,109,0,
101,0,110,0,116,
0,69,0,120,0,
112,0,114,0,101,
0,115,0,115,0,
105,0,111,0,110,
0,95,0,56,0,
1,298,1,3,1,
5,1,4,1498,22,
1,134,1,377,1499,
17,1500,15,1315,1,
-1,1,5,1501,20,
1502,4,60,73,0,
110,0,99,0,114,
0,101,0,109,0,
101,0,110,0,116,
0,68,0,101,0,
99,0,114,0,101,
0,109,0,101,0,
110,0,116,0,69,
0,120,0,112,0,
114,0,101,0,115,
0,115,0,105,0,
111,0,110,0,95,
0,53,0,1,295,
1,3,1,3,1,
2,1503,22,1,131,
1,379,1504,17,1505,
15,1315,1,-1,1,
5,1506,20,1507,4,
60,73,0,110,0,
99,0,114,0,101,
0,109,0,101,0,
110,0,116,0,68,
0,101,0,99,0,
114,0,101,0,109,
0,101,0,110,0,
116,0,69,0,120,
0,112,0,114,0,
101,0,115,0,115,
0,105,0,111,0,
110,0,95,0,55,
0,1,297,1,3,
1,5,1,4,1508,
22,1,133,1,380,
1509,17,1510,15,1511,
4,38,37,0,67,
0,111,0,110,0,
115,0,116,0,97,
0,110,0,116,0,
69,0,120,0,112,
0,114,0,101,0,
115,0,115,0,105,
0,111,0,110,0,
1,-1,1,5,1512,
20,1513,4,40,67,
0,111,0,110,0,
115,0,116,0,97,
0,110,0,116,0,
69,0,120,0,112,
0,114,0,101,0,
115,0,115,0,105,
0,111,0,110,0,
95,0,49,0,1,
288,1,3,1,2,
1,1,1514,22,1,
124,1,883,1515,17,
1516,15,1243,1,-1,
1,5,1517,20,1518,
4,38,66,0,105,
0,110,0,97,0,
114,0,121,0,69,
0,120,0,112,0,
114,0,101,0,115,
0,115,0,105,0,
111,0,110,0,95,
0,49,0,54,0,
1,315,1,3,1,
4,1,3,1519,22,
1,151,1,1628,1520,
17,1521,15,1522,4,
22,37,0,65,0,
115,0,115,0,105,
0,103,0,110,0,
109,0,101,0,110,
0,116,0,1,-1,
1,5,1523,20,1524,
4,24,65,0,115,
0,115,0,105,0,
103,0,110,0,109,
0,101,0,110,0,
116,0,95,0,49,
0,1,253,1,3,
1,4,1,3,1525,
22,1,89,1,2075,
1526,17,1264,1,0,
1268,1,373,1527,17,
1528,15,1315,1,-1,
1,5,1529,20,1530,
4,60,73,0,110,
0,99,0,114,0,
101,0,109,0,101,
0,110,0,116,0,
68,0,101,0,99,
0,114,0,101,0,
109,0,101,0,110,
0,116,0,69,0,
120,0,112,0,114,
0,101,0,115,0,
115,0,105,0,111,
0,110,0,95,0,
54,0,1,296,1,
3,1,3,1,2,
1531,22,1,132,1,
130,1532,17,1533,15,
1243,1,-1,1,5,
1534,20,1535,4,38,
66,0,105,0,110,
0,97,0,114,0,
121,0,69,0,120,
0,112,0,114,0,
101,0,115,0,115,
0,105,0,111,0,
110,0,95,0,49,
0,51,0,1,312,
1,3,1,4,1,
3,1536,22,1,148,
1,143,1537,17,1538,
15,1243,1,-1,1,
5,1539,20,1540,4,
38,66,0,105,0,
110,0,97,0,114,
0,121,0,69,0,
120,0,112,0,114,
0,101,0,115,0,
115,0,105,0,111,
0,110,0,95,0,
49,0,50,0,1,
311,1,3,1,4,
1,3,1541,22,1,
147,1,1901,1542,17,
1264,1,0,1268,1,
1152,1543,17,1544,15,
1220,1,-1,1,5,
1545,20,1546,4,38,
83,0,105,0,109,
0,112,0,108,0,
101,0,65,0,115,
0,115,0,105,0,
103,0,110,0,109,
0,101,0,110,0,
116,0,95,0,50,
0,52,0,1,278,
1,3,1,6,1,
5,1547,22,1,114,
1,1406,1548,17,1549,
15,1220,1,-1,1,
5,1550,20,1551,4,
38,83,0,105,0,
109,0,112,0,108,
0,101,0,65,0,
115,0,115,0,105,
0,103,0,110,0,
109,0,101,0,110,
0,116,0,95,0,
49,0,55,0,1,
271,1,3,1,4,
1,3,1552,22,1,
107,1,1659,1553,16,
0,297,1,2413,1554,
17,1264,1,0,1268,
1,1159,1555,17,1556,
15,1220,1,-1,1,
5,1557,20,1558,4,
38,83,0,105,0,
109,0,112,0,108,
0,101,0,65,0,
115,0,115,0,105,
0,103,0,110,0,
109,0,101,0,110,
0,116,0,95,0,
49,0,49,0,1,
265,1,3,1,6,
1,5,1559,22,1,
101,1,157,1560,17,
1561,15,1243,1,-1,
1,5,1562,20,1563,
4,38,66,0,105,
0,110,0,97,0,
114,0,121,0,69,
0,120,0,112,0,
114,0,101,0,115,
0,115,0,105,0,
111,0,110,0,95,
0,49,0,49,0,
1,310,1,3,1,
4,1,3,1564,22,
1,146,1,1413,1565,
17,1566,15,1220,1,
-1,1,5,1567,20,
1568,4,36,83,0,
105,0,109,0,112,
0,108,0,101,0,
65,0,115,0,115,
0,105,0,103,0,
110,0,109,0,101,
0,110,0,116,0,
95,0,52,0,1,
258,1,3,1,4,
1,3,1569,22,1,
94,1,1370,1570,17,
1571,15,1220,1,-1,
1,5,1572,20,1573,
4,38,83,0,105,
0,109,0,112,0,
108,0,101,0,65,
0,115,0,115,0,
105,0,103,0,110,
0,109,0,101,0,
110,0,116,0,95,
0,49,0,56,0,
1,272,1,3,1,
4,1,3,1574,22,
1,108,1,1478,1575,
17,1576,15,1220,1,
-1,1,5,1577,20,
1578,4,38,83,0,
105,0,109,0,112,
0,108,0,101,0,
65,0,115,0,115,
0,105,0,103,0,
110,0,109,0,101,
0,110,0,116,0,
95,0,49,0,53,
0,1,269,1,3,
1,4,1,3,1579,
22,1,105,1,1620,
1580,17,1581,15,1522,
1,-1,1,5,1582,
20,1583,4,24,65,
0,115,0,115,0,
105,0,103,0,110,
0,109,0,101,0,
110,0,116,0,95,
0,50,0,1,254,
1,3,1,2,1,
1,1584,22,1,90,
1,1621,1585,16,0,
786,1,1574,921,1,
172,1586,17,1587,15,
1243,1,-1,1,5,
1588,20,1589,4,38,
66,0,105,0,110,
0,97,0,114,0,
121,0,69,0,120,
0,112,0,114,0,
101,0,115,0,115,
0,105,0,111,0,
110,0,95,0,49,
0,48,0,1,309,
1,3,1,4,1,
3,1590,22,1,145,
1,1931,983,1,1665,
1591,17,1592,15,1278,
1,-1,1,5,1593,
20,1594,4,36,70,
0,111,0,114,0,
76,0,111,0,111,
0,112,0,83,0,
116,0,97,0,116,
0,101,0,109,0,
101,0,110,0,116,
0,95,0,49,0,
1,249,1,3,1,
2,1,1,1595,22,
1,85,1,2364,949,
1,2105,936,1,1188,
1596,17,1597,15,1220,
1,-1,1,5,1598,
20,1599,4,38,83,
0,105,0,109,0,
112,0,108,0,101,
0,65,0,115,0,
115,0,105,0,103,
0,110,0,109,0,
101,0,110,0,116,
0,95,0,50,0,
51,0,1,277,1,
3,1,6,1,5,
1600,22,1,113,1,
1442,1601,17,1602,15,
1220,1,-1,1,5,
1603,20,1604,4,38,
83,0,105,0,109,
0,112,0,108,0,
101,0,65,0,115,
0,115,0,105,0,
103,0,110,0,109,
0,101,0,110,0,
116,0,95,0,49,
0,54,0,1,270,
1,3,1,4,1,
3,1605,22,1,106,
1,1694,1606,16,0,
218,1,942,1607,17,
1608,15,1243,1,-1,
1,5,1609,20,1610,
4,38,66,0,105,
0,110,0,97,0,
114,0,121,0,69,
0,120,0,112,0,
114,0,101,0,115,
0,115,0,105,0,
111,0,110,0,95,
0,49,0,55,0,
1,316,1,3,1,
4,1,3,1611,22,
1,152,1,2198,1612,
17,1264,1,0,1268,
1,1195,1613,17,1614,
15,1220,1,-1,1,
5,1615,20,1616,4,
38,83,0,105,0,
109,0,112,0,108,
0,101,0,65,0,
115,0,115,0,105,
0,103,0,110,0,
109,0,101,0,110,
0,116,0,95,0,
49,0,48,0,1,
264,1,3,1,6,
1,5,1617,22,1,
100,1,1449,1618,17,
1619,15,1220,1,-1,
1,5,1620,20,1621,
4,36,83,0,105,
0,109,0,112,0,
108,0,101,0,65,
0,115,0,115,0,
105,0,103,0,110,
0,109,0,101,0,
110,0,116,0,95,
0,51,0,1,257,
1,3,1,4,1,
3,1622,22,1,93,
1,1701,1623,17,1624,
15,1278,1,-1,1,
5,1625,20,1626,4,
36,70,0,111,0,
114,0,76,0,111,
0,111,0,112,0,
83,0,116,0,97,
0,116,0,101,0,
109,0,101,0,110,
0,116,0,95,0,
51,0,1,251,1,
3,1,4,1,3,
1627,22,1,87,1,
447,1628,17,1629,15,
1630,4,30,37,0,
86,0,101,0,99,
0,116,0,111,0,
114,0,67,0,111,
0,110,0,115,0,
116,0,97,0,110,
0,116,0,1,-1,
1,5,1631,20,1632,
4,32,86,0,101,
0,99,0,116,0,
111,0,114,0,67,
0,111,0,110,0,
115,0,116,0,97,
0,110,0,116,0,
95,0,49,0,1,
286,1,3,1,8,
1,7,1633,22,1,
122,1,2458,998,1,
2459,1004,1,1958,1634,
17,1264,1,0,1268,
1,188,1635,17,1636,
15,1243,1,-1,1,
5,1637,20,1638,4,
36,66,0,105,0,
110,0,97,0,114,
0,121,0,69,0,
120,0,112,0,114,
0,101,0,115,0,
115,0,105,0,111,
0,110,0,95,0,
57,0,1,308,1,
3,1,4,1,3,
1639,22,1,144,1,
2462,1011,1,1657,1016,
1,2464,1021,1,205,
1640,17,1641,15,1243,
1,-1,1,5,1642,
20,1643,4,36,66,
0,105,0,110,0,
97,0,114,0,121,
0,69,0,120,0,
112,0,114,0,101,
0,115,0,115,0,
105,0,111,0,110,
0,95,0,56,0,
1,307,1,3,1,
4,1,3,1644,22,
1,143,1,2227,1030,
1,1224,1645,17,1646,
15,1220,1,-1,1,
5,1647,20,1648,4,
38,83,0,105,0,
109,0,112,0,108,
0,101,0,65,0,
115,0,115,0,105,
0,103,0,110,0,
109,0,101,0,110,
0,116,0,95,0,
50,0,50,0,1,
276,1,3,1,6,
1,5,1649,22,1,
112,1,223,1650,17,
1651,15,1243,1,-1,
1,5,1652,20,1653,
4,36,66,0,105,
0,110,0,97,0,
114,0,121,0,69,
0,120,0,112,0,
114,0,101,0,115,
0,115,0,105,0,
111,0,110,0,95,
0,55,0,1,306,
1,3,1,4,1,
3,1654,22,1,142,
1,1730,1655,17,1656,
15,1278,1,-1,1,
5,1657,20,1658,4,
36,70,0,111,0,
114,0,76,0,111,
0,111,0,112,0,
83,0,116,0,97,
0,116,0,101,0,
109,0,101,0,110,
0,116,0,95,0,
52,0,1,252,1,
3,1,4,1,3,
1659,22,1,88,1,
476,1660,17,1661,15,
1662,4,18,37,0,
67,0,111,0,110,
0,115,0,116,0,
97,0,110,0,116,
0,1,-1,1,5,
1663,20,1664,4,20,
67,0,111,0,110,
0,115,0,116,0,
97,0,110,0,116,
0,95,0,52,0,
1,284,1,3,1,
2,1,1,1665,22,
1,120,1,477,1666,
17,1667,15,1662,1,
-1,1,5,1668,20,
1669,4,20,67,0,
111,0,110,0,115,
0,116,0,97,0,
110,0,116,0,95,
0,51,0,1,283,
1,3,1,2,1,
1,1670,22,1,119,
1,1231,1671,17,1672,
15,1220,1,-1,1,
5,1673,20,1674,4,
36,83,0,105,0,
109,0,112,0,108,
0,101,0,65,0,
115,0,115,0,105,
0,103,0,110,0,
109,0,101,0,110,
0,116,0,95,0,
57,0,1,263,1,
3,1,6,1,5,
1675,22,1,99,1,
479,1676,17,1677,15,
1662,1,-1,1,5,
1678,20,1679,4,20,
67,0,111,0,110,
0,115,0,116,0,
97,0,110,0,116,
0,95,0,49,0,
1,281,1,3,1,
2,1,1,1680,22,
1,117,1,480,1681,
17,1682,15,1683,4,
26,37,0,76,0,
105,0,115,0,116,
0,67,0,111,0,
110,0,115,0,116,
0,97,0,110,0,
116,0,1,-1,1,
5,1684,20,1685,4,
28,76,0,105,0,
115,0,116,0,67,
0,111,0,110,0,
115,0,116,0,97,
0,110,0,116,0,
95,0,49,0,1,
285,1,3,1,4,
1,3,1686,22,1,
121,1,1485,1687,17,
1688,15,1220,1,-1,
1,5,1689,20,1690,
4,36,83,0,105,
0,109,0,112,0,
108,0,101,0,65,
0,115,0,115,0,
105,0,103,0,110,
0,109,0,101,0,
110,0,116,0,95,
0,50,0,1,256,
1,3,1,4,1,
3,1691,22,1,92,
1,1737,1692,16,0,
299,1,1989,1038,1,
1990,1693,17,1264,1,
0,1268,1,1096,1694,
17,1695,15,1696,4,
26,37,0,70,0,
117,0,110,0,99,
0,116,0,105,0,
111,0,110,0,67,
0,97,0,108,0,
108,0,1,-1,1,
5,1697,20,1698,4,
28,70,0,117,0,
110,0,99,0,116,
0,105,0,111,0,
110,0,67,0,97,
0,108,0,108,0,
95,0,49,0,1,
332,1,3,1,5,
1,4,1699,22,1,
168,1,242,1700,17,
1701,15,1243,1,-1,
1,5,1702,20,1703,
4,36,66,0,105,
0,110,0,97,0,
114,0,121,0,69,
0,120,0,112,0,
114,0,101,0,115,
0,115,0,105,0,
111,0,110,0,95,
0,54,0,1,305,
1,3,1,4,1,
3,1704,22,1,141,
1,478,1705,17,1706,
15,1662,1,-1,1,
5,1707,20,1708,4,
20,67,0,111,0,
110,0,115,0,116,
0,97,0,110,0,
116,0,95,0,50,
0,1,282,1,3,
1,2,1,1,1709,
22,1,118,1,1001,
1710,17,1711,15,1347,
1,-1,1,5,1712,
20,1713,4,40,84,
0,121,0,112,0,
101,0,99,0,97,
0,115,0,116,0,
69,0,120,0,112,
0,114,0,101,0,
115,0,115,0,105,
0,111,0,110,0,
95,0,56,0,1,
330,1,3,1,5,
1,4,1714,22,1,
166,1,1002,1715,17,
1716,15,1347,1,-1,
1,5,1717,20,1718,
4,40,84,0,121,
0,112,0,101,0,
99,0,97,0,115,
0,116,0,69,0,
120,0,112,0,114,
0,101,0,115,0,
115,0,105,0,111,
0,110,0,95,0,
49,0,1,323,1,
3,1,5,1,4,
1719,22,1,159,1,
12,1720,19,166,1,
12,1721,5,50,1,
1901,1722,16,0,164,
1,2075,1723,16,0,
164,1,1860,943,1,
1803,909,1,1804,1724,
16,0,164,1,2518,
1725,16,0,164,1,
2413,1726,16,0,164,
1,2198,1727,16,0,
164,1,1873,958,1,
1657,1016,1,2136,965,
1,2032,863,1,1989,
1038,1,1990,1728,16,
0,164,1,31,1729,
16,0,164,1,32,
1730,16,0,164,1,
2105,936,1,2106,1731,
16,0,164,1,2656,
1732,16,0,282,1,
2548,1733,16,0,164,
1,2227,1030,1,2337,
1734,16,0,164,1,
2556,1735,16,0,164,
1,2777,1736,16,0,
164,1,2564,1737,16,
0,164,1,2021,840,
1,2458,998,1,2459,
1004,1,2462,1011,1,
2572,1738,16,0,164,
1,2464,1021,1,2029,
847,1,2030,853,1,
2031,858,1,2577,1739,
16,0,164,1,2469,
1740,16,0,520,1,
2035,874,1,2364,949,
1,2039,884,1,1931,
983,1,2041,890,1,
2043,896,1,2045,901,
1,2592,1741,16,0,
164,1,1775,1742,16,
0,164,1,2033,868,
1,2037,879,1,1574,
921,1,1958,1743,16,
0,164,1,2533,1744,
16,0,164,1,13,
1745,19,508,1,13,
1746,5,55,1,2643,
1747,17,1748,15,1749,
4,20,37,0,83,
0,116,0,97,0,
116,0,101,0,66,
0,111,0,100,0,
121,0,1,-1,1,
5,1750,20,1751,4,
22,83,0,116,0,
97,0,116,0,101,
0,66,0,111,0,
100,0,121,0,95,
0,56,0,1,187,
1,3,1,3,1,
2,1752,22,1,22,
1,2644,1753,17,1754,
15,1749,1,-1,1,
5,1755,20,1756,4,
22,83,0,116,0,
97,0,116,0,101,
0,66,0,111,0,
100,0,121,0,95,
0,54,0,1,185,
1,3,1,3,1,
2,1757,22,1,20,
1,1860,943,1,1803,
909,1,2520,1758,17,
1759,15,1760,4,46,
37,0,75,0,101,
0,121,0,73,0,
110,0,116,0,73,
0,110,0,116,0,
65,0,114,0,103,
0,83,0,116,0,
97,0,116,0,101,
0,69,0,118,0,
101,0,110,0,116,
0,1,-1,1,5,
1761,20,1762,4,48,
75,0,101,0,121,
0,73,0,110,0,
116,0,73,0,110,
0,116,0,65,0,
114,0,103,0,83,
0,116,0,97,0,
116,0,101,0,69,
0,118,0,101,0,
110,0,116,0,95,
0,49,0,1,203,
1,3,1,6,1,
5,1763,22,1,38,
1,2413,1764,16,0,
506,1,1873,958,1,
1657,1016,1,2639,1765,
17,1766,15,1749,1,
-1,1,5,1767,20,
1768,4,24,83,0,
116,0,97,0,116,
0,101,0,66,0,
111,0,100,0,121,
0,95,0,49,0,
54,0,1,195,1,
3,1,3,1,2,
1769,22,1,30,1,
2640,1770,17,1771,15,
1749,1,-1,1,5,
1772,20,1773,4,24,
83,0,116,0,97,
0,116,0,101,0,
66,0,111,0,100,
0,121,0,95,0,
49,0,52,0,1,
193,1,3,1,3,
1,2,1774,22,1,
28,1,2641,1775,17,
1776,15,1749,1,-1,
1,5,1777,20,1778,
4,24,83,0,116,
0,97,0,116,0,
101,0,66,0,111,
0,100,0,121,0,
95,0,49,0,50,
0,1,191,1,3,
1,3,1,2,1779,
22,1,26,1,2642,
1780,17,1781,15,1749,
1,-1,1,5,1782,
20,1783,4,24,83,
0,116,0,97,0,
116,0,101,0,66,
0,111,0,100,0,
121,0,95,0,49,
0,48,0,1,189,
1,3,1,3,1,
2,1784,22,1,24,
1,1989,1038,1,2535,
1785,17,1786,15,1787,
4,46,37,0,73,
0,110,0,116,0,
86,0,101,0,99,
0,86,0,101,0,
99,0,65,0,114,
0,103,0,83,0,
116,0,97,0,116,
0,101,0,69,0,
118,0,101,0,110,
0,116,0,1,-1,
1,5,1788,20,1789,
4,48,73,0,110,
0,116,0,86,0,
101,0,99,0,86,
0,101,0,99,0,
65,0,114,0,103,
0,83,0,116,0,
97,0,116,0,101,
0,69,0,118,0,
101,0,110,0,116,
0,95,0,49,0,
1,202,1,3,1,
6,1,5,1790,22,
1,37,1,2645,1791,
17,1792,15,1749,1,
-1,1,5,1793,20,
1794,4,22,83,0,
116,0,97,0,116,
0,101,0,66,0,
111,0,100,0,121,
0,95,0,52,0,
1,183,1,3,1,
3,1,2,1795,22,
1,18,1,2646,1796,
17,1797,15,1749,1,
-1,1,5,1798,20,
1799,4,22,83,0,
116,0,97,0,116,
0,101,0,66,0,
111,0,100,0,121,
0,95,0,50,0,
1,181,1,3,1,
3,1,2,1800,22,
1,16,1,2037,879,
1,32,1801,16,0,
513,1,2649,1802,17,
1803,15,1749,1,-1,
1,5,1804,20,1805,
4,24,83,0,116,
0,97,0,116,0,
101,0,66,0,111,
0,100,0,121,0,
95,0,49,0,51,
0,1,192,1,3,
1,2,1,1,1806,
22,1,27,1,2650,
1807,17,1808,15,1749,
1,-1,1,5,1809,
20,1810,4,24,83,
0,116,0,97,0,
116,0,101,0,66,
0,111,0,100,0,
121,0,95,0,49,
0,49,0,1,190,
1,3,1,2,1,
1,1811,22,1,25,
1,2651,1812,17,1813,
15,1749,1,-1,1,
5,1814,20,1815,4,
22,83,0,116,0,
97,0,116,0,101,
0,66,0,111,0,
100,0,121,0,95,
0,57,0,1,188,
1,3,1,2,1,
1,1816,22,1,23,
1,2652,1817,17,1818,
15,1749,1,-1,1,
5,1819,20,1820,4,
22,83,0,116,0,
97,0,116,0,101,
0,66,0,111,0,
100,0,121,0,95,
0,55,0,1,186,
1,3,1,2,1,
1,1821,22,1,21,
1,2653,1822,17,1823,
15,1749,1,-1,1,
5,1824,20,1825,4,
22,83,0,116,0,
97,0,116,0,101,
0,66,0,111,0,
100,0,121,0,95,
0,53,0,1,184,
1,3,1,2,1,
1,1826,22,1,19,
1,2654,1827,17,1828,
15,1749,1,-1,1,
5,1829,20,1830,4,
22,83,0,116,0,
97,0,116,0,101,
0,66,0,111,0,
100,0,121,0,95,
0,51,0,1,182,
1,3,1,2,1,
1,1831,22,1,17,
1,2655,1832,17,1833,
15,1749,1,-1,1,
5,1834,20,1835,4,
22,83,0,116,0,
97,0,116,0,101,
0,66,0,111,0,
100,0,121,0,95,
0,49,0,1,180,
1,3,1,2,1,
1,1836,22,1,15,
1,2574,1837,17,1838,
15,1839,4,34,37,
0,75,0,101,0,
121,0,65,0,114,
0,103,0,83,0,
116,0,97,0,116,
0,101,0,69,0,
118,0,101,0,110,
0,116,0,1,-1,
1,5,1840,20,1841,
4,36,75,0,101,
0,121,0,65,0,
114,0,103,0,83,
0,116,0,97,0,
116,0,101,0,69,
0,118,0,101,0,
110,0,116,0,95,
0,49,0,1,198,
1,3,1,6,1,
5,1842,22,1,33,
1,2550,1843,17,1844,
15,1845,4,46,37,
0,73,0,110,0,
116,0,82,0,111,
0,116,0,82,0,
111,0,116,0,65,
0,114,0,103,0,
83,0,116,0,97,
0,116,0,101,0,
69,0,118,0,101,
0,110,0,116,0,
1,-1,1,5,1846,
20,1847,4,48,73,
0,110,0,116,0,
82,0,111,0,116,
0,82,0,111,0,
116,0,65,0,114,
0,103,0,83,0,
116,0,97,0,116,
0,101,0,69,0,
118,0,101,0,110,
0,116,0,95,0,
49,0,1,201,1,
3,1,6,1,5,
1848,22,1,36,1,
2227,1030,1,1574,921,
1,2558,1849,17,1850,
15,1851,4,40,37,
0,86,0,101,0,
99,0,116,0,111,
0,114,0,65,0,
114,0,103,0,83,
0,116,0,97,0,
116,0,101,0,69,
0,118,0,101,0,
110,0,116,0,1,
-1,1,5,1852,20,
1853,4,42,86,0,
101,0,99,0,116,
0,111,0,114,0,
65,0,114,0,103,
0,83,0,116,0,
97,0,116,0,101,
0,69,0,118,0,
101,0,110,0,116,
0,95,0,49,0,
1,200,1,3,1,
6,1,5,1854,22,
1,35,1,2566,1855,
17,1856,15,1857,4,
34,37,0,73,0,
110,0,116,0,65,
0,114,0,103,0,
83,0,116,0,97,
0,116,0,101,0,
69,0,118,0,101,
0,110,0,116,0,
1,-1,1,5,1858,
20,1859,4,36,73,
0,110,0,116,0,
65,0,114,0,103,
0,83,0,116,0,
97,0,116,0,101,
0,69,0,118,0,
101,0,110,0,116,
0,95,0,49,0,
1,199,1,3,1,
6,1,5,1860,22,
1,34,1,2458,998,
1,2459,1004,1,2462,
1011,1,2136,965,1,
2464,1021,1,2029,847,
1,2030,853,1,2031,
858,1,2032,863,1,
2033,868,1,2579,1861,
17,1862,15,1863,4,
36,37,0,86,0,
111,0,105,0,100,
0,65,0,114,0,
103,0,83,0,116,
0,97,0,116,0,
101,0,69,0,118,
0,101,0,110,0,
116,0,1,-1,1,
5,1864,20,1865,4,
38,86,0,111,0,
105,0,100,0,65,
0,114,0,103,0,
83,0,116,0,97,
0,116,0,101,0,
69,0,118,0,101,
0,110,0,116,0,
95,0,49,0,1,
197,1,3,1,5,
1,4,1866,22,1,
32,1,2035,874,1,
2364,949,1,2039,884,
1,1931,983,1,2041,
890,1,2021,840,1,
2043,896,1,2045,901,
1,2700,1867,16,0,
769,1,2594,1868,17,
1869,15,1870,4,22,
37,0,83,0,116,
0,97,0,116,0,
101,0,69,0,118,
0,101,0,110,0,
116,0,1,-1,1,
5,1871,20,1872,4,
24,83,0,116,0,
97,0,116,0,101,
0,69,0,118,0,
101,0,110,0,116,
0,95,0,49,0,
1,196,1,3,1,
6,1,5,1873,22,
1,31,1,2596,1874,
16,0,662,1,2648,
1875,17,1876,15,1749,
1,-1,1,5,1877,
20,1878,4,24,83,
0,116,0,97,0,
116,0,101,0,66,
0,111,0,100,0,
121,0,95,0,49,
0,53,0,1,194,
1,3,1,2,1,
1,1879,22,1,29,
1,2105,936,1,14,
1880,19,144,1,14,
1881,5,115,1,2512,
1882,17,1883,15,1884,
4,30,37,0,73,
0,110,0,116,0,
68,0,101,0,99,
0,108,0,97,0,
114,0,97,0,116,
0,105,0,111,0,
110,0,1,-1,1,
5,1885,20,1886,4,
32,73,0,110,0,
116,0,68,0,101,
0,99,0,108,0,
97,0,114,0,97,
0,116,0,105,0,
111,0,110,0,95,
0,49,0,1,214,
1,3,1,3,1,
2,1887,22,1,50,
1,2513,1888,16,0,
481,1,1260,1218,1,
1011,1224,1,1514,1230,
1,9,1235,1,10,
1889,17,1890,15,1891,
4,48,37,0,65,
0,114,0,103,0,
117,0,109,0,101,
0,110,0,116,0,
68,0,101,0,99,
0,108,0,97,0,
114,0,97,0,116,
0,105,0,111,0,
110,0,76,0,105,
0,115,0,116,0,
1,-1,1,5,140,
1,0,1,0,1892,
22,1,39,1,262,
1241,1,1267,1247,1,
2524,1893,16,0,492,
1,1521,1252,1,1773,
1894,16,0,151,1,
2527,1895,17,1896,15,
1897,4,30,37,0,
86,0,101,0,99,
0,68,0,101,0,
99,0,108,0,97,
0,114,0,97,0,
116,0,105,0,111,
0,110,0,1,-1,
1,5,1898,20,1899,
4,32,86,0,101,
0,99,0,68,0,
101,0,99,0,108,
0,97,0,114,0,
97,0,116,0,105,
0,111,0,110,0,
95,0,49,0,1,
215,1,3,1,3,
1,2,1900,22,1,
51,1,2528,1901,16,
0,498,1,19,1269,
1,20,1902,16,0,
142,1,2281,1276,1,
525,1339,1,2539,1903,
16,0,510,1,30,
1904,17,1905,15,1891,
1,-1,1,5,1906,
20,1907,4,50,65,
0,114,0,103,0,
117,0,109,0,101,
0,110,0,116,0,
68,0,101,0,99,
0,108,0,97,0,
114,0,97,0,116,
0,105,0,111,0,
110,0,76,0,105,
0,115,0,116,0,
95,0,50,0,1,
205,1,3,1,4,
1,3,1908,22,1,
41,1,1002,1715,1,
2542,1909,17,1910,15,
1911,4,30,37,0,
82,0,111,0,116,
0,68,0,101,0,
99,0,108,0,97,
0,114,0,97,0,
116,0,105,0,111,
0,110,0,1,-1,
1,5,1912,20,1913,
4,32,82,0,111,
0,116,0,68,0,
101,0,99,0,108,
0,97,0,114,0,
97,0,116,0,105,
0,111,0,110,0,
95,0,49,0,1,
216,1,3,1,3,
1,2,1914,22,1,
52,1,2543,1915,16,
0,514,1,40,1300,
1,41,1916,17,1917,
15,1918,4,26,37,
0,65,0,114,0,
103,0,117,0,109,
0,101,0,110,0,
116,0,76,0,105,
0,115,0,116,0,
1,-1,1,5,709,
1,0,1,0,1919,
22,1,169,1,42,
1920,17,1921,15,1922,
4,38,37,0,69,
0,120,0,112,0,
114,0,101,0,115,
0,115,0,105,0,
111,0,110,0,65,
0,114,0,103,0,
117,0,109,0,101,
0,110,0,116,0,
1,-1,1,5,1923,
20,1924,4,40,69,
0,120,0,112,0,
114,0,101,0,115,
0,115,0,105,0,
111,0,110,0,65,
0,114,0,103,0,
117,0,109,0,101,
0,110,0,116,0,
95,0,49,0,1,
335,1,3,1,2,
1,1,1925,22,1,
172,1,44,1306,1,
47,1307,1,48,1313,
1,49,1319,1,50,
1324,1,51,1329,1,
283,1295,1,305,1334,
1,63,1345,1,66,
1351,1,67,1356,1,
1478,1575,1,69,1366,
1,70,1371,1,2581,
1926,17,1927,15,1891,
1,-1,1,5,140,
1,0,1,0,1892,
1,68,1361,1,74,
1376,1,1013,1381,1,
2335,1928,16,0,151,
1,1332,1386,1,1048,
1462,1,2590,1929,16,
0,142,1,82,1403,
1,1296,1290,1,1341,
1420,1,328,1425,1,
1303,1430,1,1096,1694,
1,93,1435,1,1550,
1440,1,352,1467,1,
2775,1930,16,0,142,
1,107,1455,1,1114,
1461,1,1370,1570,1,
118,1473,1,1123,1478,
1,371,1483,1,1377,
1489,1,375,1494,1,
377,1499,1,827,1448,
1,380,1509,1,883,
1515,1,373,1527,1,
130,1532,1,379,1504,
1,143,1537,1,1152,
1543,1,387,1931,16,
0,643,1,1406,1548,
1,1159,1555,1,157,
1560,1,1413,1565,1,
1665,1591,1,412,1932,
16,0,680,1,1094,
1933,16,0,711,1,
172,1586,1,2766,1934,
17,1935,15,1891,1,
-1,1,5,140,1,
0,1,0,1892,1,
1188,1596,1,437,1936,
16,0,755,1,1442,
1601,1,1694,1937,16,
0,151,1,942,1607,
1,1195,1613,1,1449,
1618,1,1701,1623,1,
447,1628,1,188,1635,
1,205,1640,1,2467,
1938,17,1939,15,1891,
1,-1,1,5,1940,
20,1941,4,50,65,
0,114,0,103,0,
117,0,109,0,101,
0,110,0,116,0,
68,0,101,0,99,
0,108,0,97,0,
114,0,97,0,116,
0,105,0,111,0,
110,0,76,0,105,
0,115,0,116,0,
95,0,49,0,1,
204,1,3,1,2,
1,1,1942,22,1,
40,1,461,1943,16,
0,711,1,464,1944,
17,1945,15,1918,1,
-1,1,5,1946,20,
1947,4,28,65,0,
114,0,103,0,117,
0,109,0,101,0,
110,0,116,0,76,
0,105,0,115,0,
116,0,95,0,50,
0,1,334,1,3,
1,4,1,3,1948,
22,1,171,1,1224,
1645,1,223,1650,1,
1730,1655,1,476,1660,
1,477,1666,1,1231,
1671,1,479,1676,1,
480,1681,1,1485,1687,
1,459,1949,17,1950,
15,1918,1,-1,1,
5,709,1,0,1,
0,1919,1,242,1700,
1,478,1705,1,481,
1951,17,1952,15,1918,
1,-1,1,5,1953,
20,1954,4,28,65,
0,114,0,103,0,
117,0,109,0,101,
0,110,0,116,0,
76,0,105,0,115,
0,116,0,95,0,
49,0,1,333,1,
3,1,2,1,1,
1955,22,1,170,1,
1001,1710,1,2508,1956,
17,1957,15,1958,4,
30,37,0,75,0,
101,0,121,0,68,
0,101,0,99,0,
108,0,97,0,114,
0,97,0,116,0,
105,0,111,0,110,
0,1,-1,1,5,
1959,20,1960,4,32,
75,0,101,0,121,
0,68,0,101,0,
99,0,108,0,97,
0,114,0,97,0,
116,0,105,0,111,
0,110,0,95,0,
49,0,1,213,1,
3,1,3,1,2,
1961,22,1,49,1,
2509,1962,16,0,475,
1,15,1963,19,334,
1,15,1964,5,6,
1,1114,1965,16,0,
332,1,1621,1966,16,
0,754,1,2781,1967,
16,0,795,1,40,
1968,16,0,639,1,
19,1269,1,9,1235,
1,16,1969,19,136,
1,16,1970,5,146,
1,2765,1971,16,0,
784,1,256,1972,16,
0,206,1,1261,1973,
16,0,206,1,509,
1974,16,0,206,1,
9,1975,16,0,134,
1,2521,1976,16,0,
490,1,2021,840,1,
1775,1977,16,0,206,
1,2029,847,1,2030,
853,1,2031,858,1,
2032,863,1,2033,868,
1,277,1978,16,0,
206,1,2035,874,1,
2037,879,1,2039,884,
1,32,1979,16,0,
206,1,2041,890,1,
2293,1980,16,0,206,
1,2043,896,1,2045,
901,1,40,1981,16,
0,185,1,41,1982,
16,0,206,1,1297,
1983,16,0,206,1,
43,1984,16,0,206,
1,44,1985,16,0,
185,1,1803,909,1,
1804,1986,16,0,206,
1,299,1987,16,0,
206,1,2480,1988,17,
1989,15,1990,4,24,
37,0,73,0,110,
0,116,0,65,0,
114,0,103,0,69,
0,118,0,101,0,
110,0,116,0,1,
-1,1,5,1991,20,
1992,4,26,73,0,
110,0,116,0,65,
0,114,0,103,0,
69,0,118,0,101,
0,110,0,116,0,
95,0,55,0,1,
367,1,3,1,2,
1,1,1993,22,1,
204,1,52,1994,16,
0,206,1,2484,1995,
17,1996,15,1990,1,
-1,1,5,1997,20,
1998,4,26,73,0,
110,0,116,0,65,
0,114,0,103,0,
69,0,118,0,101,
0,110,0,116,0,
95,0,51,0,1,
363,1,3,1,2,
1,1,1999,22,1,
200,1,2567,2000,16,
0,750,1,1515,2001,
16,0,206,1,2318,
2002,16,0,206,1,
2491,2003,17,2004,15,
2005,4,26,37,0,
86,0,111,0,105,
0,100,0,65,0,
114,0,103,0,69,
0,118,0,101,0,
110,0,116,0,1,
-1,1,5,2006,20,
2007,4,28,86,0,
111,0,105,0,100,
0,65,0,114,0,
103,0,69,0,118,
0,101,0,110,0,
116,0,95,0,54,
0,1,356,1,3,
1,2,1,1,2008,
22,1,193,1,62,
2009,16,0,228,1,
63,2010,16,0,185,
1,2495,2011,17,2012,
15,2005,1,-1,1,
5,2013,20,2014,4,
28,86,0,111,0,
105,0,100,0,65,
0,114,0,103,0,
69,0,118,0,101,
0,110,0,116,0,
95,0,50,0,1,
352,1,3,1,2,
1,1,2015,22,1,
189,1,2575,2016,16,
0,759,1,2075,2017,
16,0,206,1,1574,
921,1,1479,2018,16,
0,206,1,2580,2019,
16,0,352,1,71,
2020,16,0,206,1,
1658,2021,16,0,790,
1,1833,2022,16,0,
321,1,1834,2023,16,
0,206,1,2337,2024,
16,0,206,1,79,
2025,16,0,206,1,
1335,2026,16,0,206,
1,322,2027,16,0,
206,1,76,2028,16,
0,206,1,85,2029,
16,0,206,1,89,
2030,16,0,206,1,
346,2031,16,0,206,
1,97,2032,16,0,
206,1,2106,2033,16,
0,206,1,102,2034,
16,0,206,1,1860,
943,1,2458,998,1,
2364,949,1,2536,2035,
16,0,633,1,2782,
2036,16,0,206,1,
1990,2037,16,0,206,
1,112,2038,16,0,
206,1,1117,2039,16,
0,206,1,1873,958,
1,1875,2040,16,0,
436,1,1876,2041,16,
0,206,1,2551,2042,
16,0,642,1,124,
2043,16,0,206,1,
2478,2044,17,2045,15,
1990,1,-1,1,5,
2046,20,2047,4,26,
73,0,110,0,116,
0,65,0,114,0,
103,0,69,0,118,
0,101,0,110,0,
116,0,95,0,57,
0,1,369,1,3,
1,2,1,1,2048,
22,1,206,1,2136,
965,1,2559,2049,16,
0,536,1,525,2050,
16,0,206,1,137,
2051,16,0,206,1,
381,2052,16,0,206,
1,1901,2053,16,0,
206,1,1153,2054,16,
0,206,1,151,2055,
16,0,206,1,1407,
2056,16,0,206,1,
1659,2057,16,0,206,
1,2413,2058,16,0,
206,1,406,2059,16,
0,206,1,1371,2060,
16,0,206,1,2105,
936,1,166,2061,16,
0,206,1,1622,2062,
16,0,206,1,1931,
983,1,1932,2063,16,
0,525,1,1933,2064,
16,0,206,1,431,
2065,16,0,206,1,
1585,2066,16,0,206,
1,182,2067,16,0,
206,1,1189,2068,16,
0,206,1,1443,2069,
16,0,206,1,1695,
2070,16,0,206,1,
2198,2071,16,0,206,
1,447,2072,16,0,
206,1,199,2073,16,
0,206,1,2459,1004,
1,1958,2074,16,0,
206,1,2462,1011,1,
1657,1016,1,2464,1021,
1,459,2075,16,0,
206,1,462,2076,16,
0,206,1,2471,2077,
17,2078,15,2079,4,
36,37,0,75,0,
101,0,121,0,73,
0,110,0,116,0,
73,0,110,0,116,
0,65,0,114,0,
103,0,69,0,118,
0,101,0,110,0,
116,0,1,-1,1,
5,2080,20,2081,4,
38,75,0,101,0,
121,0,73,0,110,
0,116,0,73,0,
110,0,116,0,65,
0,114,0,103,0,
69,0,118,0,101,
0,110,0,116,0,
95,0,49,0,1,
376,1,3,1,2,
1,1,2082,22,1,
213,1,2472,2083,17,
2084,15,2085,4,36,
37,0,73,0,110,
0,116,0,86,0,
101,0,99,0,86,
0,101,0,99,0,
65,0,114,0,103,
0,69,0,118,0,
101,0,110,0,116,
0,1,-1,1,5,
2086,20,2087,4,38,
73,0,110,0,116,
0,86,0,101,0,
99,0,86,0,101,
0,99,0,65,0,
114,0,103,0,69,
0,118,0,101,0,
110,0,116,0,95,
0,49,0,1,375,
1,3,1,2,1,
1,2088,22,1,212,
1,2473,2089,17,2090,
15,2091,4,36,37,
0,73,0,110,0,
116,0,82,0,111,
0,116,0,82,0,
111,0,116,0,65,
0,114,0,103,0,
69,0,118,0,101,
0,110,0,116,0,
1,-1,1,5,2092,
20,2093,4,38,73,
0,110,0,116,0,
82,0,111,0,116,
0,82,0,111,0,
116,0,65,0,114,
0,103,0,69,0,
118,0,101,0,110,
0,116,0,95,0,
49,0,1,374,1,
3,1,2,1,1,
2094,22,1,211,1,
2474,2095,17,2096,15,
2097,4,30,37,0,
86,0,101,0,99,
0,116,0,111,0,
114,0,65,0,114,
0,103,0,69,0,
118,0,101,0,110,
0,116,0,1,-1,
1,5,2098,20,2099,
4,32,86,0,101,
0,99,0,116,0,
111,0,114,0,65,
0,114,0,103,0,
69,0,118,0,101,
0,110,0,116,0,
95,0,51,0,1,
373,1,3,1,2,
1,1,2100,22,1,
210,1,2475,2101,17,
2102,15,2097,1,-1,
1,5,2103,20,2104,
4,32,86,0,101,
0,99,0,116,0,
111,0,114,0,65,
0,114,0,103,0,
69,0,118,0,101,
0,110,0,116,0,
95,0,50,0,1,
372,1,3,1,2,
1,1,2105,22,1,
209,1,2476,2106,17,
2107,15,2097,1,-1,
1,5,2108,20,2109,
4,32,86,0,101,
0,99,0,116,0,
111,0,114,0,65,
0,114,0,103,0,
69,0,118,0,101,
0,110,0,116,0,
95,0,49,0,1,
371,1,3,1,2,
1,1,2110,22,1,
208,1,2477,2111,17,
2112,15,1990,1,-1,
1,5,2113,20,2114,
4,28,73,0,110,
0,116,0,65,0,
114,0,103,0,69,
0,118,0,101,0,
110,0,116,0,95,
0,49,0,48,0,
1,370,1,3,1,
2,1,1,2115,22,
1,207,1,2227,1030,
1,2479,2116,17,2117,
15,1990,1,-1,1,
5,2118,20,2119,4,
26,73,0,110,0,
116,0,65,0,114,
0,103,0,69,0,
118,0,101,0,110,
0,116,0,95,0,
56,0,1,368,1,
3,1,2,1,1,
2120,22,1,205,1,
1225,2121,16,0,206,
1,2481,2122,17,2123,
15,1990,1,-1,1,
5,2124,20,2125,4,
26,73,0,110,0,
116,0,65,0,114,
0,103,0,69,0,
118,0,101,0,110,
0,116,0,95,0,
54,0,1,366,1,
3,1,2,1,1,
2126,22,1,203,1,
2482,2127,17,2128,15,
1990,1,-1,1,5,
2129,20,2130,4,26,
73,0,110,0,116,
0,65,0,114,0,
103,0,69,0,118,
0,101,0,110,0,
116,0,95,0,53,
0,1,365,1,3,
1,2,1,1,2131,
22,1,202,1,2483,
2132,17,2133,15,1990,
1,-1,1,5,2134,
20,2135,4,26,73,
0,110,0,116,0,
65,0,114,0,103,
0,69,0,118,0,
101,0,110,0,116,
0,95,0,52,0,
1,364,1,3,1,
2,1,1,2136,22,
1,201,1,1731,2137,
16,0,206,1,2485,
2138,17,2139,15,1990,
1,-1,1,5,2140,
20,2141,4,26,73,
0,110,0,116,0,
65,0,114,0,103,
0,69,0,118,0,
101,0,110,0,116,
0,95,0,50,0,
1,362,1,3,1,
2,1,1,2142,22,
1,199,1,2486,2143,
17,2144,15,1990,1,
-1,1,5,2145,20,
2146,4,26,73,0,
110,0,116,0,65,
0,114,0,103,0,
69,0,118,0,101,
0,110,0,116,0,
95,0,49,0,1,
361,1,3,1,2,
1,1,2147,22,1,
198,1,2487,2148,17,
2149,15,2150,4,24,
37,0,75,0,101,
0,121,0,65,0,
114,0,103,0,69,
0,118,0,101,0,
110,0,116,0,1,
-1,1,5,2151,20,
2152,4,26,75,0,
101,0,121,0,65,
0,114,0,103,0,
69,0,118,0,101,
0,110,0,116,0,
95,0,50,0,1,
360,1,3,1,2,
1,1,2153,22,1,
197,1,2488,2154,17,
2155,15,2150,1,-1,
1,5,2156,20,2157,
4,26,75,0,101,
0,121,0,65,0,
114,0,103,0,69,
0,118,0,101,0,
110,0,116,0,95,
0,49,0,1,359,
1,3,1,2,1,
1,2158,22,1,196,
1,2489,2159,17,2160,
15,2005,1,-1,1,
5,2161,20,2162,4,
28,86,0,111,0,
105,0,100,0,65,
0,114,0,103,0,
69,0,118,0,101,
0,110,0,116,0,
95,0,56,0,1,
358,1,3,1,2,
1,1,2163,22,1,
195,1,2490,2164,17,
2165,15,2005,1,-1,
1,5,2166,20,2167,
4,28,86,0,111,
0,105,0,100,0,
65,0,114,0,103,
0,69,0,118,0,
101,0,110,0,116,
0,95,0,55,0,
1,357,1,3,1,
2,1,1,2168,22,
1,194,1,1989,1038,
1,2492,2169,17,2170,
15,2005,1,-1,1,
5,2171,20,2172,4,
28,86,0,111,0,
105,0,100,0,65,
0,114,0,103,0,
69,0,118,0,101,
0,110,0,116,0,
95,0,53,0,1,
355,1,3,1,2,
1,1,2173,22,1,
192,1,2493,2174,17,
2175,15,2005,1,-1,
1,5,2176,20,2177,
4,28,86,0,111,
0,105,0,100,0,
65,0,114,0,103,
0,69,0,118,0,
101,0,110,0,116,
0,95,0,52,0,
1,354,1,3,1,
2,1,1,2178,22,
1,191,1,2494,2179,
17,2180,15,2005,1,
-1,1,5,2181,20,
2182,4,28,86,0,
111,0,105,0,100,
0,65,0,114,0,
103,0,69,0,118,
0,101,0,110,0,
116,0,95,0,51,
0,1,353,1,3,
1,2,1,1,2183,
22,1,190,1,236,
2184,16,0,206,1,
2496,2185,17,2186,15,
2005,1,-1,1,5,
2187,20,2188,4,28,
86,0,111,0,105,
0,100,0,65,0,
114,0,103,0,69,
0,118,0,101,0,
110,0,116,0,95,
0,49,0,1,351,
1,3,1,2,1,
1,2189,22,1,188,
1,2497,2190,17,2191,
15,2192,4,12,37,
0,69,0,118,0,
101,0,110,0,116,
0,1,-1,1,5,
2193,20,2194,4,14,
69,0,118,0,101,
0,110,0,116,0,
95,0,56,0,1,
350,1,3,1,2,
1,1,2195,22,1,
187,1,2498,2196,17,
2197,15,2192,1,-1,
1,5,2198,20,2199,
4,14,69,0,118,
0,101,0,110,0,
116,0,95,0,55,
0,1,349,1,3,
1,2,1,1,2200,
22,1,186,1,2499,
2201,17,2202,15,2192,
1,-1,1,5,2203,
20,2204,4,14,69,
0,118,0,101,0,
110,0,116,0,95,
0,54,0,1,348,
1,3,1,2,1,
1,2205,22,1,185,
1,2500,2206,17,2207,
15,2192,1,-1,1,
5,2208,20,2209,4,
14,69,0,118,0,
101,0,110,0,116,
0,95,0,53,0,
1,347,1,3,1,
2,1,1,2210,22,
1,184,1,2501,2211,
17,2212,15,2192,1,
-1,1,5,2213,20,
2214,4,14,69,0,
118,0,101,0,110,
0,116,0,95,0,
52,0,1,346,1,
3,1,2,1,1,
2215,22,1,183,1,
2502,2216,17,2217,15,
2192,1,-1,1,5,
2218,20,2219,4,14,
69,0,118,0,101,
0,110,0,116,0,
95,0,51,0,1,
345,1,3,1,2,
1,1,2220,22,1,
182,1,2503,2221,17,
2222,15,2192,1,-1,
1,5,2223,20,2224,
4,14,69,0,118,
0,101,0,110,0,
116,0,95,0,50,
0,1,344,1,3,
1,2,1,1,2225,
22,1,181,1,2504,
2226,17,2227,15,2192,
1,-1,1,5,2228,
20,2229,4,14,69,
0,118,0,101,0,
110,0,116,0,95,
0,49,0,1,343,
1,3,1,2,1,
1,2230,22,1,180,
1,2505,2231,16,0,
469,1,217,2232,16,
0,206,1,1756,2233,
16,0,206,1,17,
2234,19,163,1,17,
2235,5,134,1,1,
2236,17,2237,15,2238,
4,18,37,0,84,
0,121,0,112,0,
101,0,110,0,97,
0,109,0,101,0,
1,-1,1,5,2239,
20,2240,4,20,84,
0,121,0,112,0,
101,0,110,0,97,
0,109,0,101,0,
95,0,55,0,1,
342,1,3,1,2,
1,1,2241,22,1,
179,1,2,2242,17,
2243,15,2238,1,-1,
1,5,2244,20,2245,
4,20,84,0,121,
0,112,0,101,0,
110,0,97,0,109,
0,101,0,95,0,
54,0,1,341,1,
3,1,2,1,1,
2246,22,1,178,1,
3,2247,17,2248,15,
2238,1,-1,1,5,
2249,20,2250,4,20,
84,0,121,0,112,
0,101,0,110,0,
97,0,109,0,101,
0,95,0,53,0,
1,340,1,3,1,
2,1,1,2251,22,
1,177,1,4,2252,
17,2253,15,2238,1,
-1,1,5,2254,20,
2255,4,20,84,0,
121,0,112,0,101,
0,110,0,97,0,
109,0,101,0,95,
0,52,0,1,339,
1,3,1,2,1,
1,2256,22,1,176,
1,5,2257,17,2258,
15,2238,1,-1,1,
5,2259,20,2260,4,
20,84,0,121,0,
112,0,101,0,110,
0,97,0,109,0,
101,0,95,0,51,
0,1,338,1,3,
1,2,1,1,2261,
22,1,175,1,6,
2262,17,2263,15,2238,
1,-1,1,5,2264,
20,2265,4,20,84,
0,121,0,112,0,
101,0,110,0,97,
0,109,0,101,0,
95,0,50,0,1,
337,1,3,1,2,
1,1,2266,22,1,
174,1,7,2267,17,
2268,15,2238,1,-1,
1,5,2269,20,2270,
4,20,84,0,121,
0,112,0,101,0,
110,0,97,0,109,
0,101,0,95,0,
49,0,1,336,1,
3,1,2,1,1,
2271,22,1,173,1,
1514,1230,1,9,1235,
1,10,1889,1,262,
1241,1,1267,1247,1,
2775,2272,16,0,792,
1,1521,1252,1,1773,
2273,16,0,264,1,
2527,1895,1,19,1269,
1,20,2274,16,0,
161,1,2531,2275,17,
2276,15,2277,4,66,
37,0,73,0,110,
0,116,0,86,0,
101,0,99,0,86,
0,101,0,99,0,
65,0,114,0,103,
0,117,0,109,0,
101,0,110,0,116,
0,68,0,101,0,
99,0,108,0,97,
0,114,0,97,0,
116,0,105,0,111,
0,110,0,76,0,
105,0,115,0,116,
0,1,-1,1,5,
2278,20,2279,4,68,
73,0,110,0,116,
0,86,0,101,0,
99,0,86,0,101,
0,99,0,65,0,
114,0,103,0,117,
0,109,0,101,0,
110,0,116,0,68,
0,101,0,99,0,
108,0,97,0,114,
0,97,0,116,0,
105,0,111,0,110,
0,76,0,105,0,
115,0,116,0,95,
0,49,0,1,210,
1,3,1,6,1,
5,2280,22,1,46,
1,2281,1276,1,525,
1339,1,30,1904,1,
1002,1715,1,283,1295,
1,2546,2281,17,2282,
15,2283,4,66,37,
0,73,0,110,0,
116,0,82,0,111,
0,116,0,82,0,
111,0,116,0,65,
0,114,0,103,0,
117,0,109,0,101,
0,110,0,116,0,
68,0,101,0,99,
0,108,0,97,0,
114,0,97,0,116,
0,105,0,111,0,
110,0,76,0,105,
0,115,0,116,0,
1,-1,1,5,2284,
20,2285,4,68,73,
0,110,0,116,0,
82,0,111,0,116,
0,82,0,111,0,
116,0,65,0,114,
0,103,0,117,0,
109,0,101,0,110,
0,116,0,68,0,
101,0,99,0,108,
0,97,0,114,0,
97,0,116,0,105,
0,111,0,110,0,
76,0,105,0,115,
0,116,0,95,0,
49,0,1,209,1,
3,1,6,1,5,
2286,22,1,45,1,
2547,2287,16,0,519,
1,1010,2288,16,0,
701,1,40,1300,1,
41,1916,1,42,1920,
1,44,1306,1,2555,
2289,16,0,645,1,
1260,1218,1,47,1307,
1,48,1313,1,49,
1319,1,50,1324,1,
51,1329,1,2562,2290,
17,2291,15,2292,4,
54,37,0,73,0,
110,0,116,0,65,
0,114,0,103,0,
117,0,109,0,101,
0,110,0,116,0,
68,0,101,0,99,
0,108,0,97,0,
114,0,97,0,116,
0,105,0,111,0,
110,0,76,0,105,
0,115,0,116,0,
1,-1,1,5,2293,
20,2294,4,56,73,
0,110,0,116,0,
65,0,114,0,103,
0,117,0,109,0,
101,0,110,0,116,
0,68,0,101,0,
99,0,108,0,97,
0,114,0,97,0,
116,0,105,0,111,
0,110,0,76,0,
105,0,115,0,116,
0,95,0,49,0,
1,207,1,3,1,
2,1,1,2295,22,
1,43,1,2563,2296,
16,0,661,1,305,
1334,1,2576,2297,16,
0,571,1,2570,2298,
17,2299,15,2300,4,
54,37,0,75,0,
101,0,121,0,65,
0,114,0,103,0,
117,0,109,0,101,
0,110,0,116,0,
68,0,101,0,99,
0,108,0,97,0,
114,0,97,0,116,
0,105,0,111,0,
110,0,76,0,105,
0,115,0,116,0,
1,-1,1,5,2301,
20,2302,4,56,75,
0,101,0,121,0,
65,0,114,0,103,
0,117,0,109,0,
101,0,110,0,116,
0,68,0,101,0,
99,0,108,0,97,
0,114,0,97,0,
116,0,105,0,111,
0,110,0,76,0,
105,0,115,0,116,
0,95,0,49,0,
1,206,1,3,1,
2,1,1,2303,22,
1,42,1,61,2304,
16,0,220,1,63,
1345,1,66,1351,1,
67,1356,1,68,1361,
1,69,1366,1,70,
1371,1,2581,1926,1,
73,2305,16,0,230,
1,74,1376,1,1013,
1381,1,2335,2306,16,
0,266,1,1332,1386,
1,1048,1462,1,2590,
2307,16,0,774,1,
82,1403,1,1840,2308,
16,0,338,1,2516,
2309,17,2310,15,2311,
4,66,37,0,75,
0,101,0,121,0,
73,0,110,0,116,
0,73,0,110,0,
116,0,65,0,114,
0,103,0,117,0,
109,0,101,0,110,
0,116,0,68,0,
101,0,99,0,108,
0,97,0,114,0,
97,0,116,0,105,
0,111,0,110,0,
76,0,105,0,115,
0,116,0,1,-1,
1,5,2312,20,2313,
4,68,75,0,101,
0,121,0,73,0,
110,0,116,0,73,
0,110,0,116,0,
65,0,114,0,103,
0,117,0,109,0,
101,0,110,0,116,
0,68,0,101,0,
99,0,108,0,97,
0,114,0,97,0,
116,0,105,0,111,
0,110,0,76,0,
105,0,115,0,116,
0,95,0,49,0,
1,211,1,3,1,
6,1,5,2314,22,
1,47,1,2517,2315,
16,0,487,1,328,
1425,1,1303,1430,1,
1096,1694,1,93,1435,
1,1550,1440,1,827,
1448,1,2532,2316,16,
0,628,1,1011,1224,
1,107,1455,1,1114,
1461,1,2542,1909,1,
1871,2317,16,0,348,
1,1370,1570,1,1478,
1575,1,118,1473,1,
1123,1478,1,371,1483,
1,1377,1489,1,375,
1494,1,1882,2318,16,
0,363,1,377,1499,
1,352,1467,1,379,
1504,1,1341,1420,1,
130,1532,1,2074,2319,
16,0,641,1,373,
1527,1,1012,2320,16,
0,703,1,380,1509,
1,143,1537,1,1152,
1543,1,1406,1548,1,
1159,1555,1,157,1560,
1,1413,1565,1,883,
1515,1,2512,1882,1,
1296,1290,1,172,1586,
1,1665,1591,1,2766,
1934,1,1939,2321,16,
0,482,1,1188,1596,
1,1442,1601,1,188,
1635,1,942,1607,1,
1195,1613,1,1449,1618,
1,1701,1623,1,447,
1628,1,1094,2322,16,
0,785,1,205,1640,
1,2554,2323,17,2324,
15,2325,4,60,37,
0,86,0,101,0,
99,0,116,0,111,
0,114,0,65,0,
114,0,103,0,117,
0,109,0,101,0,
110,0,116,0,68,
0,101,0,99,0,
108,0,97,0,114,
0,97,0,116,0,
105,0,111,0,110,
0,76,0,105,0,
115,0,116,0,1,
-1,1,5,2326,20,
2327,4,62,86,0,
101,0,99,0,116,
0,111,0,114,0,
65,0,114,0,103,
0,117,0,109,0,
101,0,110,0,116,
0,68,0,101,0,
99,0,108,0,97,
0,114,0,97,0,
116,0,105,0,111,
0,110,0,76,0,
105,0,115,0,116,
0,95,0,49,0,
1,208,1,3,1,
2,1,1,2328,22,
1,44,1,2467,1938,
1,464,1944,1,2197,
2329,16,0,772,1,
1224,1645,1,223,1650,
1,1730,1655,1,2571,
2330,16,0,673,1,
477,1666,1,1231,1671,
1,479,1676,1,480,
1681,1,1485,1687,1,
459,1949,1,476,1660,
1,242,1700,1,478,
1705,1,481,1951,1,
1001,1710,1,2508,1956,
1,18,2331,19,564,
1,18,2332,5,84,
1,1011,1224,1,1012,
2333,16,0,562,1,
1013,1381,1,262,1241,
1,1267,2334,16,0,
562,1,515,2335,16,
0,562,1,1521,2336,
16,0,562,1,525,
1339,1,2788,2337,16,
0,562,1,283,1295,
1,2299,2338,16,0,
562,1,42,2339,16,
0,562,1,40,1300,
1,44,1306,1,47,
1307,1,1303,2340,16,
0,562,1,1555,2341,
16,0,562,1,50,
1324,1,48,1313,1,
49,1319,1,51,1329,
1,63,1345,1,305,
1334,1,66,1351,1,
67,1356,1,68,1361,
1,69,1366,1,70,
1371,1,73,2342,16,
0,562,1,74,1376,
1,328,1425,1,1048,
2343,16,0,562,1,
82,2344,16,0,562,
1,1840,2345,16,0,
562,1,1591,2346,16,
0,562,1,1341,2347,
16,0,562,1,1096,
1694,1,93,1435,1,
352,1467,1,107,2348,
16,0,562,1,1114,
1461,1,118,2349,16,
0,562,1,1123,2350,
16,0,562,1,371,
1483,1,1628,2351,16,
0,562,1,375,1494,
1,1882,2352,16,0,
562,1,377,1499,1,
379,1504,1,380,1509,
1,883,2353,16,0,
562,1,373,1527,1,
130,2354,16,0,562,
1,143,2355,16,0,
562,1,387,2356,16,
0,562,1,1159,2357,
16,0,562,1,157,
2358,16,0,562,1,
1413,2359,16,0,562,
1,1665,2360,16,0,
562,1,412,2361,16,
0,562,1,1377,2362,
16,0,562,1,172,
2363,16,0,562,1,
1939,2364,16,0,562,
1,437,2365,16,0,
562,1,188,2366,16,
0,562,1,942,2367,
16,0,562,1,1195,
2368,16,0,562,1,
1449,2369,16,0,562,
1,1701,2370,16,0,
562,1,447,1628,1,
205,2371,16,0,562,
1,827,2372,16,0,
562,1,223,2373,16,
0,562,1,476,1660,
1,477,1666,1,1231,
2374,16,0,562,1,
479,1676,1,480,1681,
1,1485,2375,16,0,
562,1,1737,2376,16,
0,562,1,242,2377,
16,0,562,1,478,
1705,1,1001,1710,1,
1002,1715,1,19,2378,
19,254,1,19,2379,
5,176,1,256,2380,
16,0,252,1,1261,
2381,16,0,252,1,
1011,1224,1,1012,2382,
16,0,521,1,2458,
998,1,262,1241,1,
1267,2383,16,0,521,
1,2021,840,1,1521,
2384,16,0,521,1,
1775,2385,16,0,252,
1,2029,847,1,2030,
853,1,2031,858,1,
2032,863,1,2033,868,
1,277,2386,16,0,
252,1,2788,2387,16,
0,521,1,2037,879,
1,2039,884,1,32,
2388,16,0,252,1,
2464,1021,1,2293,2389,
16,0,252,1,2043,
896,1,2045,901,1,
2299,2390,16,0,521,
1,41,2391,16,0,
252,1,42,2392,16,
0,521,1,40,1300,
1,44,1306,1,43,
2393,16,0,252,1,
1804,2394,16,0,252,
1,48,1313,1,49,
1319,1,47,1307,1,
51,1329,1,52,2395,
16,0,252,1,50,
1324,1,305,1334,1,
1096,1694,1,1515,2396,
16,0,252,1,2318,
2397,16,0,252,1,
283,1295,1,63,1345,
1,66,1351,1,67,
1356,1,68,1361,1,
69,1366,1,70,1371,
1,71,2398,16,0,
252,1,73,2399,16,
0,521,1,74,1376,
1,1013,1381,1,76,
2400,16,0,252,1,
1834,2401,16,0,252,
1,2337,2402,16,0,
252,1,79,2403,16,
0,252,1,1335,2404,
16,0,252,1,299,
2405,16,0,252,1,
82,2406,16,0,521,
1,1840,2407,16,0,
521,1,1297,2408,16,
0,252,1,85,2409,
16,0,252,1,1341,
2410,16,0,521,1,
89,2411,16,0,252,
1,1303,2412,16,0,
521,1,2035,874,1,
93,1435,1,322,2413,
16,0,252,1,97,
2414,16,0,252,1,
2041,890,1,1555,2415,
16,0,521,1,827,
2416,16,0,521,1,
102,2417,16,0,252,
1,1860,943,1,1803,
909,1,2364,949,1,
107,2418,16,0,521,
1,509,2419,16,0,
252,1,1114,1461,1,
112,2420,16,0,252,
1,1117,2421,16,0,
252,1,352,1467,1,
1873,958,1,118,2422,
16,0,521,1,1123,
2423,16,0,521,1,
371,1483,1,515,2424,
16,0,521,1,1377,
2425,16,0,521,1,
124,2426,16,0,252,
1,1882,2427,16,0,
521,1,377,1499,1,
379,1504,1,380,1509,
1,130,2428,16,0,
521,1,346,2429,16,
0,252,1,2075,2430,
16,0,252,1,373,
1527,1,387,2431,16,
0,521,1,137,2432,
16,0,252,1,143,
2433,16,0,521,1,
1901,2434,16,0,252,
1,1048,2435,16,0,
521,1,1153,2436,16,
0,252,1,375,1494,
1,151,2437,16,0,
252,1,1407,2438,16,
0,252,1,1659,2439,
16,0,252,1,2413,
2440,16,0,252,1,
1159,2441,16,0,521,
1,381,2442,16,0,
252,1,157,2443,16,
0,521,1,1413,2444,
16,0,521,1,883,
2445,16,0,521,1,
1371,2446,16,0,252,
1,328,1425,1,2105,
936,1,2106,2447,16,
0,252,1,166,2448,
16,0,252,1,525,
2449,16,0,252,1,
1622,2450,16,0,252,
1,406,2451,16,0,
252,1,1574,921,1,
172,2452,16,0,521,
1,1931,983,1,412,
2453,16,0,521,1,
1933,2454,16,0,252,
1,1876,2455,16,0,
252,1,431,2456,16,
0,252,1,1585,2457,
16,0,252,1,182,
2458,16,0,252,1,
1628,2459,16,0,521,
1,1189,2460,16,0,
252,1,437,2461,16,
0,521,1,1591,2462,
16,0,521,1,188,
2463,16,0,521,1,
1695,2464,16,0,252,
1,2198,2465,16,0,
252,1,1195,2466,16,
0,521,1,1449,2467,
16,0,521,1,1701,
2468,16,0,521,1,
447,2469,16,0,252,
1,2782,2470,16,0,
252,1,199,2471,16,
0,252,1,2459,1004,
1,1958,2472,16,0,
252,1,2462,1011,1,
1657,1016,1,205,2473,
16,0,521,1,459,
2474,16,0,252,1,
462,2475,16,0,252,
1,1665,2476,16,0,
521,1,217,2477,16,
0,252,1,2227,1030,
1,942,2478,16,0,
521,1,1225,2479,16,
0,252,1,223,2480,
16,0,521,1,1479,
2481,16,0,252,1,
1731,2482,16,0,252,
1,477,1666,1,1231,
2483,16,0,521,1,
479,1676,1,480,1681,
1,1485,2484,16,0,
521,1,1737,2485,16,
0,521,1,1989,1038,
1,1990,2486,16,0,
252,1,1443,2487,16,
0,252,1,236,2488,
16,0,252,1,2136,
965,1,476,1660,1,
242,2489,16,0,521,
1,478,1705,1,1939,
2490,16,0,521,1,
1001,1710,1,1002,1715,
1,1756,2491,16,0,
252,1,20,2492,19,
496,1,20,2493,5,
84,1,1011,1224,1,
1012,2494,16,0,494,
1,1013,1381,1,262,
1241,1,1267,2495,16,
0,494,1,515,2496,
16,0,494,1,1521,
2497,16,0,494,1,
525,1339,1,2788,2498,
16,0,494,1,283,
1295,1,2299,2499,16,
0,494,1,42,2500,
16,0,494,1,40,
1300,1,44,1306,1,
47,1307,1,1303,2501,
16,0,494,1,1555,
2502,16,0,494,1,
50,1324,1,48,1313,
1,49,1319,1,51,
1329,1,63,1345,1,
305,1334,1,66,1351,
1,67,1356,1,68,
1361,1,69,1366,1,
70,1371,1,73,2503,
16,0,494,1,74,
1376,1,328,2504,16,
0,494,1,1048,2505,
16,0,494,1,82,
2506,16,0,494,1,
1840,2507,16,0,494,
1,1591,2508,16,0,
494,1,1341,2509,16,
0,494,1,1096,1694,
1,93,1435,1,352,
2510,16,0,494,1,
107,2511,16,0,494,
1,1114,1461,1,118,
2512,16,0,494,1,
1123,2513,16,0,494,
1,371,1483,1,1628,
2514,16,0,494,1,
375,1494,1,1882,2515,
16,0,494,1,377,
1499,1,379,1504,1,
380,1509,1,883,2516,
16,0,494,1,373,
1527,1,130,2517,16,
0,494,1,143,2518,
16,0,494,1,387,
2519,16,0,494,1,
1159,2520,16,0,494,
1,157,2521,16,0,
494,1,1413,2522,16,
0,494,1,1665,2523,
16,0,494,1,412,
2524,16,0,494,1,
1377,2525,16,0,494,
1,172,2526,16,0,
494,1,1939,2527,16,
0,494,1,437,2528,
16,0,494,1,188,
2529,16,0,494,1,
942,2530,16,0,494,
1,1195,2531,16,0,
494,1,1449,2532,16,
0,494,1,1701,2533,
16,0,494,1,447,
1628,1,205,2534,16,
0,494,1,827,2535,
16,0,494,1,223,
2536,16,0,494,1,
476,1660,1,477,1666,
1,1231,2537,16,0,
494,1,479,1676,1,
480,1681,1,1485,2538,
16,0,494,1,1737,
2539,16,0,494,1,
242,2540,16,0,494,
1,478,1705,1,1001,
1710,1,1002,1715,1,
21,2541,19,468,1,
21,2542,5,84,1,
1011,1224,1,1012,2543,
16,0,466,1,1013,
1381,1,262,1241,1,
1267,2544,16,0,466,
1,515,2545,16,0,
466,1,1521,2546,16,
0,466,1,525,1339,
1,2788,2547,16,0,
466,1,283,1295,1,
2299,2548,16,0,466,
1,42,2549,16,0,
466,1,40,1300,1,
44,1306,1,47,1307,
1,1303,2550,16,0,
466,1,1555,2551,16,
0,466,1,50,1324,
1,48,1313,1,49,
1319,1,51,1329,1,
63,1345,1,305,1334,
1,66,1351,1,67,
1356,1,68,1361,1,
69,1366,1,70,1371,
1,73,2552,16,0,
466,1,74,1376,1,
328,2553,16,0,466,
1,1048,2554,16,0,
466,1,82,2555,16,
0,466,1,1840,2556,
16,0,466,1,1591,
2557,16,0,466,1,
1341,2558,16,0,466,
1,1096,1694,1,93,
1435,1,352,2559,16,
0,466,1,107,2560,
16,0,466,1,1114,
1461,1,118,2561,16,
0,466,1,1123,2562,
16,0,466,1,371,
1483,1,1628,2563,16,
0,466,1,375,1494,
1,1882,2564,16,0,
466,1,377,1499,1,
379,1504,1,380,1509,
1,883,2565,16,0,
466,1,373,1527,1,
130,2566,16,0,466,
1,143,2567,16,0,
466,1,387,2568,16,
0,466,1,1159,2569,
16,0,466,1,157,
2570,16,0,466,1,
1413,2571,16,0,466,
1,1665,2572,16,0,
466,1,412,2573,16,
0,466,1,1377,2574,
16,0,466,1,172,
2575,16,0,466,1,
1939,2576,16,0,466,
1,437,2577,16,0,
466,1,188,2578,16,
0,466,1,942,2579,
16,0,466,1,1195,
2580,16,0,466,1,
1449,2581,16,0,466,
1,1701,2582,16,0,
466,1,447,1628,1,
205,2583,16,0,466,
1,827,2584,16,0,
466,1,223,2585,16,
0,466,1,476,1660,
1,477,1666,1,1231,
2586,16,0,466,1,
479,1676,1,480,1681,
1,1485,2587,16,0,
466,1,1737,2588,16,
0,466,1,242,2589,
16,0,466,1,478,
1705,1,1001,1710,1,
1002,1715,1,22,2590,
19,419,1,22,2591,
5,84,1,1011,1224,
1,1012,2592,16,0,
417,1,1013,1381,1,
262,1241,1,1267,2593,
16,0,417,1,515,
2594,16,0,417,1,
1521,2595,16,0,417,
1,525,1339,1,2788,
2596,16,0,417,1,
283,1295,1,2299,2597,
16,0,417,1,42,
2598,16,0,417,1,
40,1300,1,44,1306,
1,47,1307,1,1303,
2599,16,0,417,1,
1555,2600,16,0,417,
1,50,1324,1,48,
1313,1,49,1319,1,
51,1329,1,63,1345,
1,305,1334,1,66,
1351,1,67,1356,1,
68,1361,1,69,1366,
1,70,1371,1,73,
2601,16,0,417,1,
74,1376,1,328,2602,
16,0,417,1,1048,
2603,16,0,417,1,
82,2604,16,0,417,
1,1840,2605,16,0,
417,1,1591,2606,16,
0,417,1,1341,2607,
16,0,417,1,1096,
1694,1,93,1435,1,
352,2608,16,0,417,
1,107,2609,16,0,
417,1,1114,1461,1,
118,2610,16,0,417,
1,1123,2611,16,0,
417,1,371,1483,1,
1628,2612,16,0,417,
1,375,1494,1,1882,
2613,16,0,417,1,
377,1499,1,379,1504,
1,380,1509,1,883,
2614,16,0,417,1,
373,1527,1,130,2615,
16,0,417,1,143,
2616,16,0,417,1,
387,2617,16,0,417,
1,1159,2618,16,0,
417,1,157,2619,16,
0,417,1,1413,2620,
16,0,417,1,1665,
2621,16,0,417,1,
412,2622,16,0,417,
1,1377,2623,16,0,
417,1,172,2624,16,
0,417,1,1939,2625,
16,0,417,1,437,
2626,16,0,417,1,
188,2627,16,0,417,
1,942,2628,16,0,
417,1,1195,2629,16,
0,417,1,1449,2630,
16,0,417,1,1701,
2631,16,0,417,1,
447,1628,1,205,2632,
16,0,417,1,827,
2633,16,0,417,1,
223,2634,16,0,417,
1,476,1660,1,477,
1666,1,1231,2635,16,
0,417,1,479,1676,
1,480,1681,1,1485,
2636,16,0,417,1,
1737,2637,16,0,417,
1,242,2638,16,0,
417,1,478,1705,1,
1001,1710,1,1002,1715,
1,23,2639,19,582,
1,23,2640,5,38,
1,1901,2641,16,0,
580,1,2075,2642,16,
0,580,1,1860,943,
1,1803,909,1,1804,
2643,16,0,580,1,
2413,2644,16,0,580,
1,2198,2645,16,0,
580,1,1873,958,1,
1657,1016,1,1989,1038,
1,1990,2646,16,0,
580,1,1775,2647,16,
0,580,1,32,2648,
16,0,580,1,2105,
936,1,2106,2649,16,
0,580,1,2364,949,
1,2227,1030,1,2337,
2650,16,0,580,1,
2021,840,1,2458,998,
1,2459,1004,1,2462,
1011,1,2136,965,1,
2464,1021,1,2029,847,
1,2030,853,1,2031,
858,1,2032,863,1,
2033,868,1,2035,874,
1,2037,879,1,2039,
884,1,1931,983,1,
2041,890,1,2043,896,
1,2045,901,1,1574,
921,1,1958,2651,16,
0,580,1,24,2652,
19,196,1,24,2653,
5,5,1,44,2654,
16,0,194,1,377,
2655,16,0,618,1,
40,2656,16,0,796,
1,63,2657,16,0,
222,1,373,2658,16,
0,614,1,25,2659,
19,324,1,25,2660,
5,177,1,256,2661,
16,0,623,1,1261,
2662,16,0,623,1,
1011,1224,1,1012,2663,
16,0,322,1,2458,
998,1,262,1241,1,
1267,2664,16,0,322,
1,2021,840,1,1521,
2665,16,0,322,1,
1775,2666,16,0,623,
1,2029,847,1,2030,
853,1,2031,858,1,
2032,863,1,2033,868,
1,277,2667,16,0,
623,1,2788,2668,16,
0,322,1,2037,879,
1,2039,884,1,32,
2669,16,0,623,1,
2464,1021,1,2293,2670,
16,0,623,1,2043,
896,1,2045,901,1,
2299,2671,16,0,322,
1,41,2672,16,0,
623,1,42,2673,16,
0,322,1,40,1300,
1,44,1306,1,43,
2674,16,0,623,1,
1804,2675,16,0,623,
1,48,1313,1,49,
1319,1,47,1307,1,
51,1329,1,52,2676,
16,0,623,1,50,
1324,1,305,1334,1,
1096,1694,1,1515,2677,
16,0,623,1,2318,
2678,16,0,623,1,
62,2679,16,0,623,
1,63,1345,1,66,
1351,1,67,1356,1,
68,1361,1,69,1366,
1,70,1371,1,71,
2680,16,0,623,1,
283,1295,1,73,2681,
16,0,322,1,74,
1376,1,1013,1381,1,
76,2682,16,0,623,
1,1834,2683,16,0,
623,1,2337,2684,16,
0,623,1,79,2685,
16,0,623,1,1335,
2686,16,0,623,1,
299,2687,16,0,623,
1,82,2688,16,0,
322,1,1840,2689,16,
0,322,1,1297,2690,
16,0,623,1,85,
2691,16,0,623,1,
1341,2692,16,0,322,
1,89,2693,16,0,
623,1,1303,2694,16,
0,322,1,2035,874,
1,93,1435,1,322,
2695,16,0,623,1,
97,2696,16,0,623,
1,2041,890,1,1555,
2697,16,0,322,1,
827,2698,16,0,322,
1,102,2699,16,0,
623,1,1860,943,1,
1803,909,1,2364,949,
1,107,2700,16,0,
322,1,509,2701,16,
0,623,1,1114,1461,
1,112,2702,16,0,
623,1,1117,2703,16,
0,623,1,352,1467,
1,1873,958,1,118,
1473,1,1123,2704,16,
0,322,1,371,1483,
1,515,2705,16,0,
322,1,1377,2706,16,
0,322,1,124,2707,
16,0,623,1,1882,
2708,16,0,322,1,
377,1499,1,379,1504,
1,380,1509,1,130,
1532,1,346,2709,16,
0,623,1,2075,2710,
16,0,623,1,373,
1527,1,387,2711,16,
0,322,1,137,2712,
16,0,623,1,143,
2713,16,0,322,1,
1901,2714,16,0,623,
1,1048,1462,1,1153,
2715,16,0,623,1,
375,1494,1,151,2716,
16,0,623,1,1407,
2717,16,0,623,1,
1659,2718,16,0,623,
1,2413,2719,16,0,
623,1,1159,2720,16,
0,322,1,381,2721,
16,0,623,1,157,
2722,16,0,322,1,
1413,2723,16,0,322,
1,883,2724,16,0,
322,1,1371,2725,16,
0,623,1,328,1425,
1,2105,936,1,2106,
2726,16,0,623,1,
166,2727,16,0,623,
1,525,2728,16,0,
623,1,1622,2729,16,
0,623,1,406,2730,
16,0,623,1,1574,
921,1,172,1586,1,
1931,983,1,412,2731,
16,0,322,1,1933,
2732,16,0,623,1,
1876,2733,16,0,623,
1,431,2734,16,0,
623,1,1585,2735,16,
0,623,1,182,2736,
16,0,623,1,1628,
2737,16,0,322,1,
1189,2738,16,0,623,
1,437,2739,16,0,
322,1,1591,2740,16,
0,322,1,188,1635,
1,1695,2741,16,0,
623,1,2198,2742,16,
0,623,1,1195,2743,
16,0,322,1,1449,
2744,16,0,322,1,
1701,2745,16,0,322,
1,447,2746,16,0,
623,1,2782,2747,16,
0,623,1,199,2748,
16,0,623,1,2459,
1004,1,1958,2749,16,
0,623,1,2462,1011,
1,1657,1016,1,205,
2750,16,0,322,1,
459,2751,16,0,623,
1,462,2752,16,0,
623,1,1665,2753,16,
0,322,1,217,2754,
16,0,623,1,2227,
1030,1,942,1607,1,
1225,2755,16,0,623,
1,223,2756,16,0,
322,1,1479,2757,16,
0,623,1,1731,2758,
16,0,623,1,477,
1666,1,1231,2759,16,
0,322,1,479,1676,
1,480,1681,1,1485,
2760,16,0,322,1,
1737,2761,16,0,322,
1,1989,1038,1,1990,
2762,16,0,623,1,
1443,2763,16,0,623,
1,236,2764,16,0,
623,1,2136,965,1,
476,1660,1,242,2765,
16,0,322,1,478,
1705,1,1939,2766,16,
0,322,1,1001,1710,
1,1002,1715,1,1756,
2767,16,0,623,1,
26,2768,19,343,1,
26,2769,5,84,1,
1011,1224,1,1012,2770,
16,0,341,1,1013,
1381,1,262,1241,1,
1267,2771,16,0,341,
1,515,2772,16,0,
770,1,1521,2773,16,
0,341,1,525,1339,
1,2788,2774,16,0,
341,1,283,1295,1,
2299,2775,16,0,341,
1,42,2776,16,0,
341,1,40,1300,1,
44,1306,1,47,1307,
1,1303,2777,16,0,
341,1,1555,2778,16,
0,341,1,50,1324,
1,48,1313,1,49,
1319,1,51,1329,1,
63,1345,1,305,1334,
1,66,1351,1,67,
1356,1,68,1361,1,
69,1366,1,70,1371,
1,73,2779,16,0,
341,1,74,1376,1,
328,1425,1,1048,1462,
1,82,2780,16,0,
341,1,1840,2781,16,
0,341,1,1591,2782,
16,0,341,1,1341,
2783,16,0,341,1,
1096,1694,1,93,1435,
1,352,1467,1,107,
2784,16,0,341,1,
1114,1461,1,118,1473,
1,1123,2785,16,0,
341,1,371,1483,1,
1628,2786,16,0,341,
1,375,1494,1,1882,
2787,16,0,341,1,
377,1499,1,379,1504,
1,380,1509,1,883,
2788,16,0,341,1,
373,1527,1,130,1532,
1,143,2789,16,0,
341,1,387,2790,16,
0,341,1,1159,2791,
16,0,341,1,157,
2792,16,0,341,1,
1413,2793,16,0,341,
1,1665,2794,16,0,
341,1,412,2795,16,
0,341,1,1377,2796,
16,0,341,1,172,
1586,1,1939,2797,16,
0,341,1,437,2798,
16,0,694,1,188,
1635,1,942,1607,1,
1195,2799,16,0,341,
1,1449,2800,16,0,
341,1,1701,2801,16,
0,341,1,447,1628,
1,205,2802,16,0,
341,1,827,2803,16,
0,341,1,223,2804,
16,0,341,1,476,
1660,1,477,1666,1,
1231,2805,16,0,341,
1,479,1676,1,480,
1681,1,1485,2806,16,
0,341,1,1737,2807,
16,0,341,1,242,
2808,16,0,341,1,
478,1705,1,1001,1710,
1,1002,1715,1,27,
2809,19,706,1,27,
2810,5,95,1,256,
2811,16,0,704,1,
1261,2812,16,0,704,
1,509,2813,16,0,
704,1,1515,2814,16,
0,704,1,2021,840,
1,1775,2815,16,0,
704,1,2029,847,1,
2030,853,1,2031,858,
1,2032,863,1,2033,
868,1,277,2816,16,
0,704,1,2035,874,
1,2037,879,1,2039,
884,1,32,2817,16,
0,704,1,2041,890,
1,2293,2818,16,0,
704,1,2043,896,1,
2045,901,1,41,2819,
16,0,704,1,1297,
2820,16,0,704,1,
43,2821,16,0,704,
1,1803,909,1,1804,
2822,16,0,704,1,
299,2823,16,0,704,
1,52,2824,16,0,
704,1,2318,2825,16,
0,704,1,62,2826,
16,0,704,1,2075,
2827,16,0,704,1,
1574,921,1,71,2828,
16,0,704,1,76,
2829,16,0,704,1,
1834,2830,16,0,704,
1,2337,2831,16,0,
704,1,79,2832,16,
0,704,1,1335,2833,
16,0,704,1,322,
2834,16,0,704,1,
85,2835,16,0,704,
1,89,2836,16,0,
704,1,346,2837,16,
0,704,1,2105,936,
1,2106,2838,16,0,
704,1,97,2839,16,
0,704,1,1860,943,
1,2364,949,1,102,
2840,16,0,704,1,
2782,2841,16,0,704,
1,112,2842,16,0,
704,1,1117,2843,16,
0,704,1,1873,958,
1,1876,2844,16,0,
704,1,124,2845,16,
0,704,1,2136,965,
1,381,2846,16,0,
704,1,525,2847,16,
0,704,1,137,2848,
16,0,704,1,1901,
2849,16,0,704,1,
1153,2850,16,0,704,
1,151,2851,16,0,
704,1,1407,2852,16,
0,704,1,1659,2853,
16,0,704,1,2413,
2854,16,0,704,1,
406,2855,16,0,704,
1,1371,2856,16,0,
704,1,166,2857,16,
0,704,1,1622,2858,
16,0,704,1,1931,
983,1,1933,2859,16,
0,704,1,431,2860,
16,0,704,1,1585,
2861,16,0,704,1,
182,2862,16,0,704,
1,1189,2863,16,0,
704,1,1443,2864,16,
0,704,1,1695,2865,
16,0,704,1,2198,
2866,16,0,704,1,
447,2867,16,0,704,
1,2458,998,1,2459,
1004,1,1958,2868,16,
0,704,1,2462,1011,
1,1657,1016,1,2464,
1021,1,199,2869,16,
0,704,1,459,2870,
16,0,704,1,462,
2871,16,0,704,1,
217,2872,16,0,704,
1,2227,1030,1,1225,
2873,16,0,704,1,
1479,2874,16,0,704,
1,1731,2875,16,0,
704,1,1989,1038,1,
1990,2876,16,0,704,
1,236,2877,16,0,
704,1,1756,2878,16,
0,704,1,28,2879,
19,734,1,28,2880,
5,60,1,328,1425,
1,223,1650,1,1096,
1694,1,118,1473,1,
883,1515,1,525,1339,
1,1001,1710,1,130,
1532,1,459,1949,1,
1114,1461,1,352,1467,
1,447,1628,1,464,
1944,1,1011,1224,1,
1013,1381,1,242,1700,
1,143,1537,1,40,
1300,1,41,1916,1,
42,1920,1,479,1676,
1,44,1306,1,481,
1951,1,373,1527,1,
47,1307,1,157,1560,
1,49,1319,1,50,
1324,1,48,1313,1,
379,1504,1,380,1509,
1,51,1329,1,476,
1660,1,371,1483,1,
478,1705,1,1048,1462,
1,375,1494,1,172,
1586,1,262,1241,1,
283,1295,1,63,1345,
1,67,1356,1,68,
1361,1,69,1366,1,
66,1351,1,461,2881,
16,0,732,1,74,
1376,1,377,1499,1,
1002,1715,1,70,1371,
1,188,1635,1,82,
1403,1,305,1334,1,
477,1666,1,827,1448,
1,93,1435,1,480,
1681,1,205,1640,1,
942,1607,1,107,1455,
1,29,2882,19,312,
1,29,2883,5,84,
1,1011,1224,1,1012,
2884,16,0,310,1,
1013,1381,1,262,1241,
1,1267,2885,16,0,
310,1,515,2886,16,
0,310,1,1521,2887,
16,0,310,1,525,
1339,1,2788,2888,16,
0,310,1,283,1295,
1,2299,2889,16,0,
310,1,42,2890,16,
0,310,1,40,1300,
1,44,1306,1,47,
1307,1,1303,2891,16,
0,310,1,1555,2892,
16,0,310,1,50,
1324,1,48,1313,1,
49,1319,1,51,1329,
1,63,1345,1,305,
1334,1,66,1351,1,
67,1356,1,68,1361,
1,69,1366,1,70,
1371,1,73,2893,16,
0,310,1,74,1376,
1,328,1425,1,1048,
1462,1,82,2894,16,
0,310,1,1840,2895,
16,0,310,1,1591,
2896,16,0,310,1,
1341,2897,16,0,310,
1,1096,1694,1,93,
1435,1,352,1467,1,
107,2898,16,0,310,
1,1114,1461,1,118,
1473,1,1123,2899,16,
0,310,1,371,1483,
1,1628,2900,16,0,
310,1,375,1494,1,
1882,2901,16,0,310,
1,377,1499,1,379,
1504,1,380,1509,1,
883,2902,16,0,310,
1,373,1527,1,130,
1532,1,143,1537,1,
387,2903,16,0,310,
1,1159,2904,16,0,
310,1,157,1560,1,
1413,2905,16,0,310,
1,1665,2906,16,0,
310,1,412,2907,16,
0,310,1,1377,2908,
16,0,310,1,172,
1586,1,1939,2909,16,
0,310,1,437,2910,
16,0,310,1,188,
1635,1,942,1607,1,
1195,2911,16,0,310,
1,1449,2912,16,0,
310,1,1701,2913,16,
0,310,1,447,1628,
1,205,2914,16,0,
310,1,827,2915,16,
0,310,1,223,2916,
16,0,310,1,476,
1660,1,477,1666,1,
1231,2917,16,0,310,
1,479,1676,1,480,
1681,1,1485,2918,16,
0,310,1,1737,2919,
16,0,310,1,242,
2920,16,0,310,1,
478,1705,1,1001,1710,
1,1002,1715,1,30,
2921,19,296,1,30,
2922,5,84,1,1011,
1224,1,1012,2923,16,
0,294,1,1013,1381,
1,262,1241,1,1267,
2924,16,0,294,1,
515,2925,16,0,294,
1,1521,2926,16,0,
294,1,525,1339,1,
2788,2927,16,0,294,
1,283,1295,1,2299,
2928,16,0,294,1,
42,2929,16,0,294,
1,40,1300,1,44,
1306,1,47,1307,1,
1303,2930,16,0,294,
1,1555,2931,16,0,
294,1,50,1324,1,
48,1313,1,49,1319,
1,51,1329,1,63,
1345,1,305,1334,1,
66,1351,1,67,1356,
1,68,1361,1,69,
1366,1,70,1371,1,
73,2932,16,0,294,
1,74,1376,1,328,
1425,1,1048,1462,1,
82,2933,16,0,294,
1,1840,2934,16,0,
294,1,1591,2935,16,
0,294,1,1341,2936,
16,0,294,1,1096,
1694,1,93,1435,1,
352,1467,1,107,2937,
16,0,294,1,1114,
1461,1,118,1473,1,
1123,2938,16,0,294,
1,371,1483,1,1628,
2939,16,0,294,1,
375,1494,1,1882,2940,
16,0,294,1,377,
1499,1,379,1504,1,
380,1509,1,883,2941,
16,0,294,1,373,
1527,1,130,1532,1,
143,1537,1,387,2942,
16,0,294,1,1159,
2943,16,0,294,1,
157,1560,1,1413,2944,
16,0,294,1,1665,
2945,16,0,294,1,
412,2946,16,0,294,
1,1377,2947,16,0,
294,1,172,1586,1,
1939,2948,16,0,294,
1,437,2949,16,0,
294,1,188,1635,1,
942,1607,1,1195,2950,
16,0,294,1,1449,
2951,16,0,294,1,
1701,2952,16,0,294,
1,447,1628,1,205,
2953,16,0,294,1,
827,2954,16,0,294,
1,223,2955,16,0,
294,1,476,1660,1,
477,1666,1,1231,2956,
16,0,294,1,479,
1676,1,480,1681,1,
1485,2957,16,0,294,
1,1737,2958,16,0,
294,1,242,2959,16,
0,294,1,478,1705,
1,1001,1710,1,1002,
1715,1,31,2960,19,
281,1,31,2961,5,
84,1,1011,1224,1,
1012,2962,16,0,279,
1,1013,1381,1,262,
1241,1,1267,2963,16,
0,279,1,515,2964,
16,0,279,1,1521,
2965,16,0,279,1,
525,1339,1,2788,2966,
16,0,279,1,283,
1295,1,2299,2967,16,
0,279,1,42,2968,
16,0,279,1,40,
1300,1,44,1306,1,
47,1307,1,1303,2969,
16,0,279,1,1555,
2970,16,0,279,1,
50,1324,1,48,1313,
1,49,1319,1,51,
1329,1,63,1345,1,
305,1334,1,66,1351,
1,67,1356,1,68,
1361,1,69,1366,1,
70,1371,1,73,2971,
16,0,279,1,74,
1376,1,328,1425,1,
1048,1462,1,82,2972,
16,0,279,1,1840,
2973,16,0,279,1,
1591,2974,16,0,279,
1,1341,2975,16,0,
279,1,1096,1694,1,
93,1435,1,352,1467,
1,107,2976,16,0,
279,1,1114,1461,1,
118,1473,1,1123,2977,
16,0,279,1,371,
1483,1,1628,2978,16,
0,279,1,375,1494,
1,1882,2979,16,0,
279,1,377,1499,1,
379,1504,1,380,1509,
1,883,2980,16,0,
279,1,373,1527,1,
130,1532,1,143,2981,
16,0,279,1,387,
2982,16,0,279,1,
1159,2983,16,0,279,
1,157,2984,16,0,
279,1,1413,2985,16,
0,279,1,1665,2986,
16,0,279,1,412,
2987,16,0,279,1,
1377,2988,16,0,279,
1,172,1586,1,1939,
2989,16,0,279,1,
437,2990,16,0,279,
1,188,1635,1,942,
1607,1,1195,2991,16,
0,279,1,1449,2992,
16,0,279,1,1701,
2993,16,0,279,1,
447,1628,1,205,2994,
16,0,279,1,827,
2995,16,0,279,1,
223,2996,16,0,279,
1,476,1660,1,477,
1666,1,1231,2997,16,
0,279,1,479,1676,
1,480,1681,1,1485,
2998,16,0,279,1,
1737,2999,16,0,279,
1,242,3000,16,0,
279,1,478,1705,1,
1001,1710,1,1002,1715,
1,32,3001,19,273,
1,32,3002,5,84,
1,1011,1224,1,1012,
3003,16,0,271,1,
1013,1381,1,262,1241,
1,1267,3004,16,0,
271,1,515,3005,16,
0,271,1,1521,3006,
16,0,271,1,525,
1339,1,2788,3007,16,
0,271,1,283,1295,
1,2299,3008,16,0,
271,1,42,3009,16,
0,271,1,40,1300,
1,44,1306,1,47,
1307,1,1303,3010,16,
0,271,1,1555,3011,
16,0,271,1,50,
1324,1,48,1313,1,
49,1319,1,51,1329,
1,63,1345,1,305,
1334,1,66,1351,1,
67,1356,1,68,1361,
1,69,1366,1,70,
1371,1,73,3012,16,
0,271,1,74,1376,
1,328,1425,1,1048,
1462,1,82,3013,16,
0,271,1,1840,3014,
16,0,271,1,1591,
3015,16,0,271,1,
1341,3016,16,0,271,
1,1096,1694,1,93,
1435,1,352,1467,1,
107,3017,16,0,271,
1,1114,1461,1,118,
1473,1,1123,3018,16,
0,271,1,371,1483,
1,1628,3019,16,0,
271,1,375,1494,1,
1882,3020,16,0,271,
1,377,1499,1,379,
1504,1,380,1509,1,
883,3021,16,0,271,
1,373,1527,1,130,
1532,1,143,3022,16,
0,271,1,387,3023,
16,0,271,1,1159,
3024,16,0,271,1,
157,3025,16,0,271,
1,1413,3026,16,0,
271,1,1665,3027,16,
0,271,1,412,3028,
16,0,271,1,1377,
3029,16,0,271,1,
172,1586,1,1939,3030,
16,0,271,1,437,
3031,16,0,271,1,
188,1635,1,942,1607,
1,1195,3032,16,0,
271,1,1449,3033,16,
0,271,1,1701,3034,
16,0,271,1,447,
1628,1,205,3035,16,
0,271,1,827,3036,
16,0,271,1,223,
3037,16,0,271,1,
476,1660,1,477,1666,
1,1231,3038,16,0,
271,1,479,1676,1,
480,1681,1,1485,3039,
16,0,271,1,1737,
3040,16,0,271,1,
242,3041,16,0,271,
1,478,1705,1,1001,
1710,1,1002,1715,1,
33,3042,19,370,1,
33,3043,5,84,1,
1011,1224,1,1012,3044,
16,0,368,1,1013,
1381,1,262,1241,1,
1267,3045,16,0,368,
1,515,3046,16,0,
368,1,1521,3047,16,
0,368,1,525,1339,
1,2788,3048,16,0,
368,1,283,1295,1,
2299,3049,16,0,368,
1,42,3050,16,0,
368,1,40,1300,1,
44,1306,1,47,1307,
1,1303,3051,16,0,
368,1,1555,3052,16,
0,368,1,50,1324,
1,48,1313,1,49,
1319,1,51,1329,1,
63,1345,1,305,1334,
1,66,1351,1,67,
1356,1,68,1361,1,
69,1366,1,70,1371,
1,73,3053,16,0,
368,1,74,1376,1,
328,1425,1,1048,1462,
1,82,3054,16,0,
368,1,1840,3055,16,
0,368,1,1591,3056,
16,0,368,1,1341,
3057,16,0,368,1,
1096,1694,1,93,1435,
1,352,1467,1,107,
3058,16,0,368,1,
1114,1461,1,118,1473,
1,1123,3059,16,0,
368,1,371,1483,1,
1628,3060,16,0,368,
1,375,1494,1,1882,
3061,16,0,368,1,
377,1499,1,379,1504,
1,380,1509,1,883,
3062,16,0,368,1,
373,1527,1,130,1532,
1,143,1537,1,387,
3063,16,0,368,1,
1159,3064,16,0,368,
1,157,1560,1,1413,
3065,16,0,368,1,
1665,3066,16,0,368,
1,412,3067,16,0,
368,1,1377,3068,16,
0,368,1,172,1586,
1,1939,3069,16,0,
368,1,437,3070,16,
0,368,1,188,1635,
1,942,1607,1,1195,
3071,16,0,368,1,
1449,3072,16,0,368,
1,1701,3073,16,0,
368,1,447,1628,1,
205,3074,16,0,368,
1,827,3075,16,0,
368,1,223,3076,16,
0,368,1,476,1660,
1,477,1666,1,1231,
3077,16,0,368,1,
479,1676,1,480,1681,
1,1485,3078,16,0,
368,1,1737,3079,16,
0,368,1,242,1700,
1,478,1705,1,1001,
1710,1,1002,1715,1,
34,3080,19,358,1,
34,3081,5,84,1,
1011,1224,1,1012,3082,
16,0,356,1,1013,
1381,1,262,1241,1,
1267,3083,16,0,356,
1,515,3084,16,0,
356,1,1521,3085,16,
0,356,1,525,1339,
1,2788,3086,16,0,
356,1,283,1295,1,
2299,3087,16,0,356,
1,42,3088,16,0,
356,1,40,1300,1,
44,1306,1,47,1307,
1,1303,3089,16,0,
356,1,1555,3090,16,
0,356,1,50,1324,
1,48,1313,1,49,
1319,1,51,1329,1,
63,1345,1,305,1334,
1,66,1351,1,67,
1356,1,68,1361,1,
69,1366,1,70,1371,
1,73,3091,16,0,
356,1,74,1376,1,
328,1425,1,1048,1462,
1,82,3092,16,0,
356,1,1840,3093,16,
0,356,1,1591,3094,
16,0,356,1,1341,
3095,16,0,356,1,
1096,1694,1,93,1435,
1,352,1467,1,107,
3096,16,0,356,1,
1114,1461,1,118,1473,
1,1123,3097,16,0,
356,1,371,1483,1,
1628,3098,16,0,356,
1,375,1494,1,1882,
3099,16,0,356,1,
377,1499,1,379,1504,
1,380,1509,1,883,
3100,16,0,356,1,
373,1527,1,130,1532,
1,143,1537,1,387,
3101,16,0,356,1,
1159,3102,16,0,356,
1,157,1560,1,1413,
3103,16,0,356,1,
1665,3104,16,0,356,
1,412,3105,16,0,
356,1,1377,3106,16,
0,356,1,172,1586,
1,1939,3107,16,0,
356,1,437,3108,16,
0,356,1,188,1635,
1,942,1607,1,1195,
3109,16,0,356,1,
1449,3110,16,0,356,
1,1701,3111,16,0,
356,1,447,1628,1,
205,1640,1,827,3112,
16,0,356,1,223,
1650,1,476,1660,1,
477,1666,1,1231,3113,
16,0,356,1,479,
1676,1,480,1681,1,
1485,3114,16,0,356,
1,1737,3115,16,0,
356,1,242,1700,1,
478,1705,1,1001,1710,
1,1002,1715,1,35,
3116,19,346,1,35,
3117,5,84,1,1011,
1224,1,1012,3118,16,
0,344,1,1013,1381,
1,262,1241,1,1267,
3119,16,0,344,1,
515,3120,16,0,344,
1,1521,3121,16,0,
344,1,525,1339,1,
2788,3122,16,0,344,
1,283,1295,1,2299,
3123,16,0,344,1,
42,3124,16,0,344,
1,40,1300,1,44,
1306,1,47,1307,1,
1303,3125,16,0,344,
1,1555,3126,16,0,
344,1,50,1324,1,
48,1313,1,49,1319,
1,51,1329,1,63,
1345,1,305,1334,1,
66,1351,1,67,1356,
1,68,1361,1,69,
1366,1,70,1371,1,
73,3127,16,0,344,
1,74,1376,1,328,
1425,1,1048,1462,1,
82,3128,16,0,344,
1,1840,3129,16,0,
344,1,1591,3130,16,
0,344,1,1341,3131,
16,0,344,1,1096,
1694,1,93,1435,1,
352,1467,1,107,3132,
16,0,344,1,1114,
1461,1,118,1473,1,
1123,3133,16,0,344,
1,371,1483,1,1628,
3134,16,0,344,1,
375,1494,1,1882,3135,
16,0,344,1,377,
1499,1,379,1504,1,
380,1509,1,883,3136,
16,0,344,1,373,
1527,1,130,1532,1,
143,1537,1,387,3137,
16,0,344,1,1159,
3138,16,0,344,1,
157,1560,1,1413,3139,
16,0,344,1,1665,
3140,16,0,344,1,
412,3141,16,0,344,
1,1377,3142,16,0,
344,1,172,1586,1,
1939,3143,16,0,344,
1,437,3144,16,0,
344,1,188,1635,1,
942,1607,1,1195,3145,
16,0,344,1,1449,
3146,16,0,344,1,
1701,3147,16,0,344,
1,447,1628,1,205,
1640,1,827,3148,16,
0,344,1,223,3149,
16,0,344,1,476,
1660,1,477,1666,1,
1231,3150,16,0,344,
1,479,1676,1,480,
1681,1,1485,3151,16,
0,344,1,1737,3152,
16,0,344,1,242,
1700,1,478,1705,1,
1001,1710,1,1002,1715,
1,36,3153,19,242,
1,36,3154,5,94,
1,256,3155,16,0,
240,1,1261,3156,16,
0,240,1,509,3157,
16,0,240,1,1515,
3158,16,0,240,1,
2021,840,1,1775,3159,
16,0,240,1,2029,
847,1,2030,853,1,
2031,858,1,2032,863,
1,2033,868,1,277,
3160,16,0,240,1,
2035,874,1,2037,879,
1,2039,884,1,32,
3161,16,0,240,1,
2041,890,1,2293,3162,
16,0,240,1,2043,
896,1,2045,901,1,
41,3163,16,0,240,
1,1297,3164,16,0,
240,1,43,3165,16,
0,240,1,1803,909,
1,1804,3166,16,0,
240,1,299,3167,16,
0,240,1,52,3168,
16,0,240,1,2318,
3169,16,0,240,1,
2075,3170,16,0,240,
1,1574,921,1,71,
3171,16,0,240,1,
76,3172,16,0,240,
1,1834,3173,16,0,
240,1,2337,3174,16,
0,240,1,79,3175,
16,0,240,1,1335,
3176,16,0,240,1,
322,3177,16,0,240,
1,85,3178,16,0,
240,1,89,3179,16,
0,240,1,346,3180,
16,0,240,1,2105,
936,1,2106,3181,16,
0,240,1,97,3182,
16,0,240,1,1860,
943,1,2364,949,1,
102,3183,16,0,240,
1,2782,3184,16,0,
240,1,112,3185,16,
0,240,1,1117,3186,
16,0,240,1,1873,
958,1,1876,3187,16,
0,240,1,124,3188,
16,0,240,1,2136,
965,1,381,3189,16,
0,240,1,525,3190,
16,0,240,1,137,
3191,16,0,240,1,
1901,3192,16,0,240,
1,1153,3193,16,0,
240,1,151,3194,16,
0,240,1,1407,3195,
16,0,240,1,1659,
3196,16,0,240,1,
2413,3197,16,0,240,
1,406,3198,16,0,
240,1,1371,3199,16,
0,240,1,166,3200,
16,0,240,1,1622,
3201,16,0,240,1,
1931,983,1,1933,3202,
16,0,240,1,431,
3203,16,0,240,1,
1585,3204,16,0,240,
1,182,3205,16,0,
240,1,1189,3206,16,
0,240,1,1443,3207,
16,0,240,1,1695,
3208,16,0,240,1,
2198,3209,16,0,240,
1,447,3210,16,0,
240,1,2458,998,1,
2459,1004,1,1958,3211,
16,0,240,1,2462,
1011,1,1657,1016,1,
2464,1021,1,199,3212,
16,0,240,1,459,
3213,16,0,240,1,
462,3214,16,0,240,
1,217,3215,16,0,
240,1,2227,1030,1,
1225,3216,16,0,240,
1,1479,3217,16,0,
240,1,1731,3218,16,
0,240,1,1989,1038,
1,1990,3219,16,0,
240,1,236,3220,16,
0,240,1,1756,3221,
16,0,240,1,37,
3222,19,263,1,37,
3223,5,94,1,256,
3224,16,0,261,1,
1261,3225,16,0,261,
1,509,3226,16,0,
261,1,1515,3227,16,
0,261,1,2021,840,
1,1775,3228,16,0,
261,1,2029,847,1,
2030,853,1,2031,858,
1,2032,863,1,2033,
868,1,277,3229,16,
0,261,1,2035,874,
1,2037,879,1,2039,
884,1,32,3230,16,
0,261,1,2041,890,
1,2293,3231,16,0,
261,1,2043,896,1,
2045,901,1,41,3232,
16,0,261,1,1297,
3233,16,0,261,1,
43,3234,16,0,261,
1,1803,909,1,1804,
3235,16,0,261,1,
299,3236,16,0,261,
1,52,3237,16,0,
261,1,2318,3238,16,
0,261,1,2075,3239,
16,0,261,1,1574,
921,1,71,3240,16,
0,261,1,76,3241,
16,0,261,1,1834,
3242,16,0,261,1,
2337,3243,16,0,261,
1,79,3244,16,0,
261,1,1335,3245,16,
0,261,1,322,3246,
16,0,261,1,85,
3247,16,0,261,1,
89,3248,16,0,261,
1,346,3249,16,0,
261,1,2105,936,1,
2106,3250,16,0,261,
1,97,3251,16,0,
261,1,1860,943,1,
2364,949,1,102,3252,
16,0,261,1,2782,
3253,16,0,261,1,
112,3254,16,0,261,
1,1117,3255,16,0,
261,1,1873,958,1,
1876,3256,16,0,261,
1,124,3257,16,0,
261,1,2136,965,1,
381,3258,16,0,261,
1,525,3259,16,0,
261,1,137,3260,16,
0,261,1,1901,3261,
16,0,261,1,1153,
3262,16,0,261,1,
151,3263,16,0,261,
1,1407,3264,16,0,
261,1,1659,3265,16,
0,261,1,2413,3266,
16,0,261,1,406,
3267,16,0,261,1,
1371,3268,16,0,261,
1,166,3269,16,0,
261,1,1622,3270,16,
0,261,1,1931,983,
1,1933,3271,16,0,
261,1,431,3272,16,
0,261,1,1585,3273,
16,0,261,1,182,
3274,16,0,261,1,
1189,3275,16,0,261,
1,1443,3276,16,0,
261,1,1695,3277,16,
0,261,1,2198,3278,
16,0,261,1,447,
3279,16,0,261,1,
2458,998,1,2459,1004,
1,1958,3280,16,0,
261,1,2462,1011,1,
1657,1016,1,2464,1021,
1,199,3281,16,0,
261,1,459,3282,16,
0,261,1,462,3283,
16,0,261,1,217,
3284,16,0,261,1,
2227,1030,1,1225,3285,
16,0,261,1,1479,
3286,16,0,261,1,
1731,3287,16,0,261,
1,1989,1038,1,1990,
3288,16,0,261,1,
236,3289,16,0,261,
1,1756,3290,16,0,
261,1,38,3291,19,
260,1,38,3292,5,
84,1,1011,1224,1,
1012,3293,16,0,258,
1,1013,1381,1,262,
1241,1,1267,3294,16,
0,258,1,515,3295,
16,0,258,1,1521,
3296,16,0,258,1,
525,1339,1,2788,3297,
16,0,258,1,283,
1295,1,2299,3298,16,
0,258,1,42,3299,
16,0,258,1,40,
1300,1,44,1306,1,
47,1307,1,1303,3300,
16,0,258,1,1555,
3301,16,0,258,1,
50,1324,1,48,1313,
1,49,1319,1,51,
1329,1,63,1345,1,
305,1334,1,66,1351,
1,67,1356,1,68,
1361,1,69,1366,1,
70,1371,1,73,3302,
16,0,258,1,74,
1376,1,328,1425,1,
1048,1462,1,82,3303,
16,0,258,1,1840,
3304,16,0,258,1,
1591,3305,16,0,258,
1,1341,3306,16,0,
258,1,1096,1694,1,
93,1435,1,352,1467,
1,107,3307,16,0,
258,1,1114,1461,1,
118,1473,1,1123,3308,
16,0,258,1,371,
1483,1,1628,3309,16,
0,258,1,375,1494,
1,1882,3310,16,0,
258,1,377,1499,1,
379,1504,1,380,1509,
1,883,1515,1,373,
1527,1,130,1532,1,
143,1537,1,387,3311,
16,0,258,1,1159,
3312,16,0,258,1,
157,1560,1,1413,3313,
16,0,258,1,1665,
3314,16,0,258,1,
412,3315,16,0,258,
1,1377,3316,16,0,
258,1,172,1586,1,
1939,3317,16,0,258,
1,437,3318,16,0,
258,1,188,1635,1,
942,1607,1,1195,3319,
16,0,258,1,1449,
3320,16,0,258,1,
1701,3321,16,0,258,
1,447,1628,1,205,
1640,1,827,1448,1,
223,1650,1,476,1660,
1,477,1666,1,1231,
3322,16,0,258,1,
479,1676,1,480,1681,
1,1485,3323,16,0,
258,1,1737,3324,16,
0,258,1,242,1700,
1,478,1705,1,1001,
1710,1,1002,1715,1,
39,3325,19,248,1,
39,3326,5,84,1,
1011,1224,1,1012,3327,
16,0,246,1,1013,
1381,1,262,1241,1,
1267,3328,16,0,246,
1,515,3329,16,0,
246,1,1521,3330,16,
0,246,1,525,1339,
1,2788,3331,16,0,
246,1,283,1295,1,
2299,3332,16,0,246,
1,42,3333,16,0,
246,1,40,1300,1,
44,1306,1,47,1307,
1,1303,3334,16,0,
246,1,1555,3335,16,
0,246,1,50,1324,
1,48,1313,1,49,
1319,1,51,1329,1,
63,1345,1,305,1334,
1,66,1351,1,67,
1356,1,68,1361,1,
69,1366,1,70,1371,
1,73,3336,16,0,
246,1,74,1376,1,
328,1425,1,1048,1462,
1,82,3337,16,0,
246,1,1840,3338,16,
0,246,1,1591,3339,
16,0,246,1,1341,
3340,16,0,246,1,
1096,1694,1,93,1435,
1,352,1467,1,107,
3341,16,0,246,1,
1114,1461,1,118,1473,
1,1123,3342,16,0,
246,1,371,1483,1,
1628,3343,16,0,246,
1,375,1494,1,1882,
3344,16,0,246,1,
377,1499,1,379,1504,
1,380,1509,1,883,
1515,1,373,1527,1,
130,1532,1,143,1537,
1,387,3345,16,0,
246,1,1159,3346,16,
0,246,1,157,1560,
1,1413,3347,16,0,
246,1,1665,3348,16,
0,246,1,412,3349,
16,0,246,1,1377,
3350,16,0,246,1,
172,1586,1,1939,3351,
16,0,246,1,437,
3352,16,0,246,1,
188,1635,1,942,1607,
1,1195,3353,16,0,
246,1,1449,3354,16,
0,246,1,1701,3355,
16,0,246,1,447,
1628,1,205,1640,1,
827,1448,1,223,1650,
1,476,1660,1,477,
1666,1,1231,3356,16,
0,246,1,479,1676,
1,480,1681,1,1485,
3357,16,0,246,1,
1737,3358,16,0,246,
1,242,1700,1,478,
1705,1,1001,1710,1,
1002,1715,1,40,3359,
19,236,1,40,3360,
5,84,1,1011,1224,
1,1012,3361,16,0,
234,1,1013,1381,1,
262,1241,1,1267,3362,
16,0,234,1,515,
3363,16,0,234,1,
1521,3364,16,0,234,
1,525,1339,1,2788,
3365,16,0,234,1,
283,1295,1,2299,3366,
16,0,234,1,42,
3367,16,0,234,1,
40,1300,1,44,1306,
1,47,1307,1,1303,
3368,16,0,234,1,
1555,3369,16,0,234,
1,50,1324,1,48,
1313,1,49,1319,1,
51,1329,1,63,1345,
1,305,1334,1,66,
1351,1,67,1356,1,
68,1361,1,69,1366,
1,70,1371,1,73,
3370,16,0,234,1,
74,1376,1,328,1425,
1,1048,1462,1,82,
3371,16,0,234,1,
1840,3372,16,0,234,
1,1591,3373,16,0,
234,1,1341,3374,16,
0,234,1,1096,1694,
1,93,1435,1,352,
1467,1,107,3375,16,
0,234,1,1114,1461,
1,118,3376,16,0,
234,1,1123,3377,16,
0,234,1,371,1483,
1,1628,3378,16,0,
234,1,375,1494,1,
1882,3379,16,0,234,
1,377,1499,1,379,
1504,1,380,1509,1,
883,3380,16,0,234,
1,373,1527,1,130,
3381,16,0,234,1,
143,3382,16,0,234,
1,387,3383,16,0,
234,1,1159,3384,16,
0,234,1,157,3385,
16,0,234,1,1413,
3386,16,0,234,1,
1665,3387,16,0,234,
1,412,3388,16,0,
234,1,1377,3389,16,
0,234,1,172,3390,
16,0,234,1,1939,
3391,16,0,234,1,
437,3392,16,0,234,
1,188,3393,16,0,
234,1,942,1607,1,
1195,3394,16,0,234,
1,1449,3395,16,0,
234,1,1701,3396,16,
0,234,1,447,1628,
1,205,3397,16,0,
234,1,827,3398,16,
0,234,1,223,3399,
16,0,234,1,476,
1660,1,477,1666,1,
1231,3400,16,0,234,
1,479,1676,1,480,
1681,1,1485,3401,16,
0,234,1,1737,3402,
16,0,234,1,242,
3403,16,0,234,1,
478,1705,1,1001,1710,
1,1002,1715,1,41,
3404,19,191,1,41,
3405,5,84,1,1011,
1224,1,1012,3406,16,
0,189,1,1013,1381,
1,262,1241,1,1267,
3407,16,0,189,1,
515,3408,16,0,189,
1,1521,3409,16,0,
189,1,525,1339,1,
2788,3410,16,0,189,
1,283,1295,1,2299,
3411,16,0,189,1,
42,3412,16,0,189,
1,40,1300,1,44,
1306,1,47,1307,1,
1303,3413,16,0,189,
1,1555,3414,16,0,
189,1,50,1324,1,
48,1313,1,49,1319,
1,51,1329,1,63,
1345,1,305,1334,1,
66,1351,1,67,1356,
1,68,1361,1,69,
1366,1,70,1371,1,
73,3415,16,0,189,
1,74,1376,1,328,
1425,1,1048,1462,1,
82,3416,16,0,189,
1,1840,3417,16,0,
189,1,1591,3418,16,
0,189,1,1341,3419,
16,0,189,1,1096,
1694,1,93,1435,1,
352,1467,1,107,3420,
16,0,189,1,1114,
1461,1,118,3421,16,
0,189,1,1123,3422,
16,0,189,1,371,
1483,1,1628,3423,16,
0,189,1,375,1494,
1,1882,3424,16,0,
189,1,377,1499,1,
379,1504,1,380,1509,
1,883,3425,16,0,
189,1,373,1527,1,
130,3426,16,0,189,
1,143,3427,16,0,
189,1,387,3428,16,
0,189,1,1159,3429,
16,0,189,1,157,
3430,16,0,189,1,
1413,3431,16,0,189,
1,1665,3432,16,0,
189,1,412,3433,16,
0,189,1,1377,3434,
16,0,189,1,172,
3435,16,0,189,1,
1939,3436,16,0,189,
1,437,3437,16,0,
189,1,188,3438,16,
0,189,1,942,1607,
1,1195,3439,16,0,
189,1,1449,3440,16,
0,189,1,1701,3441,
16,0,189,1,447,
1628,1,205,3442,16,
0,189,1,827,3443,
16,0,189,1,223,
3444,16,0,189,1,
476,1660,1,477,1666,
1,1231,3445,16,0,
189,1,479,1676,1,
480,1681,1,1485,3446,
16,0,189,1,1737,
3447,16,0,189,1,
242,3448,16,0,189,
1,478,1705,1,1001,
1710,1,1002,1715,1,
42,3449,19,430,1,
42,3450,5,38,1,
1901,3451,16,0,428,
1,2075,3452,16,0,
428,1,1860,943,1,
1803,909,1,1804,3453,
16,0,428,1,2413,
3454,16,0,428,1,
2198,3455,16,0,428,
1,1873,958,1,1657,
1016,1,1989,1038,1,
1990,3456,16,0,428,
1,1775,3457,16,0,
428,1,32,3458,16,
0,428,1,2105,936,
1,2106,3459,16,0,
428,1,2364,949,1,
2227,1030,1,2337,3460,
16,0,428,1,2021,
840,1,2458,998,1,
2459,1004,1,2462,1011,
1,2136,965,1,2464,
1021,1,2029,847,1,
2030,853,1,2031,858,
1,2032,863,1,2033,
868,1,2035,874,1,
2037,879,1,2039,884,
1,1931,983,1,2041,
890,1,2043,896,1,
2045,901,1,1574,921,
1,1958,3461,16,0,
428,1,43,3462,19,
518,1,43,3463,5,
25,1,2035,874,1,
2037,879,1,2039,884,
1,2041,890,1,2227,
1030,1,2043,896,1,
1657,1016,1,1860,943,
1,2136,965,1,2021,
840,1,2459,1004,1,
1574,921,1,2105,3464,
16,0,683,1,1931,
983,1,1873,958,1,
2031,858,1,1803,909,
1,1989,3465,16,0,
516,1,2464,1021,1,
2029,847,1,2030,853,
1,2364,949,1,2032,
863,1,2033,868,1,
2045,901,1,44,3466,
19,289,1,44,3467,
5,38,1,1901,3468,
16,0,287,1,2075,
3469,16,0,287,1,
1860,943,1,1803,909,
1,1804,3470,16,0,
287,1,2413,3471,16,
0,287,1,2198,3472,
16,0,287,1,1873,
958,1,1657,1016,1,
1989,1038,1,1990,3473,
16,0,287,1,1775,
3474,16,0,287,1,
32,3475,16,0,287,
1,2105,936,1,2106,
3476,16,0,287,1,
2364,949,1,2227,1030,
1,2337,3477,16,0,
287,1,2021,840,1,
2458,998,1,2459,1004,
1,2462,1011,1,2136,
965,1,2464,1021,1,
2029,847,1,2030,853,
1,2031,858,1,2032,
863,1,2033,868,1,
2035,874,1,2037,879,
1,2039,884,1,1931,
983,1,2041,890,1,
2043,896,1,2045,901,
1,1574,921,1,1958,
3478,16,0,287,1,
45,3479,19,320,1,
45,3480,5,39,1,
1901,3481,16,0,350,
1,2075,3482,16,0,
350,1,1860,943,1,
1803,909,1,1804,3483,
16,0,350,1,2413,
3484,16,0,350,1,
2198,3485,16,0,350,
1,1873,958,1,1657,
1016,1,1989,1038,1,
1990,3486,16,0,350,
1,1775,3487,16,0,
350,1,32,3488,16,
0,350,1,2105,936,
1,2106,3489,16,0,
350,1,2364,949,1,
2227,1030,1,2337,3490,
16,0,350,1,2021,
840,1,2458,998,1,
2459,1004,1,2462,1011,
1,2136,965,1,2464,
1021,1,2029,847,1,
2030,853,1,2031,858,
1,2032,863,1,2033,
868,1,2035,874,1,
2037,879,1,2039,884,
1,1931,983,1,2041,
890,1,2043,896,1,
2045,901,1,1832,3491,
16,0,318,1,1574,
921,1,1958,3492,16,
0,350,1,46,3493,
19,789,1,46,3494,
5,38,1,1901,3495,
16,0,787,1,2075,
3496,16,0,787,1,
1860,943,1,1803,909,
1,1804,3497,16,0,
787,1,2413,3498,16,
0,787,1,2198,3499,
16,0,787,1,1873,
958,1,1657,1016,1,
1989,1038,1,1990,3500,
16,0,787,1,1775,
3501,16,0,787,1,
32,3502,16,0,787,
1,2105,936,1,2106,
3503,16,0,787,1,
2364,949,1,2227,1030,
1,2337,3504,16,0,
787,1,2021,840,1,
2458,998,1,2459,1004,
1,2462,1011,1,2136,
965,1,2464,1021,1,
2029,847,1,2030,853,
1,2031,858,1,2032,
863,1,2033,868,1,
2035,874,1,2037,879,
1,2039,884,1,1931,
983,1,2041,890,1,
2043,896,1,2045,901,
1,1574,921,1,1958,
3505,16,0,787,1,
47,3506,19,660,1,
47,3507,5,19,1,
0,3508,16,0,760,
1,2760,3509,16,0,
760,1,2779,3510,17,
3511,15,3512,4,50,
37,0,71,0,108,
0,111,0,98,0,
97,0,108,0,70,
0,117,0,110,0,
99,0,116,0,105,
0,111,0,110,0,
68,0,101,0,102,
0,105,0,110,0,
105,0,116,0,105,
0,111,0,110,0,
1,-1,1,5,3513,
20,3514,4,52,71,
0,108,0,111,0,
98,0,97,0,108,
0,70,0,117,0,
110,0,99,0,116,
0,105,0,111,0,
110,0,68,0,101,
0,102,0,105,0,
110,0,105,0,116,
0,105,0,111,0,
110,0,95,0,49,
0,1,174,1,3,
1,6,1,5,3515,
22,1,9,1,2764,
801,1,2818,3516,17,
3517,15,3518,4,52,
37,0,71,0,108,
0,111,0,98,0,
97,0,108,0,86,
0,97,0,114,0,
105,0,97,0,98,
0,108,0,101,0,
68,0,101,0,99,
0,108,0,97,0,
114,0,97,0,116,
0,105,0,111,0,
110,0,1,-1,1,
5,3519,20,3520,4,
54,71,0,108,0,
111,0,98,0,97,
0,108,0,86,0,
97,0,114,0,105,
0,97,0,98,0,
108,0,101,0,68,
0,101,0,99,0,
108,0,97,0,114,
0,97,0,116,0,
105,0,111,0,110,
0,95,0,49,0,
1,172,1,3,1,
3,1,2,3521,22,
1,7,1,2819,3522,
16,0,760,1,2751,
807,1,2022,3523,16,
0,658,1,2459,1004,
1,2830,3524,16,0,
760,1,2647,824,1,
2464,1021,1,2466,3525,
17,3526,15,3512,1,
-1,1,5,3527,20,
3528,4,52,71,0,
108,0,111,0,98,
0,97,0,108,0,
70,0,117,0,110,
0,99,0,116,0,
105,0,111,0,110,
0,68,0,101,0,
102,0,105,0,110,
0,105,0,116,0,
105,0,111,0,110,
0,95,0,50,0,
1,175,1,3,1,
7,1,6,3529,22,
1,10,1,2837,3530,
17,3531,15,3532,4,
36,37,0,71,0,
108,0,111,0,98,
0,97,0,108,0,
68,0,101,0,102,
0,105,0,110,0,
105,0,116,0,105,
0,111,0,110,0,
115,0,1,-1,1,
5,3533,20,3534,4,
38,71,0,108,0,
111,0,98,0,97,
0,108,0,68,0,
101,0,102,0,105,
0,110,0,105,0,
116,0,105,0,111,
0,110,0,115,0,
95,0,52,0,1,
171,1,3,1,3,
1,2,3535,22,1,
6,1,2838,3536,17,
3537,15,3532,1,-1,
1,5,3538,20,3539,
4,38,71,0,108,
0,111,0,98,0,
97,0,108,0,68,
0,101,0,102,0,
105,0,110,0,105,
0,116,0,105,0,
111,0,110,0,115,
0,95,0,50,0,
1,169,1,3,1,
3,1,2,3540,22,
1,4,1,2839,3541,
17,3542,15,3532,1,
-1,1,5,3543,20,
3544,4,38,71,0,
108,0,111,0,98,
0,97,0,108,0,
68,0,101,0,102,
0,105,0,110,0,
105,0,116,0,105,
0,111,0,110,0,
115,0,95,0,51,
0,1,170,1,3,
1,2,1,1,3545,
22,1,5,1,2840,
3546,17,3547,15,3532,
1,-1,1,5,3548,
20,3549,4,38,71,
0,108,0,111,0,
98,0,97,0,108,
0,68,0,101,0,
102,0,105,0,110,
0,105,0,116,0,
105,0,111,0,110,
0,115,0,95,0,
49,0,1,168,1,
3,1,2,1,1,
3550,22,1,3,1,
2807,3551,17,3552,15,
3518,1,-1,1,5,
3553,20,3554,4,54,
71,0,108,0,111,
0,98,0,97,0,
108,0,86,0,97,
0,114,0,105,0,
97,0,98,0,108,
0,101,0,68,0,
101,0,99,0,108,
0,97,0,114,0,
97,0,116,0,105,
0,111,0,110,0,
95,0,50,0,1,
173,1,3,1,5,
1,4,3555,22,1,
8,1,2763,813,1,
48,3556,19,375,1,
48,3557,5,54,1,
0,3558,16,0,373,
1,2837,3530,1,2838,
3536,1,2839,3541,1,
2840,3546,1,1860,943,
1,1958,3559,16,0,
573,1,2760,3560,16,
0,373,1,2413,3561,
16,0,573,1,2198,
3562,16,0,573,1,
1873,958,1,1657,1016,
1,2030,853,1,2751,
807,1,1989,1038,1,
1990,3563,16,0,573,
1,2458,998,1,2459,
1004,1,1775,3564,16,
0,573,1,32,3565,
16,0,573,1,2105,
936,1,2106,3566,16,
0,573,1,2763,813,
1,2764,801,1,2227,
1030,1,2337,3567,16,
0,573,1,2075,3568,
16,0,573,1,2779,
3510,1,1803,909,1,
1804,3569,16,0,573,
1,1901,3570,16,0,
573,1,2462,1011,1,
2136,965,1,2464,1021,
1,2029,847,1,2466,
3525,1,2031,858,1,
2032,863,1,2033,868,
1,2035,874,1,2364,
949,1,2039,884,1,
1931,983,1,2041,890,
1,2021,840,1,2043,
896,1,2807,3551,1,
2045,901,1,2647,824,
1,2818,3516,1,2819,
3571,16,0,373,1,
2037,879,1,1574,921,
1,2830,3572,16,0,
373,1,49,3573,19,
578,1,49,3574,5,
38,1,1901,3575,16,
0,576,1,2075,3576,
16,0,576,1,1860,
943,1,1803,909,1,
1804,3577,16,0,576,
1,2413,3578,16,0,
576,1,2198,3579,16,
0,576,1,1873,958,
1,1657,1016,1,1989,
1038,1,1990,3580,16,
0,576,1,1775,3581,
16,0,576,1,32,
3582,16,0,576,1,
2105,936,1,2106,3583,
16,0,576,1,2364,
949,1,2227,1030,1,
2337,3584,16,0,576,
1,2021,840,1,2458,
998,1,2459,1004,1,
2462,1011,1,2136,965,
1,2464,1021,1,2029,
847,1,2030,853,1,
2031,858,1,2032,863,
1,2033,868,1,2035,
874,1,2037,879,1,
2039,884,1,1931,983,
1,2041,890,1,2043,
896,1,2045,901,1,
1574,921,1,1958,3585,
16,0,576,1,50,
3586,19,718,1,50,
3587,5,38,1,1901,
3588,16,0,716,1,
2075,3589,16,0,716,
1,1860,943,1,1803,
909,1,1804,3590,16,
0,716,1,2413,3591,
16,0,716,1,2198,
3592,16,0,716,1,
1873,958,1,1657,1016,
1,1989,1038,1,1990,
3593,16,0,716,1,
1775,3594,16,0,716,
1,32,3595,16,0,
716,1,2105,936,1,
2106,3596,16,0,716,
1,2364,949,1,2227,
1030,1,2337,3597,16,
0,716,1,2021,840,
1,2458,998,1,2459,
1004,1,2462,1011,1,
2136,965,1,2464,1021,
1,2029,847,1,2030,
853,1,2031,858,1,
2032,863,1,2033,868,
1,2035,874,1,2037,
879,1,2039,884,1,
1931,983,1,2041,890,
1,2043,896,1,2045,
901,1,1574,921,1,
1958,3598,16,0,716,
1,51,3599,19,127,
1,51,3600,5,58,
1,0,3601,16,0,
125,1,2537,3602,16,
0,691,1,2837,3530,
1,2838,3536,1,2839,
3541,1,2840,3546,1,
1860,943,1,10,3603,
16,0,125,1,2413,
3604,16,0,125,1,
2198,3605,16,0,125,
1,1873,958,1,21,
3606,16,0,125,1,
1657,1016,1,2030,853,
1,1989,1038,1,1990,
3607,16,0,125,1,
2458,998,1,2459,1004,
1,1775,3608,16,0,
125,1,32,3609,16,
0,125,1,2105,936,
1,2106,3610,16,0,
125,1,2045,901,1,
2766,3611,16,0,125,
1,2227,1030,1,2337,
3612,16,0,125,1,
2075,3613,16,0,125,
1,52,3614,16,0,
125,1,2560,3615,16,
0,691,1,2779,3510,
1,1803,909,1,1804,
3616,16,0,125,1,
1901,3617,16,0,125,
1,2462,1011,1,2136,
965,1,2464,1021,1,
2029,847,1,2466,3525,
1,2031,858,1,2032,
863,1,2033,868,1,
2035,874,1,2581,3618,
16,0,125,1,2364,
949,1,2039,884,1,
1931,983,1,2041,890,
1,2021,840,1,2043,
896,1,2807,3551,1,
2510,3619,16,0,691,
1,2514,3620,16,0,
691,1,2818,3516,1,
2819,3621,16,0,125,
1,2522,3622,16,0,
691,1,2037,879,1,
1574,921,1,1958,3623,
16,0,125,1,52,
3624,19,124,1,52,
3625,5,53,1,0,
3626,16,0,122,1,
2837,3530,1,2838,3536,
1,2839,3541,1,2840,
3546,1,1860,943,1,
10,3627,16,0,122,
1,2413,3628,16,0,
122,1,2198,3629,16,
0,122,1,1873,958,
1,21,3630,16,0,
122,1,1657,1016,1,
2030,853,1,1989,1038,
1,1990,3631,16,0,
122,1,2458,998,1,
2459,1004,1,1775,3632,
16,0,122,1,32,
3633,16,0,122,1,
2105,936,1,2106,3634,
16,0,122,1,2766,
3635,16,0,122,1,
2227,1030,1,2337,3636,
16,0,122,1,2075,
3637,16,0,122,1,
52,3638,16,0,122,
1,2779,3510,1,1803,
909,1,1804,3639,16,
0,122,1,1901,3640,
16,0,122,1,2462,
1011,1,2136,965,1,
2464,1021,1,2029,847,
1,2466,3525,1,2031,
858,1,2032,863,1,
2033,868,1,2035,874,
1,2581,3641,16,0,
122,1,2364,949,1,
2039,884,1,1931,983,
1,2041,890,1,2021,
840,1,2043,896,1,
2807,3551,1,2045,901,
1,2818,3516,1,2819,
3642,16,0,122,1,
2037,879,1,1574,921,
1,1958,3643,16,0,
122,1,53,3644,19,
121,1,53,3645,5,
53,1,0,3646,16,
0,119,1,2837,3530,
1,2838,3536,1,2839,
3541,1,2840,3546,1,
1860,943,1,10,3647,
16,0,119,1,2413,
3648,16,0,119,1,
2198,3649,16,0,119,
1,1873,958,1,21,
3650,16,0,119,1,
1657,1016,1,2030,853,
1,1989,1038,1,1990,
3651,16,0,119,1,
2458,998,1,2459,1004,
1,1775,3652,16,0,
119,1,32,3653,16,
0,119,1,2105,936,
1,2106,3654,16,0,
119,1,2766,3655,16,
0,119,1,2227,1030,
1,2337,3656,16,0,
119,1,2075,3657,16,
0,119,1,52,3658,
16,0,119,1,2779,
3510,1,1803,909,1,
1804,3659,16,0,119,
1,1901,3660,16,0,
119,1,2462,1011,1,
2136,965,1,2464,1021,
1,2029,847,1,2466,
3525,1,2031,858,1,
2032,863,1,2033,868,
1,2035,874,1,2581,
3661,16,0,119,1,
2364,949,1,2039,884,
1,1931,983,1,2041,
890,1,2021,840,1,
2043,896,1,2807,3551,
1,2045,901,1,2818,
3516,1,2819,3662,16,
0,119,1,2037,879,
1,1574,921,1,1958,
3663,16,0,119,1,
54,3664,19,118,1,
54,3665,5,55,1,
0,3666,16,0,116,
1,2837,3530,1,2838,
3536,1,2839,3541,1,
2840,3546,1,1860,943,
1,10,3667,16,0,
116,1,2413,3668,16,
0,116,1,2198,3669,
16,0,116,1,1873,
958,1,21,3670,16,
0,116,1,1657,1016,
1,2030,853,1,1989,
1038,1,1990,3671,16,
0,116,1,2458,998,
1,2459,1004,1,1775,
3672,16,0,116,1,
32,3673,16,0,116,
1,2105,936,1,2106,
3674,16,0,116,1,
2766,3675,16,0,116,
1,2227,1030,1,2337,
3676,16,0,116,1,
2075,3677,16,0,116,
1,52,3678,16,0,
116,1,2779,3510,1,
1803,909,1,1804,3679,
16,0,116,1,1901,
3680,16,0,116,1,
2462,1011,1,2136,965,
1,2464,1021,1,2029,
847,1,2466,3525,1,
2031,858,1,2032,863,
1,2033,868,1,2035,
874,1,2581,3681,16,
0,116,1,2364,949,
1,2039,884,1,1931,
983,1,2041,890,1,
2021,840,1,2043,896,
1,2807,3551,1,2045,
901,1,2568,3682,16,
0,470,1,2818,3516,
1,2819,3683,16,0,
116,1,2037,879,1,
1574,921,1,1958,3684,
16,0,116,1,2506,
3685,16,0,470,1,
55,3686,19,115,1,
55,3687,5,56,1,
0,3688,16,0,113,
1,2837,3530,1,2838,
3536,1,2839,3541,1,
2840,3546,1,1860,943,
1,10,3689,16,0,
113,1,2413,3690,16,
0,113,1,2525,3691,
16,0,493,1,1657,
1016,1,1873,958,1,
21,3692,16,0,113,
1,2529,3693,16,0,
493,1,2030,853,1,
1989,1038,1,1990,3694,
16,0,113,1,2458,
998,1,2459,1004,1,
1775,3695,16,0,113,
1,32,3696,16,0,
113,1,2105,936,1,
2106,3697,16,0,113,
1,2766,3698,16,0,
113,1,2552,3699,16,
0,493,1,2227,1030,
1,2337,3700,16,0,
113,1,2075,3701,16,
0,113,1,52,3702,
16,0,113,1,2779,
3510,1,1803,909,1,
1804,3703,16,0,113,
1,1901,3704,16,0,
113,1,2462,1011,1,
2136,965,1,2464,1021,
1,2029,847,1,2466,
3525,1,2031,858,1,
2032,863,1,2033,868,
1,2035,874,1,2581,
3705,16,0,113,1,
2364,949,1,2039,884,
1,1931,983,1,2041,
890,1,2021,840,1,
2043,896,1,2807,3551,
1,2045,901,1,2198,
3706,16,0,113,1,
2818,3516,1,2819,3707,
16,0,113,1,2037,
879,1,1574,921,1,
1958,3708,16,0,113,
1,56,3709,19,112,
1,56,3710,5,55,
1,0,3711,16,0,
110,1,2837,3530,1,
2838,3536,1,2839,3541,
1,2840,3546,1,1860,
943,1,10,3712,16,
0,110,1,2413,3713,
16,0,110,1,2198,
3714,16,0,110,1,
1873,958,1,21,3715,
16,0,110,1,1657,
1016,1,2030,853,1,
1989,1038,1,1990,3716,
16,0,110,1,2458,
998,1,2459,1004,1,
1775,3717,16,0,110,
1,32,3718,16,0,
110,1,2540,3719,16,
0,511,1,2105,936,
1,2106,3720,16,0,
110,1,2544,3721,16,
0,511,1,2766,3722,
16,0,110,1,2227,
1030,1,2337,3723,16,
0,110,1,2075,3724,
16,0,110,1,52,
3725,16,0,110,1,
2779,3510,1,1803,909,
1,1804,3726,16,0,
110,1,1901,3727,16,
0,110,1,2462,1011,
1,2136,965,1,2464,
1021,1,2029,847,1,
2466,3525,1,2031,858,
1,2032,863,1,2033,
868,1,2035,874,1,
2581,3728,16,0,110,
1,2364,949,1,2039,
884,1,1931,983,1,
2041,890,1,2021,840,
1,2043,896,1,2807,
3551,1,2045,901,1,
2818,3516,1,2819,3729,
16,0,110,1,2037,
879,1,1574,921,1,
1958,3730,16,0,110,
1,57,3731,19,109,
1,57,3732,5,53,
1,0,3733,16,0,
107,1,2837,3530,1,
2838,3536,1,2839,3541,
1,2840,3546,1,1860,
943,1,10,3734,16,
0,107,1,2413,3735,
16,0,107,1,2198,
3736,16,0,107,1,
1873,958,1,21,3737,
16,0,107,1,1657,
1016,1,2030,853,1,
1989,1038,1,1990,3738,
16,0,107,1,2458,
998,1,2459,1004,1,
1775,3739,16,0,107,
1,32,3740,16,0,
107,1,2105,936,1,
2106,3741,16,0,107,
1,2766,3742,16,0,
107,1,2227,1030,1,
2337,3743,16,0,107,
1,2075,3744,16,0,
107,1,52,3745,16,
0,107,1,2779,3510,
1,1803,909,1,1804,
3746,16,0,107,1,
1901,3747,16,0,107,
1,2462,1011,1,2136,
965,1,2464,1021,1,
2029,847,1,2466,3525,
1,2031,858,1,2032,
863,1,2033,868,1,
2035,874,1,2581,3748,
16,0,107,1,2364,
949,1,2039,884,1,
1931,983,1,2041,890,
1,2021,840,1,2043,
896,1,2807,3551,1,
2045,901,1,2818,3516,
1,2819,3749,16,0,
107,1,2037,879,1,
1574,921,1,1958,3750,
16,0,107,1,58,
3751,19,386,1,58,
3752,5,30,1,2644,
1753,1,2520,1758,1,
2639,1765,1,2640,1770,
1,2641,1775,1,2642,
1780,1,2643,1747,1,
2535,1785,1,2645,1791,
1,2646,1796,1,2648,
1875,1,2649,1802,1,
2650,1807,1,2651,1812,
1,2652,1817,1,2653,
1822,1,2654,1827,1,
2655,1832,1,2657,3753,
16,0,384,1,2550,
1843,1,2579,1861,1,
2558,1849,1,2566,1855,
1,2459,1004,1,2464,
1021,1,2574,1837,1,
2470,3754,16,0,384,
1,2700,3755,16,0,
384,1,2594,1868,1,
2596,3756,16,0,384,
1,59,3757,19,383,
1,59,3758,5,30,
1,2644,1753,1,2520,
1758,1,2639,1765,1,
2640,1770,1,2641,1775,
1,2642,1780,1,2643,
1747,1,2535,1785,1,
2645,1791,1,2646,1796,
1,2648,1875,1,2649,
1802,1,2650,1807,1,
2651,1812,1,2652,1817,
1,2653,1822,1,2654,
1827,1,2655,1832,1,
2657,3759,16,0,381,
1,2550,1843,1,2579,
1861,1,2558,1849,1,
2566,1855,1,2459,1004,
1,2464,1021,1,2574,
1837,1,2470,3760,16,
0,381,1,2700,3761,
16,0,381,1,2594,
1868,1,2596,3762,16,
0,381,1,60,3763,
19,545,1,60,3764,
5,30,1,2644,1753,
1,2520,1758,1,2639,
1765,1,2640,1770,1,
2641,1775,1,2642,1780,
1,2643,1747,1,2535,
1785,1,2645,1791,1,
2646,1796,1,2648,1875,
1,2649,1802,1,2650,
1807,1,2651,1812,1,
2652,1817,1,2653,1822,
1,2654,1827,1,2655,
1832,1,2657,3765,16,
0,543,1,2550,1843,
1,2579,1861,1,2558,
1849,1,2566,1855,1,
2459,1004,1,2464,1021,
1,2574,1837,1,2470,
3766,16,0,543,1,
2700,3767,16,0,543,
1,2594,1868,1,2596,
3768,16,0,543,1,
61,3769,19,423,1,
61,3770,5,30,1,
2644,1753,1,2520,1758,
1,2639,1765,1,2640,
1770,1,2641,1775,1,
2642,1780,1,2643,1747,
1,2535,1785,1,2645,
1791,1,2646,1796,1,
2648,1875,1,2649,1802,
1,2650,1807,1,2651,
1812,1,2652,1817,1,
2653,1822,1,2654,1827,
1,2655,1832,1,2657,
3771,16,0,421,1,
2550,1843,1,2579,1861,
1,2558,1849,1,2566,
1855,1,2459,1004,1,
2464,1021,1,2574,1837,
1,2470,3772,16,0,
421,1,2700,3773,16,
0,421,1,2594,1868,
1,2596,3774,16,0,
421,1,62,3775,19,
541,1,62,3776,5,
30,1,2644,1753,1,
2520,1758,1,2639,1765,
1,2640,1770,1,2641,
1775,1,2642,1780,1,
2643,1747,1,2535,1785,
1,2645,1791,1,2646,
1796,1,2648,1875,1,
2649,1802,1,2650,1807,
1,2651,1812,1,2652,
1817,1,2653,1822,1,
2654,1827,1,2655,1832,
1,2657,3777,16,0,
539,1,2550,1843,1,
2579,1861,1,2558,1849,
1,2566,1855,1,2459,
1004,1,2464,1021,1,
2574,1837,1,2470,3778,
16,0,539,1,2700,
3779,16,0,539,1,
2594,1868,1,2596,3780,
16,0,539,1,63,
3781,19,653,1,63,
3782,5,30,1,2644,
1753,1,2520,1758,1,
2639,1765,1,2640,1770,
1,2641,1775,1,2642,
1780,1,2643,1747,1,
2535,1785,1,2645,1791,
1,2646,1796,1,2648,
1875,1,2649,1802,1,
2650,1807,1,2651,1812,
1,2652,1817,1,2653,
1822,1,2654,1827,1,
2655,1832,1,2657,3783,
16,0,651,1,2550,
1843,1,2579,1861,1,
2558,1849,1,2566,1855,
1,2459,1004,1,2464,
1021,1,2574,1837,1,
2470,3784,16,0,651,
1,2700,3785,16,0,
651,1,2594,1868,1,
2596,3786,16,0,651,
1,64,3787,19,416,
1,64,3788,5,30,
1,2644,1753,1,2520,
1758,1,2639,1765,1,
2640,1770,1,2641,1775,
1,2642,1780,1,2643,
1747,1,2535,1785,1,
2645,1791,1,2646,1796,
1,2648,1875,1,2649,
1802,1,2650,1807,1,
2651,1812,1,2652,1817,
1,2653,1822,1,2654,
1827,1,2655,1832,1,
2657,3789,16,0,414,
1,2550,1843,1,2579,
1861,1,2558,1849,1,
2566,1855,1,2459,1004,
1,2464,1021,1,2574,
1837,1,2470,3790,16,
0,414,1,2700,3791,
16,0,414,1,2594,
1868,1,2596,3792,16,
0,414,1,65,3793,
19,380,1,65,3794,
5,30,1,2644,1753,
1,2520,1758,1,2639,
1765,1,2640,1770,1,
2641,1775,1,2642,1780,
1,2643,1747,1,2535,
1785,1,2645,1791,1,
2646,1796,1,2648,1875,
1,2649,1802,1,2650,
1807,1,2651,1812,1,
2652,1817,1,2653,1822,
1,2654,1827,1,2655,
1832,1,2657,3795,16,
0,378,1,2550,1843,
1,2579,1861,1,2558,
1849,1,2566,1855,1,
2459,1004,1,2464,1021,
1,2574,1837,1,2470,
3796,16,0,378,1,
2700,3797,16,0,378,
1,2594,1868,1,2596,
3798,16,0,378,1,
66,3799,19,465,1,
66,3800,5,30,1,
2644,1753,1,2520,1758,
1,2639,1765,1,2640,
1770,1,2641,1775,1,
2642,1780,1,2643,1747,
1,2535,1785,1,2645,
1791,1,2646,1796,1,
2648,1875,1,2649,1802,
1,2650,1807,1,2651,
1812,1,2652,1817,1,
2653,1822,1,2654,1827,
1,2655,1832,1,2657,
3801,16,0,463,1,
2550,1843,1,2579,1861,
1,2558,1849,1,2566,
1855,1,2459,1004,1,
2464,1021,1,2574,1837,
1,2470,3802,16,0,
463,1,2700,3803,16,
0,463,1,2594,1868,
1,2596,3804,16,0,
463,1,67,3805,19,
462,1,67,3806,5,
30,1,2644,1753,1,
2520,1758,1,2639,1765,
1,2640,1770,1,2641,
1775,1,2642,1780,1,
2643,1747,1,2535,1785,
1,2645,1791,1,2646,
1796,1,2648,1875,1,
2649,1802,1,2650,1807,
1,2651,1812,1,2652,
1817,1,2653,1822,1,
2654,1827,1,2655,1832,
1,2657,3807,16,0,
460,1,2550,1843,1,
2579,1861,1,2558,1849,
1,2566,1855,1,2459,
1004,1,2464,1021,1,
2574,1837,1,2470,3808,
16,0,460,1,2700,
3809,16,0,460,1,
2594,1868,1,2596,3810,
16,0,460,1,68,
3811,19,459,1,68,
3812,5,30,1,2644,
1753,1,2520,1758,1,
2639,1765,1,2640,1770,
1,2641,1775,1,2642,
1780,1,2643,1747,1,
2535,1785,1,2645,1791,
1,2646,1796,1,2648,
1875,1,2649,1802,1,
2650,1807,1,2651,1812,
1,2652,1817,1,2653,
1822,1,2654,1827,1,
2655,1832,1,2657,3813,
16,0,457,1,2550,
1843,1,2579,1861,1,
2558,1849,1,2566,1855,
1,2459,1004,1,2464,
1021,1,2574,1837,1,
2470,3814,16,0,457,
1,2700,3815,16,0,
457,1,2594,1868,1,
2596,3816,16,0,457,
1,69,3817,19,395,
1,69,3818,5,30,
1,2644,1753,1,2520,
1758,1,2639,1765,1,
2640,1770,1,2641,1775,
1,2642,1780,1,2643,
1747,1,2535,1785,1,
2645,1791,1,2646,1796,
1,2648,1875,1,2649,
1802,1,2650,1807,1,
2651,1812,1,2652,1817,
1,2653,1822,1,2654,
1827,1,2655,1832,1,
2657,3819,16,0,393,
1,2550,1843,1,2579,
1861,1,2558,1849,1,
2566,1855,1,2459,1004,
1,2464,1021,1,2574,
1837,1,2470,3820,16,
0,393,1,2700,3821,
16,0,393,1,2594,
1868,1,2596,3822,16,
0,393,1,70,3823,
19,392,1,70,3824,
5,30,1,2644,1753,
1,2520,1758,1,2639,
1765,1,2640,1770,1,
2641,1775,1,2642,1780,
1,2643,1747,1,2535,
1785,1,2645,1791,1,
2646,1796,1,2648,1875,
1,2649,1802,1,2650,
1807,1,2651,1812,1,
2652,1817,1,2653,1822,
1,2654,1827,1,2655,
1832,1,2657,3825,16,
0,390,1,2550,1843,
1,2579,1861,1,2558,
1849,1,2566,1855,1,
2459,1004,1,2464,1021,
1,2574,1837,1,2470,
3826,16,0,390,1,
2700,3827,16,0,390,
1,2594,1868,1,2596,
3828,16,0,390,1,
71,3829,19,389,1,
71,3830,5,30,1,
2644,1753,1,2520,1758,
1,2639,1765,1,2640,
1770,1,2641,1775,1,
2642,1780,1,2643,1747,
1,2535,1785,1,2645,
1791,1,2646,1796,1,
2648,1875,1,2649,1802,
1,2650,1807,1,2651,
1812,1,2652,1817,1,
2653,1822,1,2654,1827,
1,2655,1832,1,2657,
3831,16,0,387,1,
2550,1843,1,2579,1861,
1,2558,1849,1,2566,
1855,1,2459,1004,1,
2464,1021,1,2574,1837,
1,2470,3832,16,0,
387,1,2700,3833,16,
0,387,1,2594,1868,
1,2596,3834,16,0,
387,1,72,3835,19,
456,1,72,3836,5,
30,1,2644,1753,1,
2520,1758,1,2639,1765,
1,2640,1770,1,2641,
1775,1,2642,1780,1,
2643,1747,1,2535,1785,
1,2645,1791,1,2646,
1796,1,2648,1875,1,
2649,1802,1,2650,1807,
1,2651,1812,1,2652,
1817,1,2653,1822,1,
2654,1827,1,2655,1832,
1,2657,3837,16,0,
454,1,2550,1843,1,
2579,1861,1,2558,1849,
1,2566,1855,1,2459,
1004,1,2464,1021,1,
2574,1837,1,2470,3838,
16,0,454,1,2700,
3839,16,0,454,1,
2594,1868,1,2596,3840,
16,0,454,1,73,
3841,19,453,1,73,
3842,5,30,1,2644,
1753,1,2520,1758,1,
2639,1765,1,2640,1770,
1,2641,1775,1,2642,
1780,1,2643,1747,1,
2535,1785,1,2645,1791,
1,2646,1796,1,2648,
1875,1,2649,1802,1,
2650,1807,1,2651,1812,
1,2652,1817,1,2653,
1822,1,2654,1827,1,
2655,1832,1,2657,3843,
16,0,451,1,2550,
1843,1,2579,1861,1,
2558,1849,1,2566,1855,
1,2459,1004,1,2464,
1021,1,2574,1837,1,
2470,3844,16,0,451,
1,2700,3845,16,0,
451,1,2594,1868,1,
2596,3846,16,0,451,
1,74,3847,19,450,
1,74,3848,5,30,
1,2644,1753,1,2520,
1758,1,2639,1765,1,
2640,1770,1,2641,1775,
1,2642,1780,1,2643,
1747,1,2535,1785,1,
2645,1791,1,2646,1796,
1,2648,1875,1,2649,
1802,1,2650,1807,1,
2651,1812,1,2652,1817,
1,2653,1822,1,2654,
1827,1,2655,1832,1,
2657,3849,16,0,448,
1,2550,1843,1,2579,
1861,1,2558,1849,1,
2566,1855,1,2459,1004,
1,2464,1021,1,2574,
1837,1,2470,3850,16,
0,448,1,2700,3851,
16,0,448,1,2594,
1868,1,2596,3852,16,
0,448,1,75,3853,
19,439,1,75,3854,
5,30,1,2644,1753,
1,2520,1758,1,2639,
1765,1,2640,1770,1,
2641,1775,1,2642,1780,
1,2643,1747,1,2535,
1785,1,2645,1791,1,
2646,1796,1,2648,1875,
1,2649,1802,1,2650,
1807,1,2651,1812,1,
2652,1817,1,2653,1822,
1,2654,1827,1,2655,
1832,1,2657,3855,16,
0,437,1,2550,1843,
1,2579,1861,1,2558,
1849,1,2566,1855,1,
2459,1004,1,2464,1021,
1,2574,1837,1,2470,
3856,16,0,437,1,
2700,3857,16,0,437,
1,2594,1868,1,2596,
3858,16,0,437,1,
76,3859,19,560,1,
76,3860,5,30,1,
2644,1753,1,2520,1758,
1,2639,1765,1,2640,
1770,1,2641,1775,1,
2642,1780,1,2643,1747,
1,2535,1785,1,2645,
1791,1,2646,1796,1,
2648,1875,1,2649,1802,
1,2650,1807,1,2651,
1812,1,2652,1817,1,
2653,1822,1,2654,1827,
1,2655,1832,1,2657,
3861,16,0,558,1,
2550,1843,1,2579,1861,
1,2558,1849,1,2566,
1855,1,2459,1004,1,
2464,1021,1,2574,1837,
1,2470,3862,16,0,
558,1,2700,3863,16,
0,558,1,2594,1868,
1,2596,3864,16,0,
558,1,77,3865,19,
435,1,77,3866,5,
30,1,2644,1753,1,
2520,1758,1,2639,1765,
1,2640,1770,1,2641,
1775,1,2642,1780,1,
2643,1747,1,2535,1785,
1,2645,1791,1,2646,
1796,1,2648,1875,1,
2649,1802,1,2650,1807,
1,2651,1812,1,2652,
1817,1,2653,1822,1,
2654,1827,1,2655,1832,
1,2657,3867,16,0,
433,1,2550,1843,1,
2579,1861,1,2558,1849,
1,2566,1855,1,2459,
1004,1,2464,1021,1,
2574,1837,1,2470,3868,
16,0,433,1,2700,
3869,16,0,433,1,
2594,1868,1,2596,3870,
16,0,433,1,78,
3871,19,554,1,78,
3872,5,30,1,2644,
1753,1,2520,1758,1,
2639,1765,1,2640,1770,
1,2641,1775,1,2642,
1780,1,2643,1747,1,
2535,1785,1,2645,1791,
1,2646,1796,1,2648,
1875,1,2649,1802,1,
2650,1807,1,2651,1812,
1,2652,1817,1,2653,
1822,1,2654,1827,1,
2655,1832,1,2657,3873,
16,0,552,1,2550,
1843,1,2579,1861,1,
2558,1849,1,2566,1855,
1,2459,1004,1,2464,
1021,1,2574,1837,1,
2470,3874,16,0,552,
1,2700,3875,16,0,
552,1,2594,1868,1,
2596,3876,16,0,552,
1,79,3877,19,551,
1,79,3878,5,30,
1,2644,1753,1,2520,
1758,1,2639,1765,1,
2640,1770,1,2641,1775,
1,2642,1780,1,2643,
1747,1,2535,1785,1,
2645,1791,1,2646,1796,
1,2648,1875,1,2649,
1802,1,2650,1807,1,
2651,1812,1,2652,1817,
1,2653,1822,1,2654,
1827,1,2655,1832,1,
2657,3879,16,0,549,
1,2550,1843,1,2579,
1861,1,2558,1849,1,
2566,1855,1,2459,1004,
1,2464,1021,1,2574,
1837,1,2470,3880,16,
0,549,1,2700,3881,
16,0,549,1,2594,
1868,1,2596,3882,16,
0,549,1,80,3883,
19,426,1,80,3884,
5,30,1,2644,1753,
1,2520,1758,1,2639,
1765,1,2640,1770,1,
2641,1775,1,2642,1780,
1,2643,1747,1,2535,
1785,1,2645,1791,1,
2646,1796,1,2648,1875,
1,2649,1802,1,2650,
1807,1,2651,1812,1,
2652,1817,1,2653,1822,
1,2654,1827,1,2655,
1832,1,2657,3885,16,
0,424,1,2550,1843,
1,2579,1861,1,2558,
1849,1,2566,1855,1,
2459,1004,1,2464,1021,
1,2574,1837,1,2470,
3886,16,0,424,1,
2700,3887,16,0,424,
1,2594,1868,1,2596,
3888,16,0,424,1,
81,3889,19,413,1,
81,3890,5,30,1,
2644,1753,1,2520,1758,
1,2639,1765,1,2640,
1770,1,2641,1775,1,
2642,1780,1,2643,1747,
1,2535,1785,1,2645,
1791,1,2646,1796,1,
2648,1875,1,2649,1802,
1,2650,1807,1,2651,
1812,1,2652,1817,1,
2653,1822,1,2654,1827,
1,2655,1832,1,2657,
3891,16,0,411,1,
2550,1843,1,2579,1861,
1,2558,1849,1,2566,
1855,1,2459,1004,1,
2464,1021,1,2574,1837,
1,2470,3892,16,0,
411,1,2700,3893,16,
0,411,1,2594,1868,
1,2596,3894,16,0,
411,1,82,3895,19,
758,1,82,3896,5,
30,1,2644,1753,1,
2520,1758,1,2639,1765,
1,2640,1770,1,2641,
1775,1,2642,1780,1,
2643,1747,1,2535,1785,
1,2645,1791,1,2646,
1796,1,2648,1875,1,
2649,1802,1,2650,1807,
1,2651,1812,1,2652,
1817,1,2653,1822,1,
2654,1827,1,2655,1832,
1,2657,3897,16,0,
756,1,2550,1843,1,
2579,1861,1,2558,1849,
1,2566,1855,1,2459,
1004,1,2464,1021,1,
2574,1837,1,2470,3898,
16,0,756,1,2700,
3899,16,0,756,1,
2594,1868,1,2596,3900,
16,0,756,1,83,
3901,19,410,1,83,
3902,5,30,1,2644,
1753,1,2520,1758,1,
2639,1765,1,2640,1770,
1,2641,1775,1,2642,
1780,1,2643,1747,1,
2535,1785,1,2645,1791,
1,2646,1796,1,2648,
1875,1,2649,1802,1,
2650,1807,1,2651,1812,
1,2652,1817,1,2653,
1822,1,2654,1827,1,
2655,1832,1,2657,3903,
16,0,408,1,2550,
1843,1,2579,1861,1,
2558,1849,1,2566,1855,
1,2459,1004,1,2464,
1021,1,2574,1837,1,
2470,3904,16,0,408,
1,2700,3905,16,0,
408,1,2594,1868,1,
2596,3906,16,0,408,
1,84,3907,19,407,
1,84,3908,5,30,
1,2644,1753,1,2520,
1758,1,2639,1765,1,
2640,1770,1,2641,1775,
1,2642,1780,1,2643,
1747,1,2535,1785,1,
2645,1791,1,2646,1796,
1,2648,1875,1,2649,
1802,1,2650,1807,1,
2651,1812,1,2652,1817,
1,2653,1822,1,2654,
1827,1,2655,1832,1,
2657,3909,16,0,405,
1,2550,1843,1,2579,
1861,1,2558,1849,1,
2566,1855,1,2459,1004,
1,2464,1021,1,2574,
1837,1,2470,3910,16,
0,405,1,2700,3911,
16,0,405,1,2594,
1868,1,2596,3912,16,
0,405,1,85,3913,
19,570,1,85,3914,
5,30,1,2644,1753,
1,2520,1758,1,2639,
1765,1,2640,1770,1,
2641,1775,1,2642,1780,
1,2643,1747,1,2535,
1785,1,2645,1791,1,
2646,1796,1,2648,1875,
1,2649,1802,1,2650,
1807,1,2651,1812,1,
2652,1817,1,2653,1822,
1,2654,1827,1,2655,
1832,1,2657,3915,16,
0,568,1,2550,1843,
1,2579,1861,1,2558,
1849,1,2566,1855,1,
2459,1004,1,2464,1021,
1,2574,1837,1,2470,
3916,16,0,568,1,
2700,3917,16,0,568,
1,2594,1868,1,2596,
3918,16,0,568,1,
86,3919,19,442,1,
86,3920,5,30,1,
2644,1753,1,2520,1758,
1,2639,1765,1,2640,
1770,1,2641,1775,1,
2642,1780,1,2643,1747,
1,2535,1785,1,2645,
1791,1,2646,1796,1,
2648,1875,1,2649,1802,
1,2650,1807,1,2651,
1812,1,2652,1817,1,
2653,1822,1,2654,1827,
1,2655,1832,1,2657,
3921,16,0,440,1,
2550,1843,1,2579,1861,
1,2558,1849,1,2566,
1855,1,2459,1004,1,
2464,1021,1,2574,1837,
1,2470,3922,16,0,
440,1,2700,3923,16,
0,440,1,2594,1868,
1,2596,3924,16,0,
440,1,87,3925,19,
548,1,87,3926,5,
30,1,2644,1753,1,
2520,1758,1,2639,1765,
1,2640,1770,1,2641,
1775,1,2642,1780,1,
2643,1747,1,2535,1785,
1,2645,1791,1,2646,
1796,1,2648,1875,1,
2649,1802,1,2650,1807,
1,2651,1812,1,2652,
1817,1,2653,1822,1,
2654,1827,1,2655,1832,
1,2657,3927,16,0,
546,1,2550,1843,1,
2579,1861,1,2558,1849,
1,2566,1855,1,2459,
1004,1,2464,1021,1,
2574,1837,1,2470,3928,
16,0,546,1,2700,
3929,16,0,546,1,
2594,1868,1,2596,3930,
16,0,546,1,88,
3931,19,404,1,88,
3932,5,30,1,2644,
1753,1,2520,1758,1,
2639,1765,1,2640,1770,
1,2641,1775,1,2642,
1780,1,2643,1747,1,
2535,1785,1,2645,1791,
1,2646,1796,1,2648,
1875,1,2649,1802,1,
2650,1807,1,2651,1812,
1,2652,1817,1,2653,
1822,1,2654,1827,1,
2655,1832,1,2657,3933,
16,0,402,1,2550,
1843,1,2579,1861,1,
2558,1849,1,2566,1855,
1,2459,1004,1,2464,
1021,1,2574,1837,1,
2470,3934,16,0,402,
1,2700,3935,16,0,
402,1,2594,1868,1,
2596,3936,16,0,402,
1,89,3937,19,398,
1,89,3938,5,30,
1,2644,1753,1,2520,
1758,1,2639,1765,1,
2640,1770,1,2641,1775,
1,2642,1780,1,2643,
1747,1,2535,1785,1,
2645,1791,1,2646,1796,
1,2648,1875,1,2649,
1802,1,2650,1807,1,
2651,1812,1,2652,1817,
1,2653,1822,1,2654,
1827,1,2655,1832,1,
2657,3939,16,0,396,
1,2550,1843,1,2579,
1861,1,2558,1849,1,
2566,1855,1,2459,1004,
1,2464,1021,1,2574,
1837,1,2470,3940,16,
0,396,1,2700,3941,
16,0,396,1,2594,
1868,1,2596,3942,16,
0,396,1,90,3943,
19,401,1,90,3944,
5,30,1,2644,1753,
1,2520,1758,1,2639,
1765,1,2640,1770,1,
2641,1775,1,2642,1780,
1,2643,1747,1,2535,
1785,1,2645,1791,1,
2646,1796,1,2648,1875,
1,2649,1802,1,2650,
1807,1,2651,1812,1,
2652,1817,1,2653,1822,
1,2654,1827,1,2655,
1832,1,2657,3945,16,
0,399,1,2550,1843,
1,2579,1861,1,2558,
1849,1,2566,1855,1,
2459,1004,1,2464,1021,
1,2574,1837,1,2470,
3946,16,0,399,1,
2700,3947,16,0,399,
1,2594,1868,1,2596,
3948,16,0,399,1,
91,3949,19,446,1,
91,3950,5,30,1,
2644,1753,1,2520,1758,
1,2639,1765,1,2640,
1770,1,2641,1775,1,
2642,1780,1,2643,1747,
1,2535,1785,1,2645,
1791,1,2646,1796,1,
2648,1875,1,2649,1802,
1,2650,1807,1,2651,
1812,1,2652,1817,1,
2653,1822,1,2654,1827,
1,2655,1832,1,2657,
3951,16,0,444,1,
2550,1843,1,2579,1861,
1,2558,1849,1,2566,
1855,1,2459,1004,1,
2464,1021,1,2574,1837,
1,2470,3952,16,0,
444,1,2700,3953,16,
0,444,1,2594,1868,
1,2596,3954,16,0,
444,1,92,3955,19,
133,1,92,3956,5,
129,1,0,3957,16,
0,314,1,1,2236,
1,2,2242,1,3,
2247,1,4,2252,1,
5,2257,1,6,2262,
1,7,2267,1,8,
3958,16,0,131,1,
1515,3959,16,0,184,
1,2021,840,1,2022,
3960,16,0,575,1,
256,3961,16,0,192,
1,2526,3962,16,0,
300,1,2025,3963,16,
0,579,1,18,3964,
16,0,138,1,2027,
3965,16,0,583,1,
2029,847,1,2030,853,
1,2031,858,1,2032,
863,1,2033,868,1,
277,3966,16,0,192,
1,2035,874,1,2037,
879,1,2541,3967,16,
0,512,1,32,3968,
16,0,184,1,2041,
890,1,2293,3969,16,
0,192,1,2043,896,
1,2045,901,1,41,
3970,16,0,192,1,
1297,3971,16,0,184,
1,43,3972,16,0,
192,1,46,3973,16,
0,197,1,1804,3974,
16,0,184,1,299,
3975,16,0,192,1,
52,3976,16,0,184,
1,2818,3516,1,2819,
3977,16,0,314,1,
2318,3978,16,0,184,
1,62,3979,16,0,
221,1,65,3980,16,
0,223,1,2075,3981,
16,0,184,1,1574,
921,1,71,3982,16,
0,192,1,1775,3983,
16,0,184,1,2837,
3530,1,2838,3536,1,
2337,3984,16,0,184,
1,79,3985,16,0,
192,1,1335,3986,16,
0,184,1,2511,3987,
16,0,477,1,322,
3988,16,0,192,1,
76,3989,16,0,192,
1,85,3990,16,0,
192,1,1261,3991,16,
0,184,1,89,3992,
16,0,192,1,509,
3993,16,0,192,1,
346,3994,16,0,192,
1,2039,884,1,97,
3995,16,0,192,1,
2106,3996,16,0,184,
1,102,3997,16,0,
192,1,1860,943,1,
1803,909,1,2364,949,
1,2779,3510,1,2782,
3998,16,0,192,1,
112,3999,16,0,192,
1,1117,4000,16,0,
184,1,1873,958,1,
1876,4001,16,0,184,
1,372,4002,16,0,
613,1,374,4003,16,
0,615,1,124,4004,
16,0,192,1,376,
4005,16,0,617,1,
378,4006,16,0,619,
1,2136,965,1,381,
4007,16,0,192,1,
525,4008,16,0,192,
1,2807,3551,1,1834,
4009,16,0,184,1,
137,4010,16,0,192,
1,1901,4011,16,0,
184,1,1113,4012,16,
0,176,1,1153,4013,
16,0,184,1,151,
4014,16,0,192,1,
1407,4015,16,0,184,
1,1659,4016,16,0,
184,1,2413,4017,16,
0,184,1,406,4018,
16,0,192,1,1371,
4019,16,0,184,1,
2105,936,1,166,4020,
16,0,192,1,2839,
3541,1,2840,3546,1,
1931,983,1,1933,4021,
16,0,184,1,431,
4022,16,0,192,1,
1585,4023,16,0,192,
1,182,4024,16,0,
192,1,1189,4025,16,
0,184,1,1443,4026,
16,0,184,1,1695,
4027,16,0,184,1,
2198,4028,16,0,184,
1,447,4029,16,0,
192,1,2458,998,1,
2459,1004,1,1958,4030,
16,0,184,1,2462,
1011,1,1657,1016,1,
2464,1021,1,2466,3525,
1,459,4031,16,0,
192,1,2468,4032,16,
0,376,1,462,4033,
16,0,192,1,199,
4034,16,0,192,1,
217,4035,16,0,192,
1,2227,1030,1,1622,
4036,16,0,192,1,
1225,4037,16,0,184,
1,1479,4038,16,0,
184,1,1731,4039,16,
0,192,1,1989,1038,
1,1990,4040,16,0,
184,1,236,4041,16,
0,192,1,2507,4042,
16,0,471,1,1756,
4043,16,0,184,1,
93,4044,19,731,1,
93,4045,5,95,1,
256,4046,16,0,729,
1,1261,4047,16,0,
729,1,509,4048,16,
0,729,1,1515,4049,
16,0,729,1,2021,
840,1,1775,4050,16,
0,729,1,2029,847,
1,2030,853,1,2031,
858,1,2032,863,1,
2033,868,1,277,4051,
16,0,729,1,2035,
874,1,2037,879,1,
2039,884,1,32,4052,
16,0,729,1,2041,
890,1,2293,4053,16,
0,729,1,2043,896,
1,2045,901,1,41,
4054,16,0,729,1,
1297,4055,16,0,729,
1,43,4056,16,0,
729,1,1803,909,1,
1804,4057,16,0,729,
1,299,4058,16,0,
729,1,52,4059,16,
0,729,1,2318,4060,
16,0,729,1,62,
4061,16,0,729,1,
2075,4062,16,0,729,
1,1574,921,1,71,
4063,16,0,729,1,
76,4064,16,0,729,
1,1834,4065,16,0,
729,1,2337,4066,16,
0,729,1,79,4067,
16,0,729,1,1335,
4068,16,0,729,1,
322,4069,16,0,729,
1,85,4070,16,0,
729,1,89,4071,16,
0,729,1,346,4072,
16,0,729,1,2105,
936,1,2106,4073,16,
0,729,1,97,4074,
16,0,729,1,1860,
943,1,2364,949,1,
102,4075,16,0,729,
1,2782,4076,16,0,
729,1,112,4077,16,
0,729,1,1117,4078,
16,0,729,1,1873,
958,1,1876,4079,16,
0,729,1,124,4080,
16,0,729,1,2136,
965,1,381,4081,16,
0,729,1,525,4082,
16,0,729,1,137,
4083,16,0,729,1,
1901,4084,16,0,729,
1,1153,4085,16,0,
729,1,151,4086,16,
0,729,1,1407,4087,
16,0,729,1,1659,
4088,16,0,729,1,
2413,4089,16,0,729,
1,406,4090,16,0,
729,1,1371,4091,16,
0,729,1,166,4092,
16,0,729,1,1622,
4093,16,0,729,1,
1931,983,1,1933,4094,
16,0,729,1,431,
4095,16,0,729,1,
1585,4096,16,0,729,
1,182,4097,16,0,
729,1,1189,4098,16,
0,729,1,1443,4099,
16,0,729,1,1695,
4100,16,0,729,1,
2198,4101,16,0,729,
1,447,4102,16,0,
729,1,2458,998,1,
2459,1004,1,1958,4103,
16,0,729,1,2462,
1011,1,1657,1016,1,
2464,1021,1,199,4104,
16,0,729,1,459,
4105,16,0,729,1,
462,4106,16,0,729,
1,217,4107,16,0,
729,1,2227,1030,1,
1225,4108,16,0,729,
1,1479,4109,16,0,
729,1,1731,4110,16,
0,729,1,1989,1038,
1,1990,4111,16,0,
729,1,236,4112,16,
0,729,1,1756,4113,
16,0,729,1,94,
4114,19,728,1,94,
4115,5,95,1,256,
4116,16,0,726,1,
1261,4117,16,0,726,
1,509,4118,16,0,
726,1,1515,4119,16,
0,726,1,2021,840,
1,1775,4120,16,0,
726,1,2029,847,1,
2030,853,1,2031,858,
1,2032,863,1,2033,
868,1,277,4121,16,
0,726,1,2035,874,
1,2037,879,1,2039,
884,1,32,4122,16,
0,726,1,2041,890,
1,2293,4123,16,0,
726,1,2043,896,1,
2045,901,1,41,4124,
16,0,726,1,1297,
4125,16,0,726,1,
43,4126,16,0,726,
1,1803,909,1,1804,
4127,16,0,726,1,
299,4128,16,0,726,
1,52,4129,16,0,
726,1,2318,4130,16,
0,726,1,62,4131,
16,0,726,1,2075,
4132,16,0,726,1,
1574,921,1,71,4133,
16,0,726,1,76,
4134,16,0,726,1,
1834,4135,16,0,726,
1,2337,4136,16,0,
726,1,79,4137,16,
0,726,1,1335,4138,
16,0,726,1,322,
4139,16,0,726,1,
85,4140,16,0,726,
1,89,4141,16,0,
726,1,346,4142,16,
0,726,1,2105,936,
1,2106,4143,16,0,
726,1,97,4144,16,
0,726,1,1860,943,
1,2364,949,1,102,
4145,16,0,726,1,
2782,4146,16,0,726,
1,112,4147,16,0,
726,1,1117,4148,16,
0,726,1,1873,958,
1,1876,4149,16,0,
726,1,124,4150,16,
0,726,1,2136,965,
1,381,4151,16,0,
726,1,525,4152,16,
0,726,1,137,4153,
16,0,726,1,1901,
4154,16,0,726,1,
1153,4155,16,0,726,
1,151,4156,16,0,
726,1,1407,4157,16,
0,726,1,1659,4158,
16,0,726,1,2413,
4159,16,0,726,1,
406,4160,16,0,726,
1,1371,4161,16,0,
726,1,166,4162,16,
0,726,1,1622,4163,
16,0,726,1,1931,
983,1,1933,4164,16,
0,726,1,431,4165,
16,0,726,1,1585,
4166,16,0,726,1,
182,4167,16,0,726,
1,1189,4168,16,0,
726,1,1443,4169,16,
0,726,1,1695,4170,
16,0,726,1,2198,
4171,16,0,726,1,
447,4172,16,0,726,
1,2458,998,1,2459,
1004,1,1958,4173,16,
0,726,1,2462,1011,
1,1657,1016,1,2464,
1021,1,199,4174,16,
0,726,1,459,4175,
16,0,726,1,462,
4176,16,0,726,1,
217,4177,16,0,726,
1,2227,1030,1,1225,
4178,16,0,726,1,
1479,4179,16,0,726,
1,1731,4180,16,0,
726,1,1989,1038,1,
1990,4181,16,0,726,
1,236,4182,16,0,
726,1,1756,4183,16,
0,726,1,95,4184,
19,725,1,95,4185,
5,95,1,256,4186,
16,0,723,1,1261,
4187,16,0,723,1,
509,4188,16,0,723,
1,1515,4189,16,0,
723,1,2021,840,1,
1775,4190,16,0,723,
1,2029,847,1,2030,
853,1,2031,858,1,
2032,863,1,2033,868,
1,277,4191,16,0,
723,1,2035,874,1,
2037,879,1,2039,884,
1,32,4192,16,0,
723,1,2041,890,1,
2293,4193,16,0,723,
1,2043,896,1,2045,
901,1,41,4194,16,
0,723,1,1297,4195,
16,0,723,1,43,
4196,16,0,723,1,
1803,909,1,1804,4197,
16,0,723,1,299,
4198,16,0,723,1,
52,4199,16,0,723,
1,2318,4200,16,0,
723,1,62,4201,16,
0,723,1,2075,4202,
16,0,723,1,1574,
921,1,71,4203,16,
0,723,1,76,4204,
16,0,723,1,1834,
4205,16,0,723,1,
2337,4206,16,0,723,
1,79,4207,16,0,
723,1,1335,4208,16,
0,723,1,322,4209,
16,0,723,1,85,
4210,16,0,723,1,
89,4211,16,0,723,
1,346,4212,16,0,
723,1,2105,936,1,
2106,4213,16,0,723,
1,97,4214,16,0,
723,1,1860,943,1,
2364,949,1,102,4215,
16,0,723,1,2782,
4216,16,0,723,1,
112,4217,16,0,723,
1,1117,4218,16,0,
723,1,1873,958,1,
1876,4219,16,0,723,
1,124,4220,16,0,
723,1,2136,965,1,
381,4221,16,0,723,
1,525,4222,16,0,
723,1,137,4223,16,
0,723,1,1901,4224,
16,0,723,1,1153,
4225,16,0,723,1,
151,4226,16,0,723,
1,1407,4227,16,0,
723,1,1659,4228,16,
0,723,1,2413,4229,
16,0,723,1,406,
4230,16,0,723,1,
1371,4231,16,0,723,
1,166,4232,16,0,
723,1,1622,4233,16,
0,723,1,1931,983,
1,1933,4234,16,0,
723,1,431,4235,16,
0,723,1,1585,4236,
16,0,723,1,182,
4237,16,0,723,1,
1189,4238,16,0,723,
1,1443,4239,16,0,
723,1,1695,4240,16,
0,723,1,2198,4241,
16,0,723,1,447,
4242,16,0,723,1,
2458,998,1,2459,1004,
1,1958,4243,16,0,
723,1,2462,1011,1,
1657,1016,1,2464,1021,
1,199,4244,16,0,
723,1,459,4245,16,
0,723,1,462,4246,
16,0,723,1,217,
4247,16,0,723,1,
2227,1030,1,1225,4248,
16,0,723,1,1479,
4249,16,0,723,1,
1731,4250,16,0,723,
1,1989,1038,1,1990,
4251,16,0,723,1,
236,4252,16,0,723,
1,1756,4253,16,0,
723,1,96,4254,19,
103,1,96,4255,5,
1,1,0,4256,16,
0,104,1,97,4257,
19,172,1,97,4258,
5,1,1,0,4259,
16,0,170,1,98,
4260,19,213,1,98,
4261,5,2,1,0,
4262,16,0,211,1,
2819,4263,16,0,366,
1,99,4264,19,210,
1,99,4265,5,2,
1,0,4266,16,0,
208,1,2819,4267,16,
0,365,1,100,4268,
19,292,1,100,4269,
5,2,1,0,4270,
16,0,775,1,2819,
4271,16,0,290,1,
101,4272,19,781,1,
101,4273,5,4,1,
0,4274,16,0,782,
1,2830,4275,16,0,
779,1,2819,4276,16,
0,782,1,2760,4277,
16,0,779,1,102,
4278,19,698,1,102,
4279,5,2,1,2470,
4280,16,0,696,1,
2657,4281,16,0,719,
1,103,4282,19,157,
1,103,4283,5,4,
1,2596,4284,16,0,
155,1,2470,4285,16,
0,674,1,2700,4286,
16,0,155,1,2657,
4287,16,0,674,1,
104,4288,19,154,1,
104,4289,5,4,1,
2596,4290,16,0,152,
1,2470,4291,16,0,
177,1,2700,4292,16,
0,152,1,2657,4293,
16,0,177,1,105,
4294,19,657,1,105,
4295,5,4,1,2596,
4296,16,0,655,1,
2470,4297,16,0,672,
1,2700,4298,16,0,
655,1,2657,4299,16,
0,672,1,106,4300,
19,175,1,106,4301,
5,4,1,2596,4302,
16,0,654,1,2470,
4303,16,0,173,1,
2700,4304,16,0,654,
1,2657,4305,16,0,
173,1,107,4306,19,
670,1,107,4307,5,
4,1,2596,4308,16,
0,742,1,2470,4309,
16,0,668,1,2700,
4310,16,0,742,1,
2657,4311,16,0,668,
1,108,4312,19,169,
1,108,4313,5,4,
1,2596,4314,16,0,
650,1,2470,4315,16,
0,167,1,2700,4316,
16,0,650,1,2657,
4317,16,0,167,1,
109,4318,19,741,1,
109,4319,5,4,1,
2596,4320,16,0,739,
1,2470,4321,16,0,
751,1,2700,4322,16,
0,739,1,2657,4323,
16,0,751,1,110,
4324,19,648,1,110,
4325,5,4,1,2596,
4326,16,0,646,1,
2470,4327,16,0,663,
1,2700,4328,16,0,
646,1,2657,4329,16,
0,663,1,111,4330,
19,141,1,111,4331,
5,3,1,2766,4332,
16,0,791,1,2581,
4333,16,0,355,1,
10,4334,16,0,139,
1,112,4335,19,557,
1,112,4336,5,1,
1,2568,4337,16,0,
555,1,113,4338,19,
745,1,113,4339,5,
1,1,2560,4340,16,
0,743,1,114,4341,
19,529,1,114,4342,
5,1,1,2552,4343,
16,0,527,1,115,
4344,19,251,1,115,
4345,5,1,1,2537,
4346,16,0,249,1,
116,4347,19,502,1,
116,4348,5,1,1,
2522,4349,16,0,500,
1,117,4350,19,486,
1,117,4351,5,1,
1,2506,4352,16,0,
484,1,118,4353,19,
160,1,118,4354,5,
17,1,0,4355,16,
0,794,1,2581,4356,
16,0,372,1,2075,
4357,16,0,753,1,
2337,4358,16,0,753,
1,2819,4359,16,0,
794,1,2413,4360,16,
0,753,1,10,4361,
16,0,372,1,1901,
4362,16,0,753,1,
2198,4363,16,0,753,
1,21,4364,16,0,
158,1,2106,4365,16,
0,753,1,2766,4366,
16,0,372,1,1804,
4367,16,0,753,1,
1990,4368,16,0,753,
1,32,4369,16,0,
753,1,1958,4370,16,
0,753,1,1775,4371,
16,0,753,1,119,
4372,19,474,1,119,
4373,5,2,1,2568,
4374,16,0,671,1,
2506,4375,16,0,472,
1,120,4376,19,480,
1,120,4377,5,5,
1,2510,4378,16,0,
478,1,2522,4379,16,
0,491,1,2514,4380,
16,0,483,1,2537,
4381,16,0,509,1,
2560,4382,16,0,537,
1,121,4383,19,309,
1,121,4384,5,3,
1,2552,4385,16,0,
737,1,2525,4386,16,
0,307,1,2529,4387,
16,0,499,1,122,
4388,19,636,1,122,
4389,5,2,1,2544,
4390,16,0,637,1,
2540,4391,16,0,634,
1,123,4392,19,130,
1,123,4393,5,18,
1,0,4394,16,0,
128,1,2581,4395,16,
0,137,1,2075,4396,
16,0,137,1,2337,
4397,16,0,137,1,
2819,4398,16,0,128,
1,2413,4399,16,0,
137,1,10,4400,16,
0,137,1,2198,4401,
16,0,137,1,1901,
4402,16,0,137,1,
52,4403,16,0,219,
1,21,4404,16,0,
137,1,2106,4405,16,
0,137,1,2766,4406,
16,0,137,1,1804,
4407,16,0,137,1,
1990,4408,16,0,137,
1,32,4409,16,0,
137,1,1958,4410,16,
0,137,1,1775,4411,
16,0,137,1,124,
4412,19,765,1,124,
4413,5,4,1,2596,
4414,16,0,763,1,
2470,4415,16,0,763,
1,2700,4416,16,0,
763,1,2657,4417,16,
0,763,1,125,4418,
19,567,1,125,4419,
5,4,1,2596,4420,
16,0,565,1,2470,
4421,16,0,565,1,
2700,4422,16,0,565,
1,2657,4423,16,0,
565,1,126,4424,19,
666,1,126,4425,5,
4,1,2596,4426,16,
0,664,1,2470,4427,
16,0,664,1,2700,
4428,16,0,664,1,
2657,4429,16,0,664,
1,127,4430,19,535,
1,127,4431,5,4,
1,2596,4432,16,0,
533,1,2470,4433,16,
0,533,1,2700,4434,
16,0,533,1,2657,
4435,16,0,533,1,
128,4436,19,524,1,
128,4437,5,4,1,
2596,4438,16,0,522,
1,2470,4439,16,0,
522,1,2700,4440,16,
0,522,1,2657,4441,
16,0,522,1,129,
4442,19,632,1,129,
4443,5,4,1,2596,
4444,16,0,630,1,
2470,4445,16,0,630,
1,2700,4446,16,0,
630,1,2657,4447,16,
0,630,1,130,4448,
19,778,1,130,4449,
5,4,1,2596,4450,
16,0,776,1,2470,
4451,16,0,776,1,
2700,4452,16,0,776,
1,2657,4453,16,0,
776,1,131,4454,19,
768,1,131,4455,5,
4,1,2596,4456,16,
0,766,1,2470,4457,
16,0,766,1,2700,
4458,16,0,766,1,
2657,4459,16,0,766,
1,132,4460,19,328,
1,132,4461,5,21,
1,2518,4462,16,0,
699,1,2075,4463,16,
0,584,1,2548,4464,
16,0,736,1,2337,
4465,16,0,584,1,
2413,4466,16,0,584,
1,2564,4467,16,0,
542,1,2556,4468,16,
0,532,1,2592,4469,
16,0,695,1,1901,
4470,16,0,584,1,
2198,4471,16,0,584,
1,2533,4472,16,0,
504,1,2777,4473,16,
0,326,1,2572,4474,
16,0,675,1,2106,
4475,16,0,584,1,
2577,4476,16,0,681,
1,1804,4477,16,0,
584,1,1990,4478,16,
0,584,1,31,4479,
16,0,371,1,32,
4480,16,0,584,1,
1958,4481,16,0,584,
1,1775,4482,16,0,
584,1,133,4483,19,
337,1,133,4484,5,
1,1,32,4485,16,
0,335,1,134,4486,
19,286,1,134,4487,
5,11,1,2075,4488,
16,0,682,1,2337,
4489,16,0,293,1,
2413,4490,16,0,505,
1,1901,4491,16,0,
427,1,2198,4492,16,
0,354,1,2106,4493,
16,0,715,1,1804,
4494,16,0,317,1,
1990,4495,16,0,572,
1,32,4496,16,0,
367,1,1958,4497,16,
0,515,1,1775,4498,
16,0,284,1,135,
4499,19,688,1,135,
4500,5,11,1,2075,
4501,16,0,686,1,
2337,4502,16,0,686,
1,2413,4503,16,0,
686,1,1901,4504,16,
0,686,1,2198,4505,
16,0,686,1,2106,
4506,16,0,686,1,
1804,4507,16,0,686,
1,1990,4508,16,0,
686,1,32,4509,16,
0,686,1,1958,4510,
16,0,686,1,1775,
4511,16,0,686,1,
136,4512,19,748,1,
136,4513,5,11,1,
2075,4514,16,0,746,
1,2337,4515,16,0,
746,1,2413,4516,16,
0,746,1,1901,4517,
16,0,746,1,2198,
4518,16,0,746,1,
2106,4519,16,0,746,
1,1804,4520,16,0,
746,1,1990,4521,16,
0,746,1,32,4522,
16,0,746,1,1958,
4523,16,0,746,1,
1775,4524,16,0,746,
1,137,4525,19,180,
1,137,4526,5,31,
1,1901,4527,16,0,
752,1,1479,4528,16,
0,638,1,2075,4529,
16,0,752,1,1695,
4530,16,0,217,1,
1756,4531,16,0,207,
1,2413,4532,16,0,
752,1,2198,4533,16,
0,752,1,1876,4534,
16,0,771,1,1659,
4535,16,0,207,1,
1443,4536,16,0,600,
1,1117,4537,16,0,
178,1,1990,4538,16,
0,752,1,1189,4539,
16,0,267,1,1775,
4540,16,0,752,1,
32,4541,16,0,752,
1,2106,4542,16,0,
752,1,1515,4543,16,
0,684,1,2337,4544,
16,0,752,1,52,
4545,16,0,700,1,
1804,4546,16,0,752,
1,1261,4547,16,0,
331,1,1153,4548,16,
0,274,1,1225,4549,
16,0,303,1,1335,
4550,16,0,497,1,
1933,4551,16,0,640,
1,1834,4552,16,0,
347,1,1297,4553,16,
0,359,1,1407,4554,
16,0,667,1,2318,
4555,16,0,207,1,
1958,4556,16,0,752,
1,1371,4557,16,0,
488,1,138,4558,19,
609,1,138,4559,5,
11,1,2075,4560,16,
0,607,1,2337,4561,
16,0,607,1,2413,
4562,16,0,607,1,
1901,4563,16,0,607,
1,2198,4564,16,0,
607,1,2106,4565,16,
0,607,1,1804,4566,
16,0,607,1,1990,
4567,16,0,607,1,
32,4568,16,0,607,
1,1958,4569,16,0,
607,1,1775,4570,16,
0,607,1,139,4571,
19,605,1,139,4572,
5,11,1,2075,4573,
16,0,603,1,2337,
4574,16,0,603,1,
2413,4575,16,0,603,
1,1901,4576,16,0,
603,1,2198,4577,16,
0,603,1,2106,4578,
16,0,603,1,1804,
4579,16,0,603,1,
1990,4580,16,0,603,
1,32,4581,16,0,
603,1,1958,4582,16,
0,603,1,1775,4583,
16,0,603,1,140,
4584,19,679,1,140,
4585,5,11,1,2075,
4586,16,0,677,1,
2337,4587,16,0,677,
1,2413,4588,16,0,
677,1,1901,4589,16,
0,677,1,2198,4590,
16,0,677,1,2106,
4591,16,0,677,1,
1804,4592,16,0,677,
1,1990,4593,16,0,
677,1,32,4594,16,
0,677,1,1958,4595,
16,0,677,1,1775,
4596,16,0,677,1,
141,4597,19,599,1,
141,4598,5,11,1,
2075,4599,16,0,597,
1,2337,4600,16,0,
597,1,2413,4601,16,
0,597,1,1901,4602,
16,0,597,1,2198,
4603,16,0,597,1,
2106,4604,16,0,597,
1,1804,4605,16,0,
597,1,1990,4606,16,
0,597,1,32,4607,
16,0,597,1,1958,
4608,16,0,597,1,
1775,4609,16,0,597,
1,142,4610,19,596,
1,142,4611,5,11,
1,2075,4612,16,0,
594,1,2337,4613,16,
0,594,1,2413,4614,
16,0,594,1,1901,
4615,16,0,594,1,
2198,4616,16,0,594,
1,2106,4617,16,0,
594,1,1804,4618,16,
0,594,1,1990,4619,
16,0,594,1,32,
4620,16,0,594,1,
1958,4621,16,0,594,
1,1775,4622,16,0,
594,1,143,4623,19,
593,1,143,4624,5,
11,1,2075,4625,16,
0,591,1,2337,4626,
16,0,591,1,2413,
4627,16,0,591,1,
1901,4628,16,0,591,
1,2198,4629,16,0,
591,1,2106,4630,16,
0,591,1,1804,4631,
16,0,591,1,1990,
4632,16,0,591,1,
32,4633,16,0,591,
1,1958,4634,16,0,
591,1,1775,4635,16,
0,591,1,144,4636,
19,590,1,144,4637,
5,11,1,2075,4638,
16,0,588,1,2337,
4639,16,0,588,1,
2413,4640,16,0,588,
1,1901,4641,16,0,
588,1,2198,4642,16,
0,588,1,2106,4643,
16,0,588,1,1804,
4644,16,0,588,1,
1990,4645,16,0,588,
1,32,4646,16,0,
588,1,1958,4647,16,
0,588,1,1775,4648,
16,0,588,1,145,
4649,19,587,1,145,
4650,5,11,1,2075,
4651,16,0,585,1,
2337,4652,16,0,585,
1,2413,4653,16,0,
585,1,1901,4654,16,
0,585,1,2198,4655,
16,0,585,1,2106,
4656,16,0,585,1,
1804,4657,16,0,585,
1,1990,4658,16,0,
585,1,32,4659,16,
0,585,1,1958,4660,
16,0,585,1,1775,
4661,16,0,585,1,
146,4662,19,150,1,
146,4663,5,3,1,
1756,4664,16,0,316,
1,2318,4665,16,0,
330,1,1659,4666,16,
0,148,1,147,4667,
19,626,1,147,4668,
5,68,1,1901,4669,
16,0,624,1,1479,
4670,16,0,624,1,
112,4671,16,0,624,
1,2293,4672,16,0,
624,1,1804,4673,16,
0,624,1,431,4674,
16,0,624,1,1443,
4675,16,0,624,1,
1756,4676,16,0,624,
1,124,4677,16,0,
624,1,525,4678,16,
0,624,1,236,4679,
16,0,624,1,346,
4680,16,0,624,1,
1876,4681,16,0,624,
1,1659,4682,16,0,
624,1,1225,4683,16,
0,624,1,1117,4684,
16,0,624,1,137,
4685,16,0,624,1,
2318,4686,16,0,624,
1,1775,4687,16,0,
624,1,32,4688,16,
0,624,1,1407,4689,
16,0,624,1,2782,
4690,16,0,624,1,
256,4691,16,0,624,
1,459,4692,16,0,
624,1,406,4693,16,
0,624,1,41,4694,
16,0,624,1,151,
4695,16,0,624,1,
43,4696,16,0,624,
1,1585,4697,16,0,
624,1,1990,4698,16,
0,624,1,2337,4699,
16,0,624,1,509,
4700,16,0,624,1,
52,4701,16,0,624,
1,381,4702,16,0,
624,1,447,4703,16,
0,624,1,166,4704,
16,0,624,1,462,
4705,16,0,624,1,
277,4706,16,0,624,
1,1695,4707,16,0,
624,1,62,4708,16,
0,692,1,1153,4709,
16,0,624,1,2106,
4710,16,0,624,1,
1335,4711,16,0,624,
1,71,4712,16,0,
624,1,182,4713,16,
0,624,1,76,4714,
16,0,624,1,79,
4715,16,0,624,1,
1933,4716,16,0,624,
1,299,4717,16,0,
624,1,85,4718,16,
0,624,1,1515,4719,
16,0,624,1,2198,
4720,16,0,624,1,
89,4721,16,0,624,
1,1834,4722,16,0,
624,1,1622,4723,16,
0,624,1,2413,4724,
16,0,624,1,2075,
4725,16,0,624,1,
1731,4726,16,0,624,
1,97,4727,16,0,
624,1,1297,4728,16,
0,624,1,1189,4729,
16,0,624,1,102,
4730,16,0,624,1,
1261,4731,16,0,624,
1,322,4732,16,0,
624,1,1958,4733,16,
0,624,1,199,4734,
16,0,624,1,1371,
4735,16,0,624,1,
217,4736,16,0,624,
1,148,4737,19,710,
1,148,4738,5,2,
1,459,4739,16,0,
708,1,41,4740,16,
0,783,1,149,4741,
19,714,1,149,4742,
5,3,1,462,4743,
16,0,712,1,459,
4744,16,0,735,1,
41,4745,16,0,735,
1,150,4746,19,4747,
4,36,69,0,120,
0,112,0,114,0,
101,0,115,0,115,
0,105,0,111,0,
110,0,65,0,114,
0,103,0,117,0,
109,0,101,0,110,
0,116,0,1,150,
4742,1,151,4748,19,
622,1,151,4749,5,
68,1,1901,4750,16,
0,620,1,1479,4751,
16,0,620,1,112,
4752,16,0,620,1,
2293,4753,16,0,620,
1,1804,4754,16,0,
620,1,431,4755,16,
0,620,1,1443,4756,
16,0,620,1,1756,
4757,16,0,620,1,
124,4758,16,0,620,
1,525,4759,16,0,
620,1,236,4760,16,
0,620,1,346,4761,
16,0,620,1,1876,
4762,16,0,620,1,
1659,4763,16,0,620,
1,1225,4764,16,0,
620,1,1117,4765,16,
0,620,1,137,4766,
16,0,620,1,2318,
4767,16,0,620,1,
1775,4768,16,0,620,
1,32,4769,16,0,
620,1,1407,4770,16,
0,620,1,2782,4771,
16,0,620,1,256,
4772,16,0,620,1,
459,4773,16,0,620,
1,406,4774,16,0,
620,1,41,4775,16,
0,620,1,151,4776,
16,0,620,1,43,
4777,16,0,620,1,
1585,4778,16,0,620,
1,1990,4779,16,0,
620,1,2337,4780,16,
0,620,1,509,4781,
16,0,620,1,52,
4782,16,0,620,1,
381,4783,16,0,620,
1,447,4784,16,0,
620,1,166,4785,16,
0,620,1,462,4786,
16,0,620,1,277,
4787,16,0,620,1,
1695,4788,16,0,620,
1,62,4789,16,0,
693,1,1153,4790,16,
0,620,1,2106,4791,
16,0,620,1,1335,
4792,16,0,620,1,
71,4793,16,0,620,
1,182,4794,16,0,
620,1,76,4795,16,
0,620,1,79,4796,
16,0,620,1,1933,
4797,16,0,620,1,
299,4798,16,0,620,
1,85,4799,16,0,
620,1,1515,4800,16,
0,620,1,2198,4801,
16,0,620,1,89,
4802,16,0,620,1,
1834,4803,16,0,620,
1,1622,4804,16,0,
620,1,2413,4805,16,
0,620,1,2075,4806,
16,0,620,1,1731,
4807,16,0,620,1,
97,4808,16,0,620,
1,1297,4809,16,0,
620,1,1189,4810,16,
0,620,1,102,4811,
16,0,620,1,1261,
4812,16,0,620,1,
322,4813,16,0,620,
1,1958,4814,16,0,
620,1,199,4815,16,
0,620,1,1371,4816,
16,0,620,1,217,
4817,16,0,620,1,
152,4818,19,4819,4,
28,86,0,101,0,
99,0,116,0,111,
0,114,0,67,0,
111,0,110,0,115,
0,116,0,97,0,
110,0,116,0,1,
152,4749,1,153,4820,
19,4821,4,32,82,
0,111,0,116,0,
97,0,116,0,105,
0,111,0,110,0,
67,0,111,0,110,
0,115,0,116,0,
97,0,110,0,116,
0,1,153,4749,1,
154,4822,19,4823,4,
24,76,0,105,0,
115,0,116,0,67,
0,111,0,110,0,
115,0,116,0,97,
0,110,0,116,0,
1,154,4749,1,155,
4824,19,188,1,155,
4825,5,67,1,1901,
4826,16,0,690,1,
1479,4827,16,0,611,
1,112,4828,16,0,
276,1,2293,4829,16,
0,302,1,1804,4830,
16,0,690,1,431,
4831,16,0,685,1,
1443,4832,16,0,538,
1,1756,4833,16,0,
793,1,124,4834,16,
0,283,1,525,4835,
16,0,340,1,236,
4836,16,0,377,1,
346,4837,16,0,574,
1,1876,4838,16,0,
353,1,1659,4839,16,
0,793,1,1225,4840,
16,0,275,1,1117,
4841,16,0,245,1,
137,4842,16,0,301,
1,2318,4843,16,0,
793,1,1775,4844,16,
0,690,1,32,4845,
16,0,690,1,1407,
4846,16,0,561,1,
2782,4847,16,0,256,
1,256,4848,16,0,
431,1,459,4849,16,
0,186,1,406,4850,
16,0,649,1,41,
4851,16,0,186,1,
151,4852,16,0,315,
1,43,4853,16,0,
738,1,1990,4854,16,
0,690,1,2337,4855,
16,0,690,1,509,
4856,16,0,762,1,
52,4857,16,0,702,
1,381,4858,16,0,
629,1,447,4859,16,
0,340,1,166,4860,
16,0,329,1,462,
4861,16,0,186,1,
277,4862,16,0,476,
1,1695,4863,16,0,
298,1,1261,4864,16,
0,313,1,1153,4865,
16,0,193,1,2106,
4866,16,0,690,1,
1335,4867,16,0,362,
1,71,4868,16,0,
229,1,182,4869,16,
0,340,1,76,4870,
16,0,627,1,79,
4871,16,0,244,1,
1933,4872,16,0,443,
1,299,4873,16,0,
503,1,85,4874,16,
0,526,1,1515,4875,
16,0,644,1,2198,
4876,16,0,690,1,
89,4877,16,0,257,
1,1834,4878,16,0,
325,1,1622,4879,16,
0,761,1,2413,4880,
16,0,690,1,2075,
4881,16,0,690,1,
1731,4882,16,0,277,
1,97,4883,16,0,
447,1,1297,4884,16,
0,364,1,1189,4885,
16,0,243,1,102,
4886,16,0,265,1,
1585,4887,16,0,773,
1,322,4888,16,0,
530,1,1958,4889,16,
0,690,1,199,4890,
16,0,351,1,1371,
4891,16,0,432,1,
217,4892,16,0,361,
1,156,4893,19,4894,
4,36,67,0,111,
0,110,0,115,0,
116,0,97,0,110,
0,116,0,69,0,
120,0,112,0,114,
0,101,0,115,0,
115,0,105,0,111,
0,110,0,1,156,
4825,1,157,4895,19,
4896,4,30,73,0,
100,0,101,0,110,
0,116,0,69,0,
120,0,112,0,114,
0,101,0,115,0,
115,0,105,0,111,
0,110,0,1,157,
4825,1,158,4897,19,
4898,4,36,73,0,
100,0,101,0,110,
0,116,0,68,0,
111,0,116,0,69,
0,120,0,112,0,
114,0,101,0,115,
0,115,0,105,0,
111,0,110,0,1,
158,4825,1,159,4899,
19,4900,4,44,70,
0,117,0,110,0,
99,0,116,0,105,
0,111,0,110,0,
67,0,97,0,108,
0,108,0,69,0,
120,0,112,0,114,
0,101,0,115,0,
115,0,105,0,111,
0,110,0,1,159,
4825,1,160,4901,19,
4902,4,32,66,0,
105,0,110,0,97,
0,114,0,121,0,
69,0,120,0,112,
0,114,0,101,0,
115,0,115,0,105,
0,111,0,110,0,
1,160,4825,1,161,
4903,19,4904,4,30,
85,0,110,0,97,
0,114,0,121,0,
69,0,120,0,112,
0,114,0,101,0,
115,0,115,0,105,
0,111,0,110,0,
1,161,4825,1,162,
4905,19,4906,4,36,
84,0,121,0,112,
0,101,0,99,0,
97,0,115,0,116,
0,69,0,120,0,
112,0,114,0,101,
0,115,0,115,0,
105,0,111,0,110,
0,1,162,4825,1,
163,4907,19,4908,4,
42,80,0,97,0,
114,0,101,0,110,
0,116,0,104,0,
101,0,115,0,105,
0,115,0,69,0,
120,0,112,0,114,
0,101,0,115,0,
115,0,105,0,111,
0,110,0,1,163,
4825,1,164,4909,19,
4910,4,56,73,0,
110,0,99,0,114,
0,101,0,109,0,
101,0,110,0,116,
0,68,0,101,0,
99,0,114,0,101,
0,109,0,101,0,
110,0,116,0,69,
0,120,0,112,0,
114,0,101,0,115,
0,115,0,105,0,
111,0,110,0,1,
164,4825,1,166,4911,
19,822,1,166,4255,
1,167,4912,19,832,
1,167,4255,1,168,
4913,19,3549,1,168,
4258,1,169,4914,19,
3539,1,169,4258,1,
170,4915,19,3544,1,
170,4258,1,171,4916,
19,3534,1,171,4258,
1,172,4917,19,3520,
1,172,4261,1,173,
4918,19,3554,1,173,
4261,1,174,4919,19,
3514,1,174,4265,1,
175,4920,19,3528,1,
175,4265,1,176,4921,
19,805,1,176,4269,
1,177,4922,19,816,
1,177,4269,1,178,
4923,19,811,1,178,
4273,1,179,4924,19,
827,1,179,4273,1,
180,4925,19,1835,1,
180,4279,1,181,4926,
19,1799,1,181,4279,
1,182,4927,19,1830,
1,182,4279,1,183,
4928,19,1794,1,183,
4279,1,184,4929,19,
1825,1,184,4279,1,
185,4930,19,1756,1,
185,4279,1,186,4931,
19,1820,1,186,4279,
1,187,4932,19,1751,
1,187,4279,1,188,
4933,19,1815,1,188,
4279,1,189,4934,19,
1783,1,189,4279,1,
190,4935,19,1810,1,
190,4279,1,191,4936,
19,1778,1,191,4279,
1,192,4937,19,1805,
1,192,4279,1,193,
4938,19,1773,1,193,
4279,1,194,4939,19,
1878,1,194,4279,1,
195,4940,19,1768,1,
195,4279,1,196,4941,
19,1872,1,196,4283,
1,197,4942,19,1865,
1,197,4289,1,198,
4943,19,1841,1,198,
4295,1,199,4944,19,
1859,1,199,4301,1,
200,4945,19,1853,1,
200,4307,1,201,4946,
19,1847,1,201,4313,
1,202,4947,19,1789,
1,202,4319,1,203,
4948,19,1762,1,203,
4325,1,204,4949,19,
1941,1,204,4331,1,
205,4950,19,1907,1,
205,4331,1,206,4951,
19,2302,1,206,4336,
1,207,4952,19,2294,
1,207,4339,1,208,
4953,19,2327,1,208,
4342,1,209,4954,19,
2285,1,209,4345,1,
210,4955,19,2279,1,
210,4348,1,211,4956,
19,2313,1,211,4351,
1,212,4957,19,1239,
1,212,4354,1,213,
4958,19,1960,1,213,
4373,1,214,4959,19,
1886,1,214,4377,1,
215,4960,19,1899,1,
215,4384,1,216,4961,
19,1913,1,216,4389,
1,217,4962,19,1024,
1,217,4461,1,218,
4963,19,1008,1,218,
4461,1,219,4964,19,
1014,1,219,4484,1,
220,4965,19,1002,1,
220,4484,1,221,4966,
19,1267,1,221,4500,
1,222,4967,19,904,
1,222,4487,1,223,
4968,19,1019,1,223,
4487,1,224,4969,19,
899,1,224,4487,1,
225,4970,19,924,1,
225,4487,1,226,4971,
19,893,1,226,4487,
1,227,4972,19,887,
1,227,4487,1,228,
4973,19,882,1,228,
4487,1,229,4974,19,
877,1,229,4487,1,
230,4975,19,871,1,
230,4487,1,231,4976,
19,866,1,231,4487,
1,232,4977,19,861,
1,232,4487,1,233,
4978,19,856,1,233,
4487,1,234,4979,19,
851,1,234,4487,1,
235,4980,19,1274,1,
235,4572,1,236,4981,
19,1413,1,236,4585,
1,237,4982,19,1261,
1,237,4598,1,238,
4983,19,1401,1,238,
4598,1,239,4984,19,
1041,1,239,4611,1,
240,4985,19,844,1,
240,4611,1,241,4986,
19,939,1,241,4611,
1,242,4987,19,968,
1,242,4611,1,243,
4988,19,987,1,243,
4624,1,244,4989,19,
1033,1,244,4624,1,
245,4990,19,947,1,
245,4637,1,246,4991,
19,961,1,246,4637,
1,247,4992,19,913,
1,247,4650,1,248,
4993,19,952,1,248,
4650,1,249,4994,19,
1594,1,249,4663,1,
250,4995,19,1280,1,
250,4663,1,251,4996,
19,1626,1,251,4663,
1,252,4997,19,1658,
1,252,4663,1,253,
4998,19,1524,1,253,
4513,1,254,4999,19,
1583,1,254,4513,1,
255,5000,19,1255,1,
255,4526,1,256,5001,
19,1690,1,256,4526,
1,257,5002,19,1621,
1,257,4526,1,258,
5003,19,1568,1,258,
4526,1,259,5004,19,
1492,1,259,4526,1,
260,5005,19,1423,1,
260,4526,1,261,5006,
19,1433,1,261,4526,
1,262,5007,19,1250,
1,262,4526,1,263,
5008,19,1674,1,263,
4526,1,264,5009,19,
1616,1,264,4526,1,
265,5010,19,1558,1,
265,4526,1,266,5011,
19,1481,1,266,4526,
1,267,5012,19,1443,
1,267,4526,1,268,
5013,19,1233,1,268,
4526,1,269,5014,19,
1578,1,269,4526,1,
270,5015,19,1604,1,
270,4526,1,271,5016,
19,1551,1,271,4526,
1,272,5017,19,1573,
1,272,4526,1,273,
5018,19,1389,1,273,
4526,1,274,5019,19,
1293,1,274,4526,1,
275,5020,19,1222,1,
275,4526,1,276,5021,
19,1648,1,276,4526,
1,277,5022,19,1599,
1,277,4526,1,278,
5023,19,1546,1,278,
4526,1,279,5024,19,
1418,1,279,4559,1,
280,5025,19,1396,1,
280,4559,1,281,5026,
19,1679,1,281,4749,
1,282,5027,19,1708,
1,282,4749,1,283,
5028,19,1669,1,283,
4749,1,284,5029,19,
1664,1,284,4749,1,
285,5030,19,1685,1,
285,4749,1,286,5031,
19,1632,1,286,4749,
1,287,5032,19,1343,
1,287,4749,1,288,
5033,19,1513,1,288,
4825,1,289,5034,19,
1304,1,289,4825,1,
290,5035,19,1311,1,
290,4825,1,291,5036,
19,1332,1,291,4825,
1,292,5037,19,1327,
1,292,4825,1,293,
5038,19,1322,1,293,
4825,1,294,5039,19,
1317,1,294,4825,1,
295,5040,19,1502,1,
295,4825,1,296,5041,
19,1530,1,296,4825,
1,297,5042,19,1507,
1,297,4825,1,298,
5043,19,1497,1,298,
4825,1,299,5044,19,
1487,1,299,4825,1,
300,5045,19,1470,1,
300,4825,1,301,5046,
19,1428,1,301,4825,
1,302,5047,19,1337,
1,302,4825,1,303,
5048,19,1298,1,303,
4825,1,304,5049,19,
1245,1,304,4825,1,
305,5050,19,1703,1,
305,4825,1,306,5051,
19,1653,1,306,4825,
1,307,5052,19,1643,
1,307,4825,1,308,
5053,19,1638,1,308,
4825,1,309,5054,19,
1589,1,309,4825,1,
310,5055,19,1563,1,
310,4825,1,311,5056,
19,1540,1,311,4825,
1,312,5057,19,1535,
1,312,4825,1,313,
5058,19,1476,1,313,
4825,1,314,5059,19,
1451,1,314,4825,1,
315,5060,19,1518,1,
315,4825,1,316,5061,
19,1610,1,316,4825,
1,317,5062,19,1465,
1,317,4825,1,318,
5063,19,1458,1,318,
4825,1,319,5064,19,
1438,1,319,4825,1,
320,5065,19,1407,1,
320,4825,1,321,5066,
19,1384,1,321,4825,
1,322,5067,19,1228,
1,322,4825,1,323,
5068,19,1718,1,323,
4825,1,324,5069,19,
1349,1,324,4825,1,
325,5070,19,1354,1,
325,4825,1,326,5071,
19,1374,1,326,4825,
1,327,5072,19,1364,
1,327,4825,1,328,
5073,19,1369,1,328,
4825,1,329,5074,19,
1359,1,329,4825,1,
330,5075,19,1713,1,
330,4825,1,331,5076,
19,1379,1,331,4825,
1,332,5077,19,1698,
1,332,4668,1,333,
5078,19,1954,1,333,
4738,1,334,5079,19,
1947,1,334,4738,1,
335,5080,19,1924,1,
335,4742,1,336,5081,
19,2270,1,336,4393,
1,337,5082,19,2265,
1,337,4393,1,338,
5083,19,2260,1,338,
4393,1,339,5084,19,
2255,1,339,4393,1,
340,5085,19,2250,1,
340,4393,1,341,5086,
19,2245,1,341,4393,
1,342,5087,19,2240,
1,342,4393,1,343,
5088,19,2229,1,343,
4413,1,344,5089,19,
2224,1,344,4413,1,
345,5090,19,2219,1,
345,4413,1,346,5091,
19,2214,1,346,4413,
1,347,5092,19,2209,
1,347,4413,1,348,
5093,19,2204,1,348,
4413,1,349,5094,19,
2199,1,349,4413,1,
350,5095,19,2194,1,
350,4413,1,351,5096,
19,2188,1,351,4419,
1,352,5097,19,2014,
1,352,4419,1,353,
5098,19,2182,1,353,
4419,1,354,5099,19,
2177,1,354,4419,1,
355,5100,19,2172,1,
355,4419,1,356,5101,
19,2007,1,356,4419,
1,357,5102,19,2167,
1,357,4419,1,358,
5103,19,2162,1,358,
4419,1,359,5104,19,
2157,1,359,4425,1,
360,5105,19,2152,1,
360,4425,1,361,5106,
19,2146,1,361,4431,
1,362,5107,19,2141,
1,362,4431,1,363,
5108,19,1998,1,363,
4431,1,364,5109,19,
2135,1,364,4431,1,
365,5110,19,2130,1,
365,4431,1,366,5111,
19,2125,1,366,4431,
1,367,5112,19,1992,
1,367,4431,1,368,
5113,19,2119,1,368,
4431,1,369,5114,19,
2047,1,369,4431,1,
370,5115,19,2114,1,
370,4431,1,371,5116,
19,2109,1,371,4437,
1,372,5117,19,2104,
1,372,4437,1,373,
5118,19,2099,1,373,
4437,1,374,5119,19,
2093,1,374,4443,1,
375,5120,19,2087,1,
375,4449,1,376,5121,
19,2081,1,376,4455,
1,377,5122,19,5123,
4,50,65,0,114,
0,103,0,117,0,
109,0,101,0,110,
0,116,0,68,0,
101,0,99,0,108,
0,97,0,114,0,
97,0,116,0,105,
0,111,0,110,0,
76,0,105,0,115,
0,116,0,95,0,
51,0,1,377,4331,
1,378,5124,19,5125,
4,28,65,0,114,
0,103,0,117,0,
109,0,101,0,110,
0,116,0,76,0,
105,0,115,0,116,
0,95,0,51,0,
1,378,4738,1,379,
5126,19,5127,4,50,
65,0,114,0,103,
0,117,0,109,0,
101,0,110,0,116,
0,68,0,101,0,
99,0,108,0,97,
0,114,0,97,0,
116,0,105,0,111,
0,110,0,76,0,
105,0,115,0,116,
0,95,0,52,0,
1,379,4331,1,380,
5128,19,5129,4,28,
65,0,114,0,103,
0,117,0,109,0,
101,0,110,0,116,
0,76,0,105,0,
115,0,116,0,95,
0,52,0,1,380,
4738,1,381,5130,19,
5131,4,50,65,0,
114,0,103,0,117,
0,109,0,101,0,
110,0,116,0,68,
0,101,0,99,0,
108,0,97,0,114,
0,97,0,116,0,
105,0,111,0,110,
0,76,0,105,0,
115,0,116,0,95,
0,53,0,1,381,
4331,2,0,0};
new Sfactory(this,"ExpressionArgument_1",new SCreator(ExpressionArgument_1_factory));
new Sfactory(this,"VectorArgStateEvent",new SCreator(VectorArgStateEvent_factory));
new Sfactory(this,"IntVecVecArgStateEvent",new SCreator(IntVecVecArgStateEvent_factory));
new Sfactory(this,"IntArgStateEvent_1",new SCreator(IntArgStateEvent_1_factory));
new Sfactory(this,"SimpleAssignment_9",new SCreator(SimpleAssignment_9_factory));
new Sfactory(this,"StatementList_1",new SCreator(StatementList_1_factory));
new Sfactory(this,"RotDeclaration_1",new SCreator(RotDeclaration_1_factory));
new Sfactory(this,"IntRotRotArgEvent_1",new SCreator(IntRotRotArgEvent_1_factory));
new Sfactory(this,"StateChange_1",new SCreator(StateChange_1_factory));
new Sfactory(this,"EmptyStatement",new SCreator(EmptyStatement_factory));
new Sfactory(this,"Declaration",new SCreator(Declaration_factory));
new Sfactory(this,"IdentExpression",new SCreator(IdentExpression_factory));
new Sfactory(this,"error",new SCreator(error_factory));
new Sfactory(this,"BinaryExpression_2",new SCreator(BinaryExpression_2_factory));
new Sfactory(this,"BinaryExpression_3",new SCreator(BinaryExpression_3_factory));
new Sfactory(this,"BinaryExpression_4",new SCreator(BinaryExpression_4_factory));
new Sfactory(this,"BinaryExpression_5",new SCreator(BinaryExpression_5_factory));
new Sfactory(this,"ReturnStatement_2",new SCreator(ReturnStatement_2_factory));
new Sfactory(this,"SimpleAssignment_19",new SCreator(SimpleAssignment_19_factory));
new Sfactory(this,"BinaryExpression_9",new SCreator(BinaryExpression_9_factory));
new Sfactory(this,"VectorConstant_1",new SCreator(VectorConstant_1_factory));
new Sfactory(this,"ParenthesisExpression",new SCreator(ParenthesisExpression_factory));
new Sfactory(this,"StatementList",new SCreator(StatementList_factory));
new Sfactory(this,"IntRotRotArgEvent",new SCreator(IntRotRotArgEvent_factory));
new Sfactory(this,"UnaryExpression",new SCreator(UnaryExpression_factory));
new Sfactory(this,"IdentDotExpression_1",new SCreator(IdentDotExpression_1_factory));
new Sfactory(this,"ArgumentList_4",new SCreator(ArgumentList_4_factory));
new Sfactory(this,"Typename",new SCreator(Typename_factory));
new Sfactory(this,"IfStatement_1",new SCreator(IfStatement_1_factory));
new Sfactory(this,"RotationConstant_1",new SCreator(RotationConstant_1_factory));
new Sfactory(this,"Assignment",new SCreator(Assignment_factory));
new Sfactory(this,"IfStatement_4",new SCreator(IfStatement_4_factory));
new Sfactory(this,"CompoundStatement_1",new SCreator(CompoundStatement_1_factory));
new Sfactory(this,"CompoundStatement_2",new SCreator(CompoundStatement_2_factory));
new Sfactory(this,"KeyIntIntArgumentDeclarationList_1",new SCreator(KeyIntIntArgumentDeclarationList_1_factory));
new Sfactory(this,"BinaryExpression_8",new SCreator(BinaryExpression_8_factory));
new Sfactory(this,"VectorArgEvent",new SCreator(VectorArgEvent_factory));
new Sfactory(this,"ReturnStatement_1",new SCreator(ReturnStatement_1_factory));
new Sfactory(this,"IdentDotExpression",new SCreator(IdentDotExpression_factory));
new Sfactory(this,"Argument",new SCreator(Argument_factory));
new Sfactory(this,"State_2",new SCreator(State_2_factory));
new Sfactory(this,"GlobalDefinitions_3",new SCreator(GlobalDefinitions_3_factory));
new Sfactory(this,"GlobalDefinitions_4",new SCreator(GlobalDefinitions_4_factory));
new Sfactory(this,"Event_1",new SCreator(Event_1_factory));
new Sfactory(this,"ListConstant",new SCreator(ListConstant_factory));
new Sfactory(this,"Event_3",new SCreator(Event_3_factory));
new Sfactory(this,"Event_4",new SCreator(Event_4_factory));
new Sfactory(this,"Event_5",new SCreator(Event_5_factory));
new Sfactory(this,"SimpleAssignment_5",new SCreator(SimpleAssignment_5_factory));
new Sfactory(this,"Typename_1",new SCreator(Typename_1_factory));
new Sfactory(this,"VoidArgStateEvent_1",new SCreator(VoidArgStateEvent_1_factory));
new Sfactory(this,"Typename_3",new SCreator(Typename_3_factory));
new Sfactory(this,"IntRotRotArgStateEvent",new SCreator(IntRotRotArgStateEvent_factory));
new Sfactory(this,"Typename_5",new SCreator(Typename_5_factory));
new Sfactory(this,"Typename_6",new SCreator(Typename_6_factory));
new Sfactory(this,"Typename_7",new SCreator(Typename_7_factory));
new Sfactory(this,"ArgumentDeclarationList",new SCreator(ArgumentDeclarationList_factory));
new Sfactory(this,"ConstantExpression",new SCreator(ConstantExpression_factory));
new Sfactory(this,"LSLProgramRoot_1",new SCreator(LSLProgramRoot_1_factory));
new Sfactory(this,"LSLProgramRoot_2",new SCreator(LSLProgramRoot_2_factory));
new Sfactory(this,"KeyIntIntArgEvent_1",new SCreator(KeyIntIntArgEvent_1_factory));
new Sfactory(this,"States_1",new SCreator(States_1_factory));
new Sfactory(this,"States_2",new SCreator(States_2_factory));
new Sfactory(this,"FunctionCallExpression_1",new SCreator(FunctionCallExpression_1_factory));
new Sfactory(this,"KeyArgEvent_1",new SCreator(KeyArgEvent_1_factory));
new Sfactory(this,"ForLoopStatement",new SCreator(ForLoopStatement_factory));
new Sfactory(this,"IntArgStateEvent",new SCreator(IntArgStateEvent_factory));
new Sfactory(this,"StateBody_15",new SCreator(StateBody_15_factory));
new Sfactory(this,"IntRotRotArgumentDeclarationList_1",new SCreator(IntRotRotArgumentDeclarationList_1_factory));
new Sfactory(this,"IntArgEvent_9",new SCreator(IntArgEvent_9_factory));
new Sfactory(this,"DoWhileStatement_1",new SCreator(DoWhileStatement_1_factory));
new Sfactory(this,"DoWhileStatement_2",new SCreator(DoWhileStatement_2_factory));
new Sfactory(this,"ForLoopStatement_4",new SCreator(ForLoopStatement_4_factory));
new Sfactory(this,"SimpleAssignment_11",new SCreator(SimpleAssignment_11_factory));
new Sfactory(this,"SimpleAssignment_12",new SCreator(SimpleAssignment_12_factory));
new Sfactory(this,"SimpleAssignment_13",new SCreator(SimpleAssignment_13_factory));
new Sfactory(this,"JumpLabel",new SCreator(JumpLabel_factory));
new Sfactory(this,"SimpleAssignment_15",new SCreator(SimpleAssignment_15_factory));
new Sfactory(this,"IntVecVecArgEvent",new SCreator(IntVecVecArgEvent_factory));
new Sfactory(this,"VecDeclaration",new SCreator(VecDeclaration_factory));
new Sfactory(this,"StateBody_14",new SCreator(StateBody_14_factory));
new Sfactory(this,"GlobalDefinitions",new SCreator(GlobalDefinitions_factory));
new Sfactory(this,"StateBody_16",new SCreator(StateBody_16_factory));
new Sfactory(this,"KeyIntIntArgumentDeclarationList",new SCreator(KeyIntIntArgumentDeclarationList_factory));
new Sfactory(this,"ConstantExpression_1",new SCreator(ConstantExpression_1_factory));
new Sfactory(this,"VoidArgEvent_4",new SCreator(VoidArgEvent_4_factory));
new Sfactory(this,"FunctionCall_1",new SCreator(FunctionCall_1_factory));
new Sfactory(this,"Assignment_1",new SCreator(Assignment_1_factory));
new Sfactory(this,"Assignment_2",new SCreator(Assignment_2_factory));
new Sfactory(this,"IntVecVecArgEvent_1",new SCreator(IntVecVecArgEvent_1_factory));
new Sfactory(this,"TypecastExpression_1",new SCreator(TypecastExpression_1_factory));
new Sfactory(this,"SimpleAssignment_21",new SCreator(SimpleAssignment_21_factory));
new Sfactory(this,"SimpleAssignment_22",new SCreator(SimpleAssignment_22_factory));
new Sfactory(this,"KeyIntIntArgStateEvent",new SCreator(KeyIntIntArgStateEvent_factory));
new Sfactory(this,"TypecastExpression_9",new SCreator(TypecastExpression_9_factory));
new Sfactory(this,"VoidArgEvent_2",new SCreator(VoidArgEvent_2_factory));
new Sfactory(this,"VoidArgEvent_3",new SCreator(VoidArgEvent_3_factory));
new Sfactory(this,"ArgumentDeclarationList_1",new SCreator(ArgumentDeclarationList_1_factory));
new Sfactory(this,"ArgumentDeclarationList_2",new SCreator(ArgumentDeclarationList_2_factory));
new Sfactory(this,"GlobalDefinitions_1",new SCreator(GlobalDefinitions_1_factory));
new Sfactory(this,"GlobalDefinitions_2",new SCreator(GlobalDefinitions_2_factory));
new Sfactory(this,"IncrementDecrementExpression",new SCreator(IncrementDecrementExpression_factory));
new Sfactory(this,"GlobalVariableDeclaration",new SCreator(GlobalVariableDeclaration_factory));
new Sfactory(this,"IntArgumentDeclarationList_1",new SCreator(IntArgumentDeclarationList_1_factory));
new Sfactory(this,"IntDeclaration_1",new SCreator(IntDeclaration_1_factory));
new Sfactory(this,"ArgumentDeclarationList_5",new SCreator(ArgumentDeclarationList_5_factory));
new Sfactory(this,"IntVecVecArgumentDeclarationList",new SCreator(IntVecVecArgumentDeclarationList_factory));
new Sfactory(this,"VectorArgumentDeclarationList_1",new SCreator(VectorArgumentDeclarationList_1_factory));
new Sfactory(this,"KeyArgumentDeclarationList",new SCreator(KeyArgumentDeclarationList_factory));
new Sfactory(this,"TypecastExpression_2",new SCreator(TypecastExpression_2_factory));
new Sfactory(this,"KeyArgStateEvent",new SCreator(KeyArgStateEvent_factory));
new Sfactory(this,"TypecastExpression_5",new SCreator(TypecastExpression_5_factory));
new Sfactory(this,"TypecastExpression_8",new SCreator(TypecastExpression_8_factory));
new Sfactory(this,"Constant_1",new SCreator(Constant_1_factory));
new Sfactory(this,"Expression",new SCreator(Expression_factory));
new Sfactory(this,"Constant_3",new SCreator(Constant_3_factory));
new Sfactory(this,"Constant_4",new SCreator(Constant_4_factory));
new Sfactory(this,"IntArgEvent_5",new SCreator(IntArgEvent_5_factory));
new Sfactory(this,"BinaryExpression_1",new SCreator(BinaryExpression_1_factory));
new Sfactory(this,"IfStatement_2",new SCreator(IfStatement_2_factory));
new Sfactory(this,"IfStatement_3",new SCreator(IfStatement_3_factory));
new Sfactory(this,"KeyArgEvent",new SCreator(KeyArgEvent_factory));
new Sfactory(this,"Event_2",new SCreator(Event_2_factory));
new Sfactory(this,"JumpLabel_1",new SCreator(JumpLabel_1_factory));
new Sfactory(this,"RotationConstant",new SCreator(RotationConstant_factory));
new Sfactory(this,"Statement_12",new SCreator(Statement_12_factory));
new Sfactory(this,"Statement_13",new SCreator(Statement_13_factory));
new Sfactory(this,"UnaryExpression_1",new SCreator(UnaryExpression_1_factory));
new Sfactory(this,"UnaryExpression_2",new SCreator(UnaryExpression_2_factory));
new Sfactory(this,"UnaryExpression_3",new SCreator(UnaryExpression_3_factory));
new Sfactory(this,"ArgumentList_1",new SCreator(ArgumentList_1_factory));
new Sfactory(this,"KeyIntIntArgEvent",new SCreator(KeyIntIntArgEvent_factory));
new Sfactory(this,"ArgumentList_3",new SCreator(ArgumentList_3_factory));
new Sfactory(this,"Constant",new SCreator(Constant_factory));
new Sfactory(this,"State",new SCreator(State_factory));
new Sfactory(this,"StateBody_13",new SCreator(StateBody_13_factory));
new Sfactory(this,"KeyArgStateEvent_1",new SCreator(KeyArgStateEvent_1_factory));
new Sfactory(this,"SimpleAssignment_8",new SCreator(SimpleAssignment_8_factory));
new Sfactory(this,"LSLProgramRoot",new SCreator(LSLProgramRoot_factory));
new Sfactory(this,"StateChange",new SCreator(StateChange_factory));
new Sfactory(this,"VecDeclaration_1",new SCreator(VecDeclaration_1_factory));
new Sfactory(this,"GlobalVariableDeclaration_1",new SCreator(GlobalVariableDeclaration_1_factory));
new Sfactory(this,"GlobalVariableDeclaration_2",new SCreator(GlobalVariableDeclaration_2_factory));
new Sfactory(this,"IncrementDecrementExpression_5",new SCreator(IncrementDecrementExpression_5_factory));
new Sfactory(this,"ReturnStatement",new SCreator(ReturnStatement_factory));
new Sfactory(this,"StateBody_10",new SCreator(StateBody_10_factory));
new Sfactory(this,"StateBody_11",new SCreator(StateBody_11_factory));
new Sfactory(this,"StateBody_12",new SCreator(StateBody_12_factory));
new Sfactory(this,"IntVecVecArgStateEvent_1",new SCreator(IntVecVecArgStateEvent_1_factory));
new Sfactory(this,"KeyDeclaration",new SCreator(KeyDeclaration_factory));
new Sfactory(this,"IntArgEvent_6",new SCreator(IntArgEvent_6_factory));
new Sfactory(this,"ArgumentDeclarationList_3",new SCreator(ArgumentDeclarationList_3_factory));
new Sfactory(this,"ArgumentList_2",new SCreator(ArgumentList_2_factory));
new Sfactory(this,"IntArgEvent_10",new SCreator(IntArgEvent_10_factory));
new Sfactory(this,"CompoundStatement",new SCreator(CompoundStatement_factory));
new Sfactory(this,"TypecastExpression_3",new SCreator(TypecastExpression_3_factory));
new Sfactory(this,"IntArgumentDeclarationList",new SCreator(IntArgumentDeclarationList_factory));
new Sfactory(this,"ArgumentDeclarationList_4",new SCreator(ArgumentDeclarationList_4_factory));
new Sfactory(this,"SimpleAssignment_3",new SCreator(SimpleAssignment_3_factory));
new Sfactory(this,"SimpleAssignment_4",new SCreator(SimpleAssignment_4_factory));
new Sfactory(this,"Statement_1",new SCreator(Statement_1_factory));
new Sfactory(this,"Statement_2",new SCreator(Statement_2_factory));
new Sfactory(this,"Statement_4",new SCreator(Statement_4_factory));
new Sfactory(this,"Statement_5",new SCreator(Statement_5_factory));
new Sfactory(this,"Statement_6",new SCreator(Statement_6_factory));
new Sfactory(this,"Statement_8",new SCreator(Statement_8_factory));
new Sfactory(this,"Statement_9",new SCreator(Statement_9_factory));
new Sfactory(this,"ExpressionArgument",new SCreator(ExpressionArgument_factory));
new Sfactory(this,"GlobalFunctionDefinition",new SCreator(GlobalFunctionDefinition_factory));
new Sfactory(this,"State_1",new SCreator(State_1_factory));
new Sfactory(this,"DoWhileStatement",new SCreator(DoWhileStatement_factory));
new Sfactory(this,"ParenthesisExpression_1",new SCreator(ParenthesisExpression_1_factory));
new Sfactory(this,"ParenthesisExpression_2",new SCreator(ParenthesisExpression_2_factory));
new Sfactory(this,"StateBody",new SCreator(StateBody_factory));
new Sfactory(this,"Event_7",new SCreator(Event_7_factory));
new Sfactory(this,"Event_8",new SCreator(Event_8_factory));
new Sfactory(this,"IncrementDecrementExpression_1",new SCreator(IncrementDecrementExpression_1_factory));
new Sfactory(this,"IncrementDecrementExpression_2",new SCreator(IncrementDecrementExpression_2_factory));
new Sfactory(this,"IntVecVecArgumentDeclarationList_1",new SCreator(IntVecVecArgumentDeclarationList_1_factory));
new Sfactory(this,"IncrementDecrementExpression_4",new SCreator(IncrementDecrementExpression_4_factory));
new Sfactory(this,"IncrementDecrementExpression_6",new SCreator(IncrementDecrementExpression_6_factory));
new Sfactory(this,"IncrementDecrementExpression_7",new SCreator(IncrementDecrementExpression_7_factory));
new Sfactory(this,"StateEvent",new SCreator(StateEvent_factory));
new Sfactory(this,"IntArgEvent_3",new SCreator(IntArgEvent_3_factory));
new Sfactory(this,"IntArgEvent_4",new SCreator(IntArgEvent_4_factory));
new Sfactory(this,"KeyDeclaration_1",new SCreator(KeyDeclaration_1_factory));
new Sfactory(this,"Statement_3",new SCreator(Statement_3_factory));
new Sfactory(this,"IntArgEvent_7",new SCreator(IntArgEvent_7_factory));
new Sfactory(this,"IntArgEvent_8",new SCreator(IntArgEvent_8_factory));
new Sfactory(this,"SimpleAssignment_10",new SCreator(SimpleAssignment_10_factory));
new Sfactory(this,"StatementList_2",new SCreator(StatementList_2_factory));
new Sfactory(this,"IntRotRotArgStateEvent_1",new SCreator(IntRotRotArgStateEvent_1_factory));
new Sfactory(this,"VectorArgEvent_2",new SCreator(VectorArgEvent_2_factory));
new Sfactory(this,"Event",new SCreator(Event_factory));
new Sfactory(this,"SimpleAssignment_14",new SCreator(SimpleAssignment_14_factory));
new Sfactory(this,"SimpleAssignment_16",new SCreator(SimpleAssignment_16_factory));
new Sfactory(this,"SimpleAssignment_17",new SCreator(SimpleAssignment_17_factory));
new Sfactory(this,"SimpleAssignment_18",new SCreator(SimpleAssignment_18_factory));
new Sfactory(this,"Statement_10",new SCreator(Statement_10_factory));
new Sfactory(this,"Statement_11",new SCreator(Statement_11_factory));
new Sfactory(this,"SimpleAssignment",new SCreator(SimpleAssignment_factory));
new Sfactory(this,"TypecastExpression",new SCreator(TypecastExpression_factory));
new Sfactory(this,"JumpStatement_1",new SCreator(JumpStatement_1_factory));
new Sfactory(this,"SimpleAssignment_20",new SCreator(SimpleAssignment_20_factory));
new Sfactory(this,"Statement_7",new SCreator(Statement_7_factory));
new Sfactory(this,"SimpleAssignment_23",new SCreator(SimpleAssignment_23_factory));
new Sfactory(this,"SimpleAssignment_24",new SCreator(SimpleAssignment_24_factory));
new Sfactory(this,"SimpleAssignment_1",new SCreator(SimpleAssignment_1_factory));
new Sfactory(this,"SimpleAssignment_2",new SCreator(SimpleAssignment_2_factory));
new Sfactory(this,"BinaryExpression",new SCreator(BinaryExpression_factory));
new Sfactory(this,"FunctionCallExpression",new SCreator(FunctionCallExpression_factory));
new Sfactory(this,"SimpleAssignment_6",new SCreator(SimpleAssignment_6_factory));
new Sfactory(this,"StateBody_1",new SCreator(StateBody_1_factory));
new Sfactory(this,"StateBody_2",new SCreator(StateBody_2_factory));
new Sfactory(this,"StateBody_3",new SCreator(StateBody_3_factory));
new Sfactory(this,"StateBody_4",new SCreator(StateBody_4_factory));
new Sfactory(this,"StateBody_5",new SCreator(StateBody_5_factory));
new Sfactory(this,"StateBody_6",new SCreator(StateBody_6_factory));
new Sfactory(this,"StateBody_7",new SCreator(StateBody_7_factory));
new Sfactory(this,"StateBody_8",new SCreator(StateBody_8_factory));
new Sfactory(this,"StateBody_9",new SCreator(StateBody_9_factory));
new Sfactory(this,"Statement",new SCreator(Statement_factory));
new Sfactory(this,"IncrementDecrementExpression_3",new SCreator(IncrementDecrementExpression_3_factory));
new Sfactory(this,"JumpStatement",new SCreator(JumpStatement_factory));
new Sfactory(this,"BinaryExpression_11",new SCreator(BinaryExpression_11_factory));
new Sfactory(this,"IntArgEvent",new SCreator(IntArgEvent_factory));
new Sfactory(this,"IncrementDecrementExpression_8",new SCreator(IncrementDecrementExpression_8_factory));
new Sfactory(this,"BinaryExpression_14",new SCreator(BinaryExpression_14_factory));
new Sfactory(this,"BinaryExpression_15",new SCreator(BinaryExpression_15_factory));
new Sfactory(this,"BinaryExpression_16",new SCreator(BinaryExpression_16_factory));
new Sfactory(this,"BinaryExpression_6",new SCreator(BinaryExpression_6_factory));
new Sfactory(this,"BinaryExpression_7",new SCreator(BinaryExpression_7_factory));
new Sfactory(this,"Typename_2",new SCreator(Typename_2_factory));
new Sfactory(this,"Typename_4",new SCreator(Typename_4_factory));
new Sfactory(this,"ArgumentList",new SCreator(ArgumentList_factory));
new Sfactory(this,"BinaryExpression_12",new SCreator(BinaryExpression_12_factory));
new Sfactory(this,"BinaryExpression_13",new SCreator(BinaryExpression_13_factory));
new Sfactory(this,"GlobalFunctionDefinition_2",new SCreator(GlobalFunctionDefinition_2_factory));
new Sfactory(this,"StateChange_2",new SCreator(StateChange_2_factory));
new Sfactory(this,"VoidArgEvent_1",new SCreator(VoidArgEvent_1_factory));
new Sfactory(this,"BinaryExpression_10",new SCreator(BinaryExpression_10_factory));
new Sfactory(this,"VoidArgEvent_5",new SCreator(VoidArgEvent_5_factory));
new Sfactory(this,"VoidArgEvent_6",new SCreator(VoidArgEvent_6_factory));
new Sfactory(this,"VoidArgEvent_7",new SCreator(VoidArgEvent_7_factory));
new Sfactory(this,"VoidArgEvent_8",new SCreator(VoidArgEvent_8_factory));
new Sfactory(this,"BinaryExpression_17",new SCreator(BinaryExpression_17_factory));
new Sfactory(this,"StateEvent_1",new SCreator(StateEvent_1_factory));
new Sfactory(this,"VectorConstant",new SCreator(VectorConstant_factory));
new Sfactory(this,"VectorArgEvent_1",new SCreator(VectorArgEvent_1_factory));
new Sfactory(this,"IntDeclaration",new SCreator(IntDeclaration_factory));
new Sfactory(this,"VectorArgEvent_3",new SCreator(VectorArgEvent_3_factory));
new Sfactory(this,"TypecastExpression_4",new SCreator(TypecastExpression_4_factory));
new Sfactory(this,"TypecastExpression_6",new SCreator(TypecastExpression_6_factory));
new Sfactory(this,"TypecastExpression_7",new SCreator(TypecastExpression_7_factory));
new Sfactory(this,"FunctionCall",new SCreator(FunctionCall_factory));
new Sfactory(this,"ListConstant_1",new SCreator(ListConstant_1_factory));
new Sfactory(this,"BinaryExpression_18",new SCreator(BinaryExpression_18_factory));
new Sfactory(this,"Event_6",new SCreator(Event_6_factory));
new Sfactory(this,"KeyArgEvent_2",new SCreator(KeyArgEvent_2_factory));
new Sfactory(this,"Declaration_1",new SCreator(Declaration_1_factory));
new Sfactory(this,"EmptyStatement_1",new SCreator(EmptyStatement_1_factory));
new Sfactory(this,"SimpleAssignment_7",new SCreator(SimpleAssignment_7_factory));
new Sfactory(this,"ForLoop",new SCreator(ForLoop_factory));
new Sfactory(this,"ForLoop_2",new SCreator(ForLoop_2_factory));
new Sfactory(this,"KeyIntIntArgStateEvent_1",new SCreator(KeyIntIntArgStateEvent_1_factory));
new Sfactory(this,"KeyArgumentDeclarationList_1",new SCreator(KeyArgumentDeclarationList_1_factory));
new Sfactory(this,"GlobalFunctionDefinition_1",new SCreator(GlobalFunctionDefinition_1_factory));
new Sfactory(this,"IfStatement",new SCreator(IfStatement_factory));
new Sfactory(this,"ForLoopStatement_1",new SCreator(ForLoopStatement_1_factory));
new Sfactory(this,"ForLoopStatement_2",new SCreator(ForLoopStatement_2_factory));
new Sfactory(this,"ForLoopStatement_3",new SCreator(ForLoopStatement_3_factory));
new Sfactory(this,"IntRotRotArgumentDeclarationList",new SCreator(IntRotRotArgumentDeclarationList_factory));
new Sfactory(this,"IntArgEvent_1",new SCreator(IntArgEvent_1_factory));
new Sfactory(this,"IntArgEvent_2",new SCreator(IntArgEvent_2_factory));
new Sfactory(this,"WhileStatement",new SCreator(WhileStatement_factory));
new Sfactory(this,"ForLoop_1",new SCreator(ForLoop_1_factory));
new Sfactory(this,"Constant_2",new SCreator(Constant_2_factory));
new Sfactory(this,"VoidArgEvent",new SCreator(VoidArgEvent_factory));
new Sfactory(this,"RotDeclaration",new SCreator(RotDeclaration_factory));
new Sfactory(this,"WhileStatement_1",new SCreator(WhileStatement_1_factory));
new Sfactory(this,"WhileStatement_2",new SCreator(WhileStatement_2_factory));
new Sfactory(this,"VectorArgStateEvent_1",new SCreator(VectorArgStateEvent_1_factory));
new Sfactory(this,"IdentExpression_1",new SCreator(IdentExpression_1_factory));
new Sfactory(this,"VectorArgumentDeclarationList",new SCreator(VectorArgumentDeclarationList_factory));
new Sfactory(this,"States",new SCreator(States_factory));
new Sfactory(this,"VoidArgStateEvent",new SCreator(VoidArgStateEvent_factory));
}
public static object ExpressionArgument_1_factory(Parser yyp) { return new ExpressionArgument_1(yyp); }
public static object VectorArgStateEvent_factory(Parser yyp) { return new VectorArgStateEvent(yyp); }
public static object IntVecVecArgStateEvent_factory(Parser yyp) { return new IntVecVecArgStateEvent(yyp); }
public static object IntArgStateEvent_1_factory(Parser yyp) { return new IntArgStateEvent_1(yyp); }
public static object SimpleAssignment_9_factory(Parser yyp) { return new SimpleAssignment_9(yyp); }
public static object StatementList_1_factory(Parser yyp) { return new StatementList_1(yyp); }
public static object RotDeclaration_1_factory(Parser yyp) { return new RotDeclaration_1(yyp); }
public static object IntRotRotArgEvent_1_factory(Parser yyp) { return new IntRotRotArgEvent_1(yyp); }
public static object StateChange_1_factory(Parser yyp) { return new StateChange_1(yyp); }
public static object EmptyStatement_factory(Parser yyp) { return new EmptyStatement(yyp); }
public static object Declaration_factory(Parser yyp) { return new Declaration(yyp); }
public static object IdentExpression_factory(Parser yyp) { return new IdentExpression(yyp); }
public static object error_factory(Parser yyp) { return new error(yyp); }
public static object BinaryExpression_2_factory(Parser yyp) { return new BinaryExpression_2(yyp); }
public static object BinaryExpression_3_factory(Parser yyp) { return new BinaryExpression_3(yyp); }
public static object BinaryExpression_4_factory(Parser yyp) { return new BinaryExpression_4(yyp); }
public static object BinaryExpression_5_factory(Parser yyp) { return new BinaryExpression_5(yyp); }
public static object ReturnStatement_2_factory(Parser yyp) { return new ReturnStatement_2(yyp); }
public static object SimpleAssignment_19_factory(Parser yyp) { return new SimpleAssignment_19(yyp); }
public static object BinaryExpression_9_factory(Parser yyp) { return new BinaryExpression_9(yyp); }
public static object VectorConstant_1_factory(Parser yyp) { return new VectorConstant_1(yyp); }
public static object ParenthesisExpression_factory(Parser yyp) { return new ParenthesisExpression(yyp); }
public static object StatementList_factory(Parser yyp) { return new StatementList(yyp); }
public static object IntRotRotArgEvent_factory(Parser yyp) { return new IntRotRotArgEvent(yyp); }
public static object UnaryExpression_factory(Parser yyp) { return new UnaryExpression(yyp); }
public static object IdentDotExpression_1_factory(Parser yyp) { return new IdentDotExpression_1(yyp); }
public static object ArgumentList_4_factory(Parser yyp) { return new ArgumentList_4(yyp); }
public static object Typename_factory(Parser yyp) { return new Typename(yyp); }
public static object IfStatement_1_factory(Parser yyp) { return new IfStatement_1(yyp); }
public static object RotationConstant_1_factory(Parser yyp) { return new RotationConstant_1(yyp); }
public static object Assignment_factory(Parser yyp) { return new Assignment(yyp); }
public static object IfStatement_4_factory(Parser yyp) { return new IfStatement_4(yyp); }
public static object CompoundStatement_1_factory(Parser yyp) { return new CompoundStatement_1(yyp); }
public static object CompoundStatement_2_factory(Parser yyp) { return new CompoundStatement_2(yyp); }
public static object KeyIntIntArgumentDeclarationList_1_factory(Parser yyp) { return new KeyIntIntArgumentDeclarationList_1(yyp); }
public static object BinaryExpression_8_factory(Parser yyp) { return new BinaryExpression_8(yyp); }
public static object VectorArgEvent_factory(Parser yyp) { return new VectorArgEvent(yyp); }
public static object ReturnStatement_1_factory(Parser yyp) { return new ReturnStatement_1(yyp); }
public static object IdentDotExpression_factory(Parser yyp) { return new IdentDotExpression(yyp); }
public static object Argument_factory(Parser yyp) { return new Argument(yyp); }
public static object State_2_factory(Parser yyp) { return new State_2(yyp); }
public static object GlobalDefinitions_3_factory(Parser yyp) { return new GlobalDefinitions_3(yyp); }
public static object GlobalDefinitions_4_factory(Parser yyp) { return new GlobalDefinitions_4(yyp); }
public static object Event_1_factory(Parser yyp) { return new Event_1(yyp); }
public static object ListConstant_factory(Parser yyp) { return new ListConstant(yyp); }
public static object Event_3_factory(Parser yyp) { return new Event_3(yyp); }
public static object Event_4_factory(Parser yyp) { return new Event_4(yyp); }
public static object Event_5_factory(Parser yyp) { return new Event_5(yyp); }
public static object SimpleAssignment_5_factory(Parser yyp) { return new SimpleAssignment_5(yyp); }
public static object Typename_1_factory(Parser yyp) { return new Typename_1(yyp); }
public static object VoidArgStateEvent_1_factory(Parser yyp) { return new VoidArgStateEvent_1(yyp); }
public static object Typename_3_factory(Parser yyp) { return new Typename_3(yyp); }
public static object IntRotRotArgStateEvent_factory(Parser yyp) { return new IntRotRotArgStateEvent(yyp); }
public static object Typename_5_factory(Parser yyp) { return new Typename_5(yyp); }
public static object Typename_6_factory(Parser yyp) { return new Typename_6(yyp); }
public static object Typename_7_factory(Parser yyp) { return new Typename_7(yyp); }
public static object ArgumentDeclarationList_factory(Parser yyp) { return new ArgumentDeclarationList(yyp); }
public static object ConstantExpression_factory(Parser yyp) { return new ConstantExpression(yyp); }
public static object LSLProgramRoot_1_factory(Parser yyp) { return new LSLProgramRoot_1(yyp); }
public static object LSLProgramRoot_2_factory(Parser yyp) { return new LSLProgramRoot_2(yyp); }
public static object KeyIntIntArgEvent_1_factory(Parser yyp) { return new KeyIntIntArgEvent_1(yyp); }
public static object States_1_factory(Parser yyp) { return new States_1(yyp); }
public static object States_2_factory(Parser yyp) { return new States_2(yyp); }
public static object FunctionCallExpression_1_factory(Parser yyp) { return new FunctionCallExpression_1(yyp); }
public static object KeyArgEvent_1_factory(Parser yyp) { return new KeyArgEvent_1(yyp); }
public static object ForLoopStatement_factory(Parser yyp) { return new ForLoopStatement(yyp); }
public static object IntArgStateEvent_factory(Parser yyp) { return new IntArgStateEvent(yyp); }
public static object StateBody_15_factory(Parser yyp) { return new StateBody_15(yyp); }
public static object IntRotRotArgumentDeclarationList_1_factory(Parser yyp) { return new IntRotRotArgumentDeclarationList_1(yyp); }
public static object IntArgEvent_9_factory(Parser yyp) { return new IntArgEvent_9(yyp); }
public static object DoWhileStatement_1_factory(Parser yyp) { return new DoWhileStatement_1(yyp); }
public static object DoWhileStatement_2_factory(Parser yyp) { return new DoWhileStatement_2(yyp); }
public static object ForLoopStatement_4_factory(Parser yyp) { return new ForLoopStatement_4(yyp); }
public static object SimpleAssignment_11_factory(Parser yyp) { return new SimpleAssignment_11(yyp); }
public static object SimpleAssignment_12_factory(Parser yyp) { return new SimpleAssignment_12(yyp); }
public static object SimpleAssignment_13_factory(Parser yyp) { return new SimpleAssignment_13(yyp); }
public static object JumpLabel_factory(Parser yyp) { return new JumpLabel(yyp); }
public static object SimpleAssignment_15_factory(Parser yyp) { return new SimpleAssignment_15(yyp); }
public static object IntVecVecArgEvent_factory(Parser yyp) { return new IntVecVecArgEvent(yyp); }
public static object VecDeclaration_factory(Parser yyp) { return new VecDeclaration(yyp); }
public static object StateBody_14_factory(Parser yyp) { return new StateBody_14(yyp); }
public static object GlobalDefinitions_factory(Parser yyp) { return new GlobalDefinitions(yyp); }
public static object StateBody_16_factory(Parser yyp) { return new StateBody_16(yyp); }
public static object KeyIntIntArgumentDeclarationList_factory(Parser yyp) { return new KeyIntIntArgumentDeclarationList(yyp); }
public static object ConstantExpression_1_factory(Parser yyp) { return new ConstantExpression_1(yyp); }
public static object VoidArgEvent_4_factory(Parser yyp) { return new VoidArgEvent_4(yyp); }
public static object FunctionCall_1_factory(Parser yyp) { return new FunctionCall_1(yyp); }
public static object Assignment_1_factory(Parser yyp) { return new Assignment_1(yyp); }
public static object Assignment_2_factory(Parser yyp) { return new Assignment_2(yyp); }
public static object IntVecVecArgEvent_1_factory(Parser yyp) { return new IntVecVecArgEvent_1(yyp); }
public static object TypecastExpression_1_factory(Parser yyp) { return new TypecastExpression_1(yyp); }
public static object SimpleAssignment_21_factory(Parser yyp) { return new SimpleAssignment_21(yyp); }
public static object SimpleAssignment_22_factory(Parser yyp) { return new SimpleAssignment_22(yyp); }
public static object KeyIntIntArgStateEvent_factory(Parser yyp) { return new KeyIntIntArgStateEvent(yyp); }
public static object TypecastExpression_9_factory(Parser yyp) { return new TypecastExpression_9(yyp); }
public static object VoidArgEvent_2_factory(Parser yyp) { return new VoidArgEvent_2(yyp); }
public static object VoidArgEvent_3_factory(Parser yyp) { return new VoidArgEvent_3(yyp); }
public static object ArgumentDeclarationList_1_factory(Parser yyp) { return new ArgumentDeclarationList_1(yyp); }
public static object ArgumentDeclarationList_2_factory(Parser yyp) { return new ArgumentDeclarationList_2(yyp); }
public static object GlobalDefinitions_1_factory(Parser yyp) { return new GlobalDefinitions_1(yyp); }
public static object GlobalDefinitions_2_factory(Parser yyp) { return new GlobalDefinitions_2(yyp); }
public static object IncrementDecrementExpression_factory(Parser yyp) { return new IncrementDecrementExpression(yyp); }
public static object GlobalVariableDeclaration_factory(Parser yyp) { return new GlobalVariableDeclaration(yyp); }
public static object IntArgumentDeclarationList_1_factory(Parser yyp) { return new IntArgumentDeclarationList_1(yyp); }
public static object IntDeclaration_1_factory(Parser yyp) { return new IntDeclaration_1(yyp); }
public static object ArgumentDeclarationList_5_factory(Parser yyp) { return new ArgumentDeclarationList_5(yyp); }
public static object IntVecVecArgumentDeclarationList_factory(Parser yyp) { return new IntVecVecArgumentDeclarationList(yyp); }
public static object VectorArgumentDeclarationList_1_factory(Parser yyp) { return new VectorArgumentDeclarationList_1(yyp); }
public static object KeyArgumentDeclarationList_factory(Parser yyp) { return new KeyArgumentDeclarationList(yyp); }
public static object TypecastExpression_2_factory(Parser yyp) { return new TypecastExpression_2(yyp); }
public static object KeyArgStateEvent_factory(Parser yyp) { return new KeyArgStateEvent(yyp); }
public static object TypecastExpression_5_factory(Parser yyp) { return new TypecastExpression_5(yyp); }
public static object TypecastExpression_8_factory(Parser yyp) { return new TypecastExpression_8(yyp); }
public static object Constant_1_factory(Parser yyp) { return new Constant_1(yyp); }
public static object Expression_factory(Parser yyp) { return new Expression(yyp); }
public static object Constant_3_factory(Parser yyp) { return new Constant_3(yyp); }
public static object Constant_4_factory(Parser yyp) { return new Constant_4(yyp); }
public static object IntArgEvent_5_factory(Parser yyp) { return new IntArgEvent_5(yyp); }
public static object BinaryExpression_1_factory(Parser yyp) { return new BinaryExpression_1(yyp); }
public static object IfStatement_2_factory(Parser yyp) { return new IfStatement_2(yyp); }
public static object IfStatement_3_factory(Parser yyp) { return new IfStatement_3(yyp); }
public static object KeyArgEvent_factory(Parser yyp) { return new KeyArgEvent(yyp); }
public static object Event_2_factory(Parser yyp) { return new Event_2(yyp); }
public static object JumpLabel_1_factory(Parser yyp) { return new JumpLabel_1(yyp); }
public static object RotationConstant_factory(Parser yyp) { return new RotationConstant(yyp); }
public static object Statement_12_factory(Parser yyp) { return new Statement_12(yyp); }
public static object Statement_13_factory(Parser yyp) { return new Statement_13(yyp); }
public static object UnaryExpression_1_factory(Parser yyp) { return new UnaryExpression_1(yyp); }
public static object UnaryExpression_2_factory(Parser yyp) { return new UnaryExpression_2(yyp); }
public static object UnaryExpression_3_factory(Parser yyp) { return new UnaryExpression_3(yyp); }
public static object ArgumentList_1_factory(Parser yyp) { return new ArgumentList_1(yyp); }
public static object KeyIntIntArgEvent_factory(Parser yyp) { return new KeyIntIntArgEvent(yyp); }
public static object ArgumentList_3_factory(Parser yyp) { return new ArgumentList_3(yyp); }
public static object Constant_factory(Parser yyp) { return new Constant(yyp); }
public static object State_factory(Parser yyp) { return new State(yyp); }
public static object StateBody_13_factory(Parser yyp) { return new StateBody_13(yyp); }
public static object KeyArgStateEvent_1_factory(Parser yyp) { return new KeyArgStateEvent_1(yyp); }
public static object SimpleAssignment_8_factory(Parser yyp) { return new SimpleAssignment_8(yyp); }
public static object LSLProgramRoot_factory(Parser yyp) { return new LSLProgramRoot(yyp); }
public static object StateChange_factory(Parser yyp) { return new StateChange(yyp); }
public static object VecDeclaration_1_factory(Parser yyp) { return new VecDeclaration_1(yyp); }
public static object GlobalVariableDeclaration_1_factory(Parser yyp) { return new GlobalVariableDeclaration_1(yyp); }
public static object GlobalVariableDeclaration_2_factory(Parser yyp) { return new GlobalVariableDeclaration_2(yyp); }
public static object IncrementDecrementExpression_5_factory(Parser yyp) { return new IncrementDecrementExpression_5(yyp); }
public static object ReturnStatement_factory(Parser yyp) { return new ReturnStatement(yyp); }
public static object StateBody_10_factory(Parser yyp) { return new StateBody_10(yyp); }
public static object StateBody_11_factory(Parser yyp) { return new StateBody_11(yyp); }
public static object StateBody_12_factory(Parser yyp) { return new StateBody_12(yyp); }
public static object IntVecVecArgStateEvent_1_factory(Parser yyp) { return new IntVecVecArgStateEvent_1(yyp); }
public static object KeyDeclaration_factory(Parser yyp) { return new KeyDeclaration(yyp); }
public static object IntArgEvent_6_factory(Parser yyp) { return new IntArgEvent_6(yyp); }
public static object ArgumentDeclarationList_3_factory(Parser yyp) { return new ArgumentDeclarationList_3(yyp); }
public static object ArgumentList_2_factory(Parser yyp) { return new ArgumentList_2(yyp); }
public static object IntArgEvent_10_factory(Parser yyp) { return new IntArgEvent_10(yyp); }
public static object CompoundStatement_factory(Parser yyp) { return new CompoundStatement(yyp); }
public static object TypecastExpression_3_factory(Parser yyp) { return new TypecastExpression_3(yyp); }
public static object IntArgumentDeclarationList_factory(Parser yyp) { return new IntArgumentDeclarationList(yyp); }
public static object ArgumentDeclarationList_4_factory(Parser yyp) { return new ArgumentDeclarationList_4(yyp); }
public static object SimpleAssignment_3_factory(Parser yyp) { return new SimpleAssignment_3(yyp); }
public static object SimpleAssignment_4_factory(Parser yyp) { return new SimpleAssignment_4(yyp); }
public static object Statement_1_factory(Parser yyp) { return new Statement_1(yyp); }
public static object Statement_2_factory(Parser yyp) { return new Statement_2(yyp); }
public static object Statement_4_factory(Parser yyp) { return new Statement_4(yyp); }
public static object Statement_5_factory(Parser yyp) { return new Statement_5(yyp); }
public static object Statement_6_factory(Parser yyp) { return new Statement_6(yyp); }
public static object Statement_8_factory(Parser yyp) { return new Statement_8(yyp); }
public static object Statement_9_factory(Parser yyp) { return new Statement_9(yyp); }
public static object ExpressionArgument_factory(Parser yyp) { return new ExpressionArgument(yyp); }
public static object GlobalFunctionDefinition_factory(Parser yyp) { return new GlobalFunctionDefinition(yyp); }
public static object State_1_factory(Parser yyp) { return new State_1(yyp); }
public static object DoWhileStatement_factory(Parser yyp) { return new DoWhileStatement(yyp); }
public static object ParenthesisExpression_1_factory(Parser yyp) { return new ParenthesisExpression_1(yyp); }
public static object ParenthesisExpression_2_factory(Parser yyp) { return new ParenthesisExpression_2(yyp); }
public static object StateBody_factory(Parser yyp) { return new StateBody(yyp); }
public static object Event_7_factory(Parser yyp) { return new Event_7(yyp); }
public static object Event_8_factory(Parser yyp) { return new Event_8(yyp); }
public static object IncrementDecrementExpression_1_factory(Parser yyp) { return new IncrementDecrementExpression_1(yyp); }
public static object IncrementDecrementExpression_2_factory(Parser yyp) { return new IncrementDecrementExpression_2(yyp); }
public static object IntVecVecArgumentDeclarationList_1_factory(Parser yyp) { return new IntVecVecArgumentDeclarationList_1(yyp); }
public static object IncrementDecrementExpression_4_factory(Parser yyp) { return new IncrementDecrementExpression_4(yyp); }
public static object IncrementDecrementExpression_6_factory(Parser yyp) { return new IncrementDecrementExpression_6(yyp); }
public static object IncrementDecrementExpression_7_factory(Parser yyp) { return new IncrementDecrementExpression_7(yyp); }
public static object StateEvent_factory(Parser yyp) { return new StateEvent(yyp); }
public static object IntArgEvent_3_factory(Parser yyp) { return new IntArgEvent_3(yyp); }
public static object IntArgEvent_4_factory(Parser yyp) { return new IntArgEvent_4(yyp); }
public static object KeyDeclaration_1_factory(Parser yyp) { return new KeyDeclaration_1(yyp); }
public static object Statement_3_factory(Parser yyp) { return new Statement_3(yyp); }
public static object IntArgEvent_7_factory(Parser yyp) { return new IntArgEvent_7(yyp); }
public static object IntArgEvent_8_factory(Parser yyp) { return new IntArgEvent_8(yyp); }
public static object SimpleAssignment_10_factory(Parser yyp) { return new SimpleAssignment_10(yyp); }
public static object StatementList_2_factory(Parser yyp) { return new StatementList_2(yyp); }
public static object IntRotRotArgStateEvent_1_factory(Parser yyp) { return new IntRotRotArgStateEvent_1(yyp); }
public static object VectorArgEvent_2_factory(Parser yyp) { return new VectorArgEvent_2(yyp); }
public static object Event_factory(Parser yyp) { return new Event(yyp); }
public static object SimpleAssignment_14_factory(Parser yyp) { return new SimpleAssignment_14(yyp); }
public static object SimpleAssignment_16_factory(Parser yyp) { return new SimpleAssignment_16(yyp); }
public static object SimpleAssignment_17_factory(Parser yyp) { return new SimpleAssignment_17(yyp); }
public static object SimpleAssignment_18_factory(Parser yyp) { return new SimpleAssignment_18(yyp); }
public static object Statement_10_factory(Parser yyp) { return new Statement_10(yyp); }
public static object Statement_11_factory(Parser yyp) { return new Statement_11(yyp); }
public static object SimpleAssignment_factory(Parser yyp) { return new SimpleAssignment(yyp); }
public static object TypecastExpression_factory(Parser yyp) { return new TypecastExpression(yyp); }
public static object JumpStatement_1_factory(Parser yyp) { return new JumpStatement_1(yyp); }
public static object SimpleAssignment_20_factory(Parser yyp) { return new SimpleAssignment_20(yyp); }
public static object Statement_7_factory(Parser yyp) { return new Statement_7(yyp); }
public static object SimpleAssignment_23_factory(Parser yyp) { return new SimpleAssignment_23(yyp); }
public static object SimpleAssignment_24_factory(Parser yyp) { return new SimpleAssignment_24(yyp); }
public static object SimpleAssignment_1_factory(Parser yyp) { return new SimpleAssignment_1(yyp); }
public static object SimpleAssignment_2_factory(Parser yyp) { return new SimpleAssignment_2(yyp); }
public static object BinaryExpression_factory(Parser yyp) { return new BinaryExpression(yyp); }
public static object FunctionCallExpression_factory(Parser yyp) { return new FunctionCallExpression(yyp); }
public static object SimpleAssignment_6_factory(Parser yyp) { return new SimpleAssignment_6(yyp); }
public static object StateBody_1_factory(Parser yyp) { return new StateBody_1(yyp); }
public static object StateBody_2_factory(Parser yyp) { return new StateBody_2(yyp); }
public static object StateBody_3_factory(Parser yyp) { return new StateBody_3(yyp); }
public static object StateBody_4_factory(Parser yyp) { return new StateBody_4(yyp); }
public static object StateBody_5_factory(Parser yyp) { return new StateBody_5(yyp); }
public static object StateBody_6_factory(Parser yyp) { return new StateBody_6(yyp); }
public static object StateBody_7_factory(Parser yyp) { return new StateBody_7(yyp); }
public static object StateBody_8_factory(Parser yyp) { return new StateBody_8(yyp); }
public static object StateBody_9_factory(Parser yyp) { return new StateBody_9(yyp); }
public static object Statement_factory(Parser yyp) { return new Statement(yyp); }
public static object IncrementDecrementExpression_3_factory(Parser yyp) { return new IncrementDecrementExpression_3(yyp); }
public static object JumpStatement_factory(Parser yyp) { return new JumpStatement(yyp); }
public static object BinaryExpression_11_factory(Parser yyp) { return new BinaryExpression_11(yyp); }
public static object IntArgEvent_factory(Parser yyp) { return new IntArgEvent(yyp); }
public static object IncrementDecrementExpression_8_factory(Parser yyp) { return new IncrementDecrementExpression_8(yyp); }
public static object BinaryExpression_14_factory(Parser yyp) { return new BinaryExpression_14(yyp); }
public static object BinaryExpression_15_factory(Parser yyp) { return new BinaryExpression_15(yyp); }
public static object BinaryExpression_16_factory(Parser yyp) { return new BinaryExpression_16(yyp); }
public static object BinaryExpression_6_factory(Parser yyp) { return new BinaryExpression_6(yyp); }
public static object BinaryExpression_7_factory(Parser yyp) { return new BinaryExpression_7(yyp); }
public static object Typename_2_factory(Parser yyp) { return new Typename_2(yyp); }
public static object Typename_4_factory(Parser yyp) { return new Typename_4(yyp); }
public static object ArgumentList_factory(Parser yyp) { return new ArgumentList(yyp); }
public static object BinaryExpression_12_factory(Parser yyp) { return new BinaryExpression_12(yyp); }
public static object BinaryExpression_13_factory(Parser yyp) { return new BinaryExpression_13(yyp); }
public static object GlobalFunctionDefinition_2_factory(Parser yyp) { return new GlobalFunctionDefinition_2(yyp); }
public static object StateChange_2_factory(Parser yyp) { return new StateChange_2(yyp); }
public static object VoidArgEvent_1_factory(Parser yyp) { return new VoidArgEvent_1(yyp); }
public static object BinaryExpression_10_factory(Parser yyp) { return new BinaryExpression_10(yyp); }
public static object VoidArgEvent_5_factory(Parser yyp) { return new VoidArgEvent_5(yyp); }
public static object VoidArgEvent_6_factory(Parser yyp) { return new VoidArgEvent_6(yyp); }
public static object VoidArgEvent_7_factory(Parser yyp) { return new VoidArgEvent_7(yyp); }
public static object VoidArgEvent_8_factory(Parser yyp) { return new VoidArgEvent_8(yyp); }
public static object BinaryExpression_17_factory(Parser yyp) { return new BinaryExpression_17(yyp); }
public static object StateEvent_1_factory(Parser yyp) { return new StateEvent_1(yyp); }
public static object VectorConstant_factory(Parser yyp) { return new VectorConstant(yyp); }
public static object VectorArgEvent_1_factory(Parser yyp) { return new VectorArgEvent_1(yyp); }
public static object IntDeclaration_factory(Parser yyp) { return new IntDeclaration(yyp); }
public static object VectorArgEvent_3_factory(Parser yyp) { return new VectorArgEvent_3(yyp); }
public static object TypecastExpression_4_factory(Parser yyp) { return new TypecastExpression_4(yyp); }
public static object TypecastExpression_6_factory(Parser yyp) { return new TypecastExpression_6(yyp); }
public static object TypecastExpression_7_factory(Parser yyp) { return new TypecastExpression_7(yyp); }
public static object FunctionCall_factory(Parser yyp) { return new FunctionCall(yyp); }
public static object ListConstant_1_factory(Parser yyp) { return new ListConstant_1(yyp); }
public static object BinaryExpression_18_factory(Parser yyp) { return new BinaryExpression_18(yyp); }
public static object Event_6_factory(Parser yyp) { return new Event_6(yyp); }
public static object KeyArgEvent_2_factory(Parser yyp) { return new KeyArgEvent_2(yyp); }
public static object Declaration_1_factory(Parser yyp) { return new Declaration_1(yyp); }
public static object EmptyStatement_1_factory(Parser yyp) { return new EmptyStatement_1(yyp); }
public static object SimpleAssignment_7_factory(Parser yyp) { return new SimpleAssignment_7(yyp); }
public static object ForLoop_factory(Parser yyp) { return new ForLoop(yyp); }
public static object ForLoop_2_factory(Parser yyp) { return new ForLoop_2(yyp); }
public static object KeyIntIntArgStateEvent_1_factory(Parser yyp) { return new KeyIntIntArgStateEvent_1(yyp); }
public static object KeyArgumentDeclarationList_1_factory(Parser yyp) { return new KeyArgumentDeclarationList_1(yyp); }
public static object GlobalFunctionDefinition_1_factory(Parser yyp) { return new GlobalFunctionDefinition_1(yyp); }
public static object IfStatement_factory(Parser yyp) { return new IfStatement(yyp); }
public static object ForLoopStatement_1_factory(Parser yyp) { return new ForLoopStatement_1(yyp); }
public static object ForLoopStatement_2_factory(Parser yyp) { return new ForLoopStatement_2(yyp); }
public static object ForLoopStatement_3_factory(Parser yyp) { return new ForLoopStatement_3(yyp); }
public static object IntRotRotArgumentDeclarationList_factory(Parser yyp) { return new IntRotRotArgumentDeclarationList(yyp); }
public static object IntArgEvent_1_factory(Parser yyp) { return new IntArgEvent_1(yyp); }
public static object IntArgEvent_2_factory(Parser yyp) { return new IntArgEvent_2(yyp); }
public static object WhileStatement_factory(Parser yyp) { return new WhileStatement(yyp); }
public static object ForLoop_1_factory(Parser yyp) { return new ForLoop_1(yyp); }
public static object Constant_2_factory(Parser yyp) { return new Constant_2(yyp); }
public static object VoidArgEvent_factory(Parser yyp) { return new VoidArgEvent(yyp); }
public static object RotDeclaration_factory(Parser yyp) { return new RotDeclaration(yyp); }
public static object WhileStatement_1_factory(Parser yyp) { return new WhileStatement_1(yyp); }
public static object WhileStatement_2_factory(Parser yyp) { return new WhileStatement_2(yyp); }
public static object VectorArgStateEvent_1_factory(Parser yyp) { return new VectorArgStateEvent_1(yyp); }
public static object IdentExpression_1_factory(Parser yyp) { return new IdentExpression_1(yyp); }
public static object VectorArgumentDeclarationList_factory(Parser yyp) { return new VectorArgumentDeclarationList(yyp); }
public static object States_factory(Parser yyp) { return new States(yyp); }
public static object VoidArgStateEvent_factory(Parser yyp) { return new VoidArgStateEvent(yyp); }
}
public class LSLSyntax
: Parser {
public LSLSyntax
():base(new yyLSLSyntax
(),new LSLTokens()) {}
public LSLSyntax
(YyParser syms):base(syms,new LSLTokens()) {}
public LSLSyntax
(YyParser syms,ErrorHandler erh):base(syms,new LSLTokens(erh)) {}

 }
}
